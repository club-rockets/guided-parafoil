
C:\Users\Hugo\Documents\SGP Project\STM32_Development\SGP_Project\Debug\SGP_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c98  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08005e20  08005e20  00015e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005ea4  08005ea4  00015ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005ea8  08005ea8  00015ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001bc  20000000  08005eac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000201bc  2**0
                  CONTENTS
  7 .bss          00000adc  200001bc  200001bc  000201bc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000c98  20000c98  000201bc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002334a  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005c2d  00000000  00000000  00043536  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00012232  00000000  00000000  00049163  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001858  00000000  00000000  0005b398  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001b28  00000000  00000000  0005cbf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000c523  00000000  00000000  0005e718  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000769c  00000000  00000000  0006ac3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007e  00000000  00000000  000722d7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004768  00000000  00000000  00072358  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001bc 	.word	0x200001bc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005e08 	.word	0x08005e08

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001c0 	.word	0x200001c0
 80001c4:	08005e08 	.word	0x08005e08

080001c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c8:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80001ca:	4b08      	ldr	r3, [pc, #32]	; (80001ec <HAL_InitTick+0x24>)
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001cc:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80001ce:	6818      	ldr	r0, [r3, #0]
 80001d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80001d8:	f000 faac 	bl	8000734 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001dc:	2200      	movs	r2, #0
 80001de:	4621      	mov	r1, r4
 80001e0:	f04f 30ff 	mov.w	r0, #4294967295
 80001e4:	f000 fa66 	bl	80006b4 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80001e8:	2000      	movs	r0, #0
 80001ea:	bd10      	pop	{r4, pc}
 80001ec:	20000110 	.word	0x20000110

080001f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001f0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80001f2:	4b0b      	ldr	r3, [pc, #44]	; (8000220 <HAL_Init+0x30>)
 80001f4:	681a      	ldr	r2, [r3, #0]
 80001f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80001fa:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80001fc:	681a      	ldr	r2, [r3, #0]
 80001fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000202:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000204:	681a      	ldr	r2, [r3, #0]
 8000206:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800020a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800020c:	2003      	movs	r0, #3
 800020e:	f000 fa3f 	bl	8000690 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000212:	2000      	movs	r0, #0
 8000214:	f7ff ffd8 	bl	80001c8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000218:	f005 f8b2 	bl	8005380 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 800021c:	2000      	movs	r0, #0
 800021e:	bd08      	pop	{r3, pc}
 8000220:	40023c00 	.word	0x40023c00

08000224 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000224:	4a02      	ldr	r2, [pc, #8]	; (8000230 <HAL_IncTick+0xc>)
 8000226:	6813      	ldr	r3, [r2, #0]
 8000228:	3301      	adds	r3, #1
 800022a:	6013      	str	r3, [r2, #0]
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	200001f4 	.word	0x200001f4

08000234 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000234:	4b01      	ldr	r3, [pc, #4]	; (800023c <HAL_GetTick+0x8>)
 8000236:	6818      	ldr	r0, [r3, #0]
}
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	200001f4 	.word	0x200001f4

08000240 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000240:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000242:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000244:	f7ff fff6 	bl	8000234 <HAL_GetTick>
  uint32_t wait = Delay;
 8000248:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800024a:	1c63      	adds	r3, r4, #1
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
  uint32_t tickstart = HAL_GetTick();
 800024c:	4605      	mov	r5, r0
  uint32_t wait = Delay;
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
     wait++;
 800024e:	bf18      	it	ne
 8000250:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000252:	f7ff ffef 	bl	8000234 <HAL_GetTick>
 8000256:	1b40      	subs	r0, r0, r5
 8000258:	42a0      	cmp	r0, r4
 800025a:	d3fa      	bcc.n	8000252 <HAL_Delay+0x12>
  {
  }
}
 800025c:	b003      	add	sp, #12
 800025e:	bd30      	pop	{r4, r5, pc}

08000260 <HAL_CAN_Init>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef* hcan)
{
 8000260:	b570      	push	{r4, r5, r6, lr}
  uint32_t InitStatus = CAN_INITSTATUS_FAILED;
  uint32_t tickstart = 0U;
  
  /* Check CAN handle */
  if(hcan == NULL)
 8000262:	4604      	mov	r4, r0
 8000264:	2800      	cmp	r0, #0
 8000266:	f000 808f 	beq.w	8000388 <HAL_CAN_Init+0x128>
  assert_param(IS_CAN_BS1(hcan->Init.BS1));
  assert_param(IS_CAN_BS2(hcan->Init.BS2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
  

  if(hcan->State == HAL_CAN_STATE_RESET)
 800026a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800026e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000272:	b91b      	cbnz	r3, 800027c <HAL_CAN_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hcan->Lock = HAL_UNLOCKED;
 8000274:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    /* Init the low level hardware */
    HAL_CAN_MspInit(hcan);
 8000278:	f004 fd8c 	bl	8004d94 <HAL_CAN_MspInit>
  }
  
  /* Initialize the CAN state*/
  hcan->State = HAL_CAN_STATE_BUSY;
 800027c:	2302      	movs	r3, #2
 800027e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  
  /* Exit from sleep mode */
  hcan->Instance->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 8000282:	6823      	ldr	r3, [r4, #0]
 8000284:	681a      	ldr	r2, [r3, #0]
 8000286:	f022 0202 	bic.w	r2, r2, #2
 800028a:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  hcan->Instance->MCR |= CAN_MCR_INRQ ;
 800028c:	681a      	ldr	r2, [r3, #0]
 800028e:	f042 0201 	orr.w	r2, r2, #1
 8000292:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000294:	f7ff ffce 	bl	8000234 <HAL_GetTick>
 8000298:	4606      	mov	r6, r0

  /* Wait the acknowledge */
  while((hcan->Instance->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 800029a:	6823      	ldr	r3, [r4, #0]
 800029c:	685a      	ldr	r2, [r3, #4]
 800029e:	f012 0501 	ands.w	r5, r2, #1
 80002a2:	d10a      	bne.n	80002ba <HAL_CAN_Init+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > CAN_TIMEOUT_VALUE)
 80002a4:	f7ff ffc6 	bl	8000234 <HAL_GetTick>
 80002a8:	1b80      	subs	r0, r0, r6
 80002aa:	280a      	cmp	r0, #10
 80002ac:	d9f5      	bls.n	800029a <HAL_CAN_Init+0x3a>
    {
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 80002ae:	2003      	movs	r0, #3
 80002b0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
      /* Process unlocked */
      __HAL_UNLOCK(hcan);
 80002b4:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
      return HAL_TIMEOUT;
 80002b8:	bd70      	pop	{r4, r5, r6, pc}
    }
  }

  /* Check acknowledge */
  if ((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 80002ba:	685a      	ldr	r2, [r3, #4]
 80002bc:	07d1      	lsls	r1, r2, #31
 80002be:	d560      	bpl.n	8000382 <HAL_CAN_Init+0x122>
  {
    /* Set the time triggered communication mode */
    if (hcan->Init.TTCM == ENABLE)
 80002c0:	69a2      	ldr	r2, [r4, #24]
 80002c2:	2a01      	cmp	r2, #1
    {
      hcan->Instance->MCR |= CAN_MCR_TTCM;
 80002c4:	681a      	ldr	r2, [r3, #0]
 80002c6:	bf0c      	ite	eq
 80002c8:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 80002cc:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 80002d0:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic bus-off management */
    if (hcan->Init.ABOM == ENABLE)
 80002d2:	69e2      	ldr	r2, [r4, #28]
 80002d4:	2a01      	cmp	r2, #1
    {
      hcan->Instance->MCR |= CAN_MCR_ABOM;
 80002d6:	681a      	ldr	r2, [r3, #0]
 80002d8:	bf0c      	ite	eq
 80002da:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 80002de:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 80002e2:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic wake-up mode */
    if (hcan->Init.AWUM == ENABLE)
 80002e4:	6a22      	ldr	r2, [r4, #32]
 80002e6:	2a01      	cmp	r2, #1
    {
      hcan->Instance->MCR |= CAN_MCR_AWUM;
 80002e8:	681a      	ldr	r2, [r3, #0]
 80002ea:	bf0c      	ite	eq
 80002ec:	f042 0220 	orreq.w	r2, r2, #32
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 80002f0:	f022 0220 	bicne.w	r2, r2, #32
 80002f4:	601a      	str	r2, [r3, #0]
    }

    /* Set the no automatic retransmission */
    if (hcan->Init.NART == ENABLE)
 80002f6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80002f8:	2a01      	cmp	r2, #1
    {
      hcan->Instance->MCR |= CAN_MCR_NART;
 80002fa:	681a      	ldr	r2, [r3, #0]
 80002fc:	bf0c      	ite	eq
 80002fe:	f042 0210 	orreq.w	r2, r2, #16
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_NART;
 8000302:	f022 0210 	bicne.w	r2, r2, #16
 8000306:	601a      	str	r2, [r3, #0]
    }

    /* Set the receive FIFO locked mode */
    if (hcan->Init.RFLM == ENABLE)
 8000308:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800030a:	2a01      	cmp	r2, #1
    {
      hcan->Instance->MCR |= CAN_MCR_RFLM;
 800030c:	681a      	ldr	r2, [r3, #0]
 800030e:	bf0c      	ite	eq
 8000310:	f042 0208 	orreq.w	r2, r2, #8
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 8000314:	f022 0208 	bicne.w	r2, r2, #8
 8000318:	601a      	str	r2, [r3, #0]
    }

    /* Set the transmit FIFO priority */
    if (hcan->Init.TXFP == ENABLE)
 800031a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800031c:	2a01      	cmp	r2, #1
    {
      hcan->Instance->MCR |= CAN_MCR_TXFP;
 800031e:	681a      	ldr	r2, [r3, #0]
 8000320:	bf0c      	ite	eq
 8000322:	f042 0204 	orreq.w	r2, r2, #4
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 8000326:	f022 0204 	bicne.w	r2, r2, #4
 800032a:	601a      	str	r2, [r3, #0]

    /* Set the bit timing register */
    hcan->Instance->BTR = (uint32_t)((uint32_t)hcan->Init.Mode) | \
                ((uint32_t)hcan->Init.SJW) | \
                ((uint32_t)hcan->Init.BS1) | \
                ((uint32_t)hcan->Init.BS2) | \
 800032c:	68e2      	ldr	r2, [r4, #12]
 800032e:	68a1      	ldr	r1, [r4, #8]
 8000330:	4311      	orrs	r1, r2
 8000332:	6922      	ldr	r2, [r4, #16]
 8000334:	4311      	orrs	r1, r2
 8000336:	6962      	ldr	r2, [r4, #20]
 8000338:	4311      	orrs	r1, r2
 800033a:	6862      	ldr	r2, [r4, #4]
 800033c:	3a01      	subs	r2, #1
 800033e:	430a      	orrs	r2, r1
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    hcan->Instance->BTR = (uint32_t)((uint32_t)hcan->Init.Mode) | \
 8000340:	61da      	str	r2, [r3, #28]
                ((uint32_t)hcan->Init.BS1) | \
                ((uint32_t)hcan->Init.BS2) | \
               ((uint32_t)hcan->Init.Prescaler - 1U);

    /* Request leave initialisation */
    hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 8000342:	681a      	ldr	r2, [r3, #0]
 8000344:	f022 0201 	bic.w	r2, r2, #1
 8000348:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800034a:	f7ff ff73 	bl	8000234 <HAL_GetTick>
 800034e:	4605      	mov	r5, r0

   /* Wait the acknowledge */
   while((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8000350:	6823      	ldr	r3, [r4, #0]
 8000352:	685a      	ldr	r2, [r3, #4]
 8000354:	07d2      	lsls	r2, r2, #31
 8000356:	d50b      	bpl.n	8000370 <HAL_CAN_Init+0x110>
   {
    if((HAL_GetTick() - tickstart ) > CAN_TIMEOUT_VALUE)
 8000358:	f7ff ff6c 	bl	8000234 <HAL_GetTick>
 800035c:	1b40      	subs	r0, r0, r5
 800035e:	280a      	cmp	r0, #10
 8000360:	d9f6      	bls.n	8000350 <HAL_CAN_Init+0xf0>
     {
       hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000362:	2003      	movs	r0, #3
       /* Process unlocked */
       __HAL_UNLOCK(hcan);
 8000364:	2300      	movs	r3, #0
   /* Wait the acknowledge */
   while((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
   {
    if((HAL_GetTick() - tickstart ) > CAN_TIMEOUT_VALUE)
     {
       hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000366:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
       /* Process unlocked */
       __HAL_UNLOCK(hcan);
 800036a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
       return HAL_TIMEOUT;
 800036e:	bd70      	pop	{r4, r5, r6, pc}
     }
   }

    /* Check acknowledged */
    if ((hcan->Instance->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 8000370:	6858      	ldr	r0, [r3, #4]
 8000372:	f010 0001 	ands.w	r0, r0, #1
 8000376:	d104      	bne.n	8000382 <HAL_CAN_Init+0x122>
  {
    /* Set CAN error code to none */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
    
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_READY;
 8000378:	2301      	movs	r3, #1
  }
 
  if(InitStatus == CAN_INITSTATUS_SUCCESS)
  {
    /* Set CAN error code to none */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800037a:	6420      	str	r0, [r4, #64]	; 0x40
    
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_READY;
 800037c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  
    /* Return function status */
    return HAL_OK;
 8000380:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_ERROR;
 8000382:	2304      	movs	r3, #4
 8000384:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    
    /* Return function status */
    return HAL_ERROR;
 8000388:	2001      	movs	r0, #1
  }
}
 800038a:	bd70      	pop	{r4, r5, r6, pc}

0800038c <HAL_CAN_TxCpltCallback>:
 800038c:	4770      	bx	lr

0800038e <HAL_CAN_RxCpltCallback>:
 800038e:	4770      	bx	lr

08000390 <CAN_Receive_IT>:
  * @param  FIFONumber: Specify the FIFO number    
  * @retval HAL status
  * @retval None
  */
static HAL_StatusTypeDef CAN_Receive_IT(CAN_HandleTypeDef* hcan, uint8_t FIFONumber)
{
 8000390:	b538      	push	{r3, r4, r5, lr}
  CanRxMsgTypeDef* pRxMsg = NULL;

  /* Set RxMsg pointer */
  if(FIFONumber == CAN_FIFO0)
  {
    pRxMsg = hcan->pRxMsg;
 8000392:	6b42      	ldr	r2, [r0, #52]	; 0x34
  }
  else /* FIFONumber == CAN_FIFO1 */
  {
    pRxMsg = hcan->pRx1Msg;
 8000394:	6b83      	ldr	r3, [r0, #56]	; 0x38
  }

  /* Get the Id */
  pRxMsg->IDE = (uint8_t)0x04 & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 8000396:	6804      	ldr	r4, [r0, #0]
  CanRxMsgTypeDef* pRxMsg = NULL;

  /* Set RxMsg pointer */
  if(FIFONumber == CAN_FIFO0)
  {
    pRxMsg = hcan->pRxMsg;
 8000398:	2900      	cmp	r1, #0
 800039a:	bf08      	it	eq
 800039c:	4613      	moveq	r3, r2
 800039e:	eb04 1201 	add.w	r2, r4, r1, lsl #4
  {
    pRxMsg = hcan->pRx1Msg;
  }

  /* Get the Id */
  pRxMsg->IDE = (uint8_t)0x04 & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 80003a2:	f8d2 51b0 	ldr.w	r5, [r2, #432]	; 0x1b0
 80003a6:	f005 0504 	and.w	r5, r5, #4
 80003aa:	609d      	str	r5, [r3, #8]
  if (pRxMsg->IDE == CAN_ID_STD)
 80003ac:	b925      	cbnz	r5, 80003b8 <CAN_Receive_IT+0x28>
  {
    pRxMsg->StdId = 0x000007FFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 21U);
 80003ae:	f8d2 51b0 	ldr.w	r5, [r2, #432]	; 0x1b0
 80003b2:	0d6d      	lsrs	r5, r5, #21
 80003b4:	601d      	str	r5, [r3, #0]
 80003b6:	e003      	b.n	80003c0 <CAN_Receive_IT+0x30>
  }
  else
  {
    pRxMsg->ExtId = 0x1FFFFFFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 3U);
 80003b8:	f8d2 51b0 	ldr.w	r5, [r2, #432]	; 0x1b0
 80003bc:	08ed      	lsrs	r5, r5, #3
 80003be:	605d      	str	r5, [r3, #4]
  }
  
  pRxMsg->RTR = (uint8_t)0x02 & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 80003c0:	f8d2 51b0 	ldr.w	r5, [r2, #432]	; 0x1b0
 80003c4:	f005 0502 	and.w	r5, r5, #2
 80003c8:	60dd      	str	r5, [r3, #12]
  /* Get the DLC */
  pRxMsg->DLC = (uint8_t)0x0F & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR;
 80003ca:	f8d2 51b4 	ldr.w	r5, [r2, #436]	; 0x1b4
  /* Get the FIFONumber */
  pRxMsg->FIFONumber = FIFONumber;
 80003ce:	6219      	str	r1, [r3, #32]
    pRxMsg->ExtId = 0x1FFFFFFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 3U);
  }
  
  pRxMsg->RTR = (uint8_t)0x02 & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
  /* Get the DLC */
  pRxMsg->DLC = (uint8_t)0x0F & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR;
 80003d0:	f005 050f 	and.w	r5, r5, #15
 80003d4:	611d      	str	r5, [r3, #16]
  /* Get the FIFONumber */
  pRxMsg->FIFONumber = FIFONumber;
  /* Get the FMI */
  pRxMsg->FMI = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDTR >> 8U);
 80003d6:	f8d2 21b4 	ldr.w	r2, [r2, #436]	; 0x1b4
 80003da:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80003de:	61da      	str	r2, [r3, #28]
  /* Get the data field */
  pRxMsg->Data[0] = (uint8_t)0xFF & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR;
 80003e0:	010a      	lsls	r2, r1, #4
 80003e2:	4414      	add	r4, r2
 80003e4:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 80003e8:	751c      	strb	r4, [r3, #20]
  pRxMsg->Data[1] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 8U);
 80003ea:	6804      	ldr	r4, [r0, #0]
 80003ec:	4414      	add	r4, r2
 80003ee:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 80003f2:	0a24      	lsrs	r4, r4, #8
 80003f4:	755c      	strb	r4, [r3, #21]
  pRxMsg->Data[2] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 16U);
 80003f6:	6804      	ldr	r4, [r0, #0]
 80003f8:	4414      	add	r4, r2
 80003fa:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 80003fe:	0c24      	lsrs	r4, r4, #16
 8000400:	759c      	strb	r4, [r3, #22]
  pRxMsg->Data[3] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 24U);
 8000402:	6804      	ldr	r4, [r0, #0]
 8000404:	4414      	add	r4, r2
 8000406:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 800040a:	0e24      	lsrs	r4, r4, #24
 800040c:	75dc      	strb	r4, [r3, #23]
  pRxMsg->Data[4] = (uint8_t)0xFF & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR;
 800040e:	6804      	ldr	r4, [r0, #0]
 8000410:	4414      	add	r4, r2
 8000412:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 8000416:	761c      	strb	r4, [r3, #24]
  pRxMsg->Data[5] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 8U);
 8000418:	6804      	ldr	r4, [r0, #0]
 800041a:	4414      	add	r4, r2
 800041c:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 8000420:	0a24      	lsrs	r4, r4, #8
 8000422:	765c      	strb	r4, [r3, #25]
  pRxMsg->Data[6] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 16U);
 8000424:	6804      	ldr	r4, [r0, #0]
 8000426:	4414      	add	r4, r2
 8000428:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 800042c:	0c24      	lsrs	r4, r4, #16
 800042e:	769c      	strb	r4, [r3, #26]
  pRxMsg->Data[7] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 24U);
 8000430:	6804      	ldr	r4, [r0, #0]
 8000432:	4422      	add	r2, r4
 8000434:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000438:	0e12      	lsrs	r2, r2, #24
 800043a:	76da      	strb	r2, [r3, #27]
 800043c:	6803      	ldr	r3, [r0, #0]
 800043e:	2220      	movs	r2, #32
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8000440:	b921      	cbnz	r1, 800044c <CAN_Receive_IT+0xbc>
  {
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO0);
 8000442:	60da      	str	r2, [r3, #12]

    /* Disable FIFO 0 overrun and message pending Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FOV0 | CAN_IT_FMP0);
 8000444:	695a      	ldr	r2, [r3, #20]
 8000446:	f022 020a 	bic.w	r2, r2, #10
 800044a:	e003      	b.n	8000454 <CAN_Receive_IT+0xc4>
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO1);
 800044c:	611a      	str	r2, [r3, #16]

    /* Disable FIFO 1 overrun and message pending Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FOV1 | CAN_IT_FMP1);
 800044e:	695a      	ldr	r2, [r3, #20]
 8000450:	f022 0250 	bic.w	r2, r2, #80	; 0x50
 8000454:	615a      	str	r2, [r3, #20]
  }

  tmp1 = hcan->State;
 8000456:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
  if((tmp1 == HAL_CAN_STATE_BUSY_RX0) || (tmp1 == HAL_CAN_STATE_BUSY_RX1))
 800045a:	f002 02ef 	and.w	r2, r2, #239	; 0xef
 800045e:	2a22      	cmp	r2, #34	; 0x22
  {   
    /* Disable Error warning, Error passive, Bus-off, Last error code
       and Error Interrupts */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 8000460:	bf02      	ittt	eq
 8000462:	695a      	ldreq	r2, [r3, #20]
 8000464:	f422 420f 	biceq.w	r2, r2, #36608	; 0x8f00
 8000468:	615a      	streq	r2, [r3, #20]
  }

  /* Change CAN state */
  if (FIFONumber == CAN_FIFO0)
  {
    switch(hcan->State)
 800046a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800046e:	b2db      	uxtb	r3, r3
                               CAN_IT_LEC |
                               CAN_IT_ERR);
  }

  /* Change CAN state */
  if (FIFONumber == CAN_FIFO0)
 8000470:	b949      	cbnz	r1, 8000486 <CAN_Receive_IT+0xf6>
  {
    switch(hcan->State)
 8000472:	2b62      	cmp	r3, #98	; 0x62
 8000474:	d003      	beq.n	800047e <CAN_Receive_IT+0xee>
 8000476:	2b72      	cmp	r3, #114	; 0x72
 8000478:	d003      	beq.n	8000482 <CAN_Receive_IT+0xf2>
 800047a:	2b42      	cmp	r3, #66	; 0x42
 800047c:	e008      	b.n	8000490 <CAN_Receive_IT+0x100>
    {
      case(HAL_CAN_STATE_BUSY_TX_RX0):
        hcan->State = HAL_CAN_STATE_BUSY_TX;
        break;
      case(HAL_CAN_STATE_BUSY_RX0_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_RX1;
 800047e:	2332      	movs	r3, #50	; 0x32
 8000480:	e00e      	b.n	80004a0 <CAN_Receive_IT+0x110>
        break;
      case(HAL_CAN_STATE_BUSY_TX_RX0_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
 8000482:	2352      	movs	r3, #82	; 0x52
 8000484:	e00c      	b.n	80004a0 <CAN_Receive_IT+0x110>
        break;
    }
  }
  else /* FIFONumber == CAN_FIFO1 */
  {
    switch(hcan->State)
 8000486:	2b62      	cmp	r3, #98	; 0x62
 8000488:	d005      	beq.n	8000496 <CAN_Receive_IT+0x106>
 800048a:	2b72      	cmp	r3, #114	; 0x72
 800048c:	d005      	beq.n	800049a <CAN_Receive_IT+0x10a>
 800048e:	2b52      	cmp	r3, #82	; 0x52
 8000490:	d105      	bne.n	800049e <CAN_Receive_IT+0x10e>
    {
      case(HAL_CAN_STATE_BUSY_TX_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_TX;
 8000492:	2312      	movs	r3, #18
 8000494:	e004      	b.n	80004a0 <CAN_Receive_IT+0x110>
        break;
      case(HAL_CAN_STATE_BUSY_RX0_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_RX0;
 8000496:	2322      	movs	r3, #34	; 0x22
 8000498:	e002      	b.n	80004a0 <CAN_Receive_IT+0x110>
        break;
      case(HAL_CAN_STATE_BUSY_TX_RX0_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
 800049a:	2342      	movs	r3, #66	; 0x42
 800049c:	e000      	b.n	80004a0 <CAN_Receive_IT+0x110>
        break;
      default: /* HAL_CAN_STATE_BUSY_RX1 */
        hcan->State = HAL_CAN_STATE_READY;
 800049e:	2301      	movs	r3, #1
 80004a0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        break;
    }
  }

  /* Receive complete callback */ 
  HAL_CAN_RxCpltCallback(hcan);
 80004a4:	f7ff ff73 	bl	800038e <HAL_CAN_RxCpltCallback>

  /* Return function status */
  return HAL_OK;
}
 80004a8:	2000      	movs	r0, #0
 80004aa:	bd38      	pop	{r3, r4, r5, pc}

080004ac <HAL_CAN_ErrorCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80004ac:	4770      	bx	lr
	...

080004b0 <HAL_CAN_IRQHandler>:
{
  uint32_t tmp1 = 0U, tmp2 = 0U, tmp3 = 0U;
  uint32_t errorcode = HAL_CAN_ERROR_NONE;

  /* Check Overrun flag for FIFO0 */
  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV0);
 80004b0:	6803      	ldr	r3, [r0, #0]
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef* hcan)
{
 80004b2:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp1 = 0U, tmp2 = 0U, tmp3 = 0U;
  uint32_t errorcode = HAL_CAN_ERROR_NONE;

  /* Check Overrun flag for FIFO0 */
  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV0);
 80004b4:	68dd      	ldr	r5, [r3, #12]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FOV0);
 80004b6:	695a      	ldr	r2, [r3, #20]
  if(tmp1 && tmp2)
 80004b8:	f015 0510 	ands.w	r5, r5, #16
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef* hcan)
{
 80004bc:	4604      	mov	r4, r0
  uint32_t errorcode = HAL_CAN_ERROR_NONE;

  /* Check Overrun flag for FIFO0 */
  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV0);
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FOV0);
  if(tmp1 && tmp2)
 80004be:	d006      	beq.n	80004ce <HAL_CAN_IRQHandler+0x1e>
 80004c0:	f012 0508 	ands.w	r5, r2, #8
  {
    /* Set CAN error code to FOV0 error */
    errorcode |= HAL_CAN_ERROR_FOV0;

    /* Clear FIFO0 Overrun Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80004c4:	bf1e      	ittt	ne
 80004c6:	2210      	movne	r2, #16
 80004c8:	60da      	strne	r2, [r3, #12]
  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV0);
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FOV0);
  if(tmp1 && tmp2)
  {
    /* Set CAN error code to FOV0 error */
    errorcode |= HAL_CAN_ERROR_FOV0;
 80004ca:	f44f 7500 	movne.w	r5, #512	; 0x200

    /* Clear FIFO0 Overrun Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
  }
  /* Check Overrun flag for FIFO1 */
  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV1);
 80004ce:	6919      	ldr	r1, [r3, #16]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FOV1);
 80004d0:	695a      	ldr	r2, [r3, #20]

  if(tmp1 && tmp2)
 80004d2:	06c9      	lsls	r1, r1, #27
 80004d4:	d505      	bpl.n	80004e2 <HAL_CAN_IRQHandler+0x32>
 80004d6:	0652      	lsls	r2, r2, #25
  {
    /* Set CAN error code to FOV1 error */
    errorcode |= HAL_CAN_ERROR_FOV1;

    /* Clear FIFO1 Overrun Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80004d8:	bf42      	ittt	mi
 80004da:	2210      	movmi	r2, #16
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FOV1);

  if(tmp1 && tmp2)
  {
    /* Set CAN error code to FOV1 error */
    errorcode |= HAL_CAN_ERROR_FOV1;
 80004dc:	f445 6580 	orrmi.w	r5, r5, #1024	; 0x400

    /* Clear FIFO1 Overrun Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80004e0:	611a      	strmi	r2, [r3, #16]
  }

  /* Check End of transmission flag */
  if(__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_TME))
 80004e2:	695a      	ldr	r2, [r3, #20]
 80004e4:	07d6      	lsls	r6, r2, #31
 80004e6:	d543      	bpl.n	8000570 <HAL_CAN_IRQHandler+0xc0>
  {
    tmp1 = __HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0);
 80004e8:	689e      	ldr	r6, [r3, #8]
    tmp2 = __HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1);
    tmp3 = __HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_2);
    if(tmp1 || tmp2 || tmp3)  
 80004ea:	4a65      	ldr	r2, [pc, #404]	; (8000680 <HAL_CAN_IRQHandler+0x1d0>)

  /* Check End of transmission flag */
  if(__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_TME))
  {
    tmp1 = __HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0);
    tmp2 = __HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1);
 80004ec:	6898      	ldr	r0, [r3, #8]
    tmp3 = __HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_2);
 80004ee:	6899      	ldr	r1, [r3, #8]
    if(tmp1 || tmp2 || tmp3)  
 80004f0:	4032      	ands	r2, r6
 80004f2:	4e63      	ldr	r6, [pc, #396]	; (8000680 <HAL_CAN_IRQHandler+0x1d0>)
 80004f4:	42b2      	cmp	r2, r6
 80004f6:	d009      	beq.n	800050c <HAL_CAN_IRQHandler+0x5c>
 80004f8:	4a62      	ldr	r2, [pc, #392]	; (8000684 <HAL_CAN_IRQHandler+0x1d4>)
 80004fa:	4002      	ands	r2, r0
 80004fc:	4861      	ldr	r0, [pc, #388]	; (8000684 <HAL_CAN_IRQHandler+0x1d4>)
 80004fe:	4282      	cmp	r2, r0
 8000500:	d004      	beq.n	800050c <HAL_CAN_IRQHandler+0x5c>
 8000502:	4a61      	ldr	r2, [pc, #388]	; (8000688 <HAL_CAN_IRQHandler+0x1d8>)
 8000504:	400a      	ands	r2, r1
 8000506:	4960      	ldr	r1, [pc, #384]	; (8000688 <HAL_CAN_IRQHandler+0x1d8>)
 8000508:	428a      	cmp	r2, r1
 800050a:	d131      	bne.n	8000570 <HAL_CAN_IRQHandler+0xc0>
    {
      tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK0);
 800050c:	6898      	ldr	r0, [r3, #8]
      tmp2 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK1);
 800050e:	6899      	ldr	r1, [r3, #8]
      tmp3 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK2);
 8000510:	689a      	ldr	r2, [r3, #8]
      /* Check Transmit success */
      if(tmp1 || tmp2 || tmp3)
 8000512:	0780      	lsls	r0, r0, #30
 8000514:	d403      	bmi.n	800051e <HAL_CAN_IRQHandler+0x6e>
 8000516:	0589      	lsls	r1, r1, #22
 8000518:	d401      	bmi.n	800051e <HAL_CAN_IRQHandler+0x6e>
 800051a:	0396      	lsls	r6, r2, #14
 800051c:	d521      	bpl.n	8000562 <HAL_CAN_IRQHandler+0xb2>
  * @retval HAL status
  */
static HAL_StatusTypeDef CAN_Transmit_IT(CAN_HandleTypeDef* hcan)
{
  /* Disable Transmit mailbox empty Interrupt */
  __HAL_CAN_DISABLE_IT(hcan, CAN_IT_TME);
 800051e:	695a      	ldr	r2, [r3, #20]
 8000520:	f022 0201 	bic.w	r2, r2, #1
 8000524:	615a      	str	r2, [r3, #20]
  
  if(hcan->State == HAL_CAN_STATE_BUSY_TX)
 8000526:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 800052a:	2a12      	cmp	r2, #18
  {   
    /* Disable Error warning, Error passive, Bus-off, Last error code
       and Error Interrupts */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 800052c:	bf02      	ittt	eq
 800052e:	695a      	ldreq	r2, [r3, #20]
 8000530:	f422 420f 	biceq.w	r2, r2, #36608	; 0x8f00
 8000534:	615a      	streq	r2, [r3, #20]
                               CAN_IT_LEC |
                               CAN_IT_ERR );
  }

  /* Change CAN state */
  switch(hcan->State)
 8000536:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800053a:	b2db      	uxtb	r3, r3
 800053c:	2b52      	cmp	r3, #82	; 0x52
 800053e:	d005      	beq.n	800054c <HAL_CAN_IRQHandler+0x9c>
 8000540:	2b72      	cmp	r3, #114	; 0x72
 8000542:	d005      	beq.n	8000550 <HAL_CAN_IRQHandler+0xa0>
 8000544:	2b42      	cmp	r3, #66	; 0x42
 8000546:	d105      	bne.n	8000554 <HAL_CAN_IRQHandler+0xa4>
  {
    case(HAL_CAN_STATE_BUSY_TX_RX0):
      hcan->State = HAL_CAN_STATE_BUSY_RX0;
 8000548:	2322      	movs	r3, #34	; 0x22
 800054a:	e004      	b.n	8000556 <HAL_CAN_IRQHandler+0xa6>
      break;
    case(HAL_CAN_STATE_BUSY_TX_RX1):
      hcan->State = HAL_CAN_STATE_BUSY_RX1;
 800054c:	2332      	movs	r3, #50	; 0x32
 800054e:	e002      	b.n	8000556 <HAL_CAN_IRQHandler+0xa6>
      break;
    case(HAL_CAN_STATE_BUSY_TX_RX0_RX1):
      hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 8000550:	2362      	movs	r3, #98	; 0x62
 8000552:	e000      	b.n	8000556 <HAL_CAN_IRQHandler+0xa6>
      break;
    default: /* HAL_CAN_STATE_BUSY_TX */
      hcan->State = HAL_CAN_STATE_READY;
 8000554:	2301      	movs	r3, #1
 8000556:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      break;
  }

  /* Transmission complete callback */ 
  HAL_CAN_TxCpltCallback(hcan);
 800055a:	4620      	mov	r0, r4
 800055c:	f7ff ff16 	bl	800038c <HAL_CAN_TxCpltCallback>
 8000560:	e001      	b.n	8000566 <HAL_CAN_IRQHandler+0xb6>
        CAN_Transmit_IT(hcan);
      }
      else /* Transmit failure */
      {
        /* Set CAN error code to TXFAIL error */
        errorcode |= HAL_CAN_ERROR_TXFAIL;
 8000562:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
      }

      /* Clear transmission status flags (RQCPx and TXOKx) */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_RQCP0  | CAN_TSR_RQCP1  | CAN_TSR_RQCP2 | \
 8000566:	6822      	ldr	r2, [r4, #0]
 8000568:	4b48      	ldr	r3, [pc, #288]	; (800068c <HAL_CAN_IRQHandler+0x1dc>)
 800056a:	6891      	ldr	r1, [r2, #8]
 800056c:	430b      	orrs	r3, r1
 800056e:	6093      	str	r3, [r2, #8]
                                   CAN_FLAG_TXOK0 | CAN_FLAG_TXOK1 | CAN_FLAG_TXOK2);
    }
  }

  tmp1 = __HAL_CAN_MSG_PENDING(hcan, CAN_FIFO0);
 8000570:	6823      	ldr	r3, [r4, #0]
 8000572:	68da      	ldr	r2, [r3, #12]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP0);
 8000574:	695b      	ldr	r3, [r3, #20]
  /* Check End of reception flag for FIFO0 */
  if((tmp1 != 0U) && tmp2)
 8000576:	0790      	lsls	r0, r2, #30
 8000578:	d005      	beq.n	8000586 <HAL_CAN_IRQHandler+0xd6>
 800057a:	0799      	lsls	r1, r3, #30
 800057c:	d503      	bpl.n	8000586 <HAL_CAN_IRQHandler+0xd6>
  {
    /* Call receive function */
    CAN_Receive_IT(hcan, CAN_FIFO0);
 800057e:	2100      	movs	r1, #0
 8000580:	4620      	mov	r0, r4
 8000582:	f7ff ff05 	bl	8000390 <CAN_Receive_IT>
  }

  tmp1 = __HAL_CAN_MSG_PENDING(hcan, CAN_FIFO1);
 8000586:	6823      	ldr	r3, [r4, #0]
 8000588:	691a      	ldr	r2, [r3, #16]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP1);
 800058a:	695b      	ldr	r3, [r3, #20]
  /* Check End of reception flag for FIFO1 */
  if((tmp1 != 0U) && tmp2)
 800058c:	0792      	lsls	r2, r2, #30
 800058e:	d005      	beq.n	800059c <HAL_CAN_IRQHandler+0xec>
 8000590:	06de      	lsls	r6, r3, #27
 8000592:	d503      	bpl.n	800059c <HAL_CAN_IRQHandler+0xec>
  {
    /* Call receive function */
    CAN_Receive_IT(hcan, CAN_FIFO1);
 8000594:	2101      	movs	r1, #1
 8000596:	4620      	mov	r0, r4
 8000598:	f7ff fefa 	bl	8000390 <CAN_Receive_IT>
  }

  /* Set error code in handle */
  hcan->ErrorCode |= errorcode;
 800059c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800059e:	431d      	orrs	r5, r3

  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG);
 80005a0:	6823      	ldr	r3, [r4, #0]
    /* Call receive function */
    CAN_Receive_IT(hcan, CAN_FIFO1);
  }

  /* Set error code in handle */
  hcan->ErrorCode |= errorcode;
 80005a2:	6425      	str	r5, [r4, #64]	; 0x40

  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG);
 80005a4:	6998      	ldr	r0, [r3, #24]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EWG);
 80005a6:	6959      	ldr	r1, [r3, #20]
  tmp3 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR);
 80005a8:	695a      	ldr	r2, [r3, #20]
  /* Check Error Warning Flag */
  if(tmp1 && tmp2 && tmp3)
 80005aa:	07c0      	lsls	r0, r0, #31
 80005ac:	d507      	bpl.n	80005be <HAL_CAN_IRQHandler+0x10e>
 80005ae:	05ce      	lsls	r6, r1, #23
 80005b0:	d505      	bpl.n	80005be <HAL_CAN_IRQHandler+0x10e>
 80005b2:	0415      	lsls	r5, r2, #16
  {
    /* Set CAN error code to EWG error */
    hcan->ErrorCode |= HAL_CAN_ERROR_EWG;
 80005b4:	bf42      	ittt	mi
 80005b6:	6c22      	ldrmi	r2, [r4, #64]	; 0x40
 80005b8:	f042 0201 	orrmi.w	r2, r2, #1
 80005bc:	6422      	strmi	r2, [r4, #64]	; 0x40
  }
  
  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV);
 80005be:	6998      	ldr	r0, [r3, #24]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EPV);
 80005c0:	6959      	ldr	r1, [r3, #20]
  tmp3 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR); 
 80005c2:	695a      	ldr	r2, [r3, #20]
  /* Check Error Passive Flag */
  if(tmp1 && tmp2 && tmp3)
 80005c4:	0780      	lsls	r0, r0, #30
 80005c6:	d507      	bpl.n	80005d8 <HAL_CAN_IRQHandler+0x128>
 80005c8:	0589      	lsls	r1, r1, #22
 80005ca:	d505      	bpl.n	80005d8 <HAL_CAN_IRQHandler+0x128>
 80005cc:	0412      	lsls	r2, r2, #16
  {
    /* Set CAN error code to EPV error */
    hcan->ErrorCode |= HAL_CAN_ERROR_EPV;
 80005ce:	bf42      	ittt	mi
 80005d0:	6c22      	ldrmi	r2, [r4, #64]	; 0x40
 80005d2:	f042 0202 	orrmi.w	r2, r2, #2
 80005d6:	6422      	strmi	r2, [r4, #64]	; 0x40
  }
  
  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_BOF);
 80005d8:	6998      	ldr	r0, [r3, #24]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_BOF);
 80005da:	6959      	ldr	r1, [r3, #20]
  tmp3 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR);  
 80005dc:	695a      	ldr	r2, [r3, #20]
  /* Check Bus-Off Flag */
  if(tmp1 && tmp2 && tmp3)
 80005de:	0746      	lsls	r6, r0, #29
 80005e0:	d507      	bpl.n	80005f2 <HAL_CAN_IRQHandler+0x142>
 80005e2:	054d      	lsls	r5, r1, #21
 80005e4:	d505      	bpl.n	80005f2 <HAL_CAN_IRQHandler+0x142>
 80005e6:	0410      	lsls	r0, r2, #16
  {
    /* Set CAN error code to BOF error */
    hcan->ErrorCode |= HAL_CAN_ERROR_BOF;
 80005e8:	bf42      	ittt	mi
 80005ea:	6c22      	ldrmi	r2, [r4, #64]	; 0x40
 80005ec:	f042 0204 	orrmi.w	r2, r2, #4
 80005f0:	6422      	strmi	r2, [r4, #64]	; 0x40
  }
  
  tmp1 = HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC);
 80005f2:	6998      	ldr	r0, [r3, #24]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC);
 80005f4:	6959      	ldr	r1, [r3, #20]
  tmp3 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR);
 80005f6:	695a      	ldr	r2, [r3, #20]
  /* Check Last error code Flag */
  if((!tmp1) && tmp2 && tmp3)
 80005f8:	f010 0f70 	tst.w	r0, #112	; 0x70
 80005fc:	d02f      	beq.n	800065e <HAL_CAN_IRQHandler+0x1ae>
 80005fe:	0509      	lsls	r1, r1, #20
 8000600:	d52d      	bpl.n	800065e <HAL_CAN_IRQHandler+0x1ae>
 8000602:	0412      	lsls	r2, r2, #16
 8000604:	d52b      	bpl.n	800065e <HAL_CAN_IRQHandler+0x1ae>
  {
    tmp1 = (hcan->Instance->ESR) & CAN_ESR_LEC;
 8000606:	699a      	ldr	r2, [r3, #24]
    switch(tmp1)
 8000608:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800060c:	2a30      	cmp	r2, #48	; 0x30
 800060e:	d016      	beq.n	800063e <HAL_CAN_IRQHandler+0x18e>
 8000610:	d807      	bhi.n	8000622 <HAL_CAN_IRQHandler+0x172>
 8000612:	2a10      	cmp	r2, #16
 8000614:	d00f      	beq.n	8000636 <HAL_CAN_IRQHandler+0x186>
 8000616:	2a20      	cmp	r2, #32
 8000618:	d11d      	bne.n	8000656 <HAL_CAN_IRQHandler+0x1a6>
          /* Set CAN error code to STF error */
          hcan->ErrorCode |= HAL_CAN_ERROR_STF;
          break;
      case(CAN_ESR_LEC_1):
          /* Set CAN error code to FOR error */
          hcan->ErrorCode |= HAL_CAN_ERROR_FOR;
 800061a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800061c:	f042 0210 	orr.w	r2, r2, #16
 8000620:	e018      	b.n	8000654 <HAL_CAN_IRQHandler+0x1a4>
  tmp3 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR);
  /* Check Last error code Flag */
  if((!tmp1) && tmp2 && tmp3)
  {
    tmp1 = (hcan->Instance->ESR) & CAN_ESR_LEC;
    switch(tmp1)
 8000622:	2a50      	cmp	r2, #80	; 0x50
 8000624:	d00f      	beq.n	8000646 <HAL_CAN_IRQHandler+0x196>
 8000626:	2a60      	cmp	r2, #96	; 0x60
 8000628:	d011      	beq.n	800064e <HAL_CAN_IRQHandler+0x19e>
 800062a:	2a40      	cmp	r2, #64	; 0x40
 800062c:	d113      	bne.n	8000656 <HAL_CAN_IRQHandler+0x1a6>
          /* Set CAN error code to ACK error */
          hcan->ErrorCode |= HAL_CAN_ERROR_ACK;
          break;
      case(CAN_ESR_LEC_2):
          /* Set CAN error code to BR error */
          hcan->ErrorCode |= HAL_CAN_ERROR_BR;
 800062e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000630:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000634:	e00e      	b.n	8000654 <HAL_CAN_IRQHandler+0x1a4>
    tmp1 = (hcan->Instance->ESR) & CAN_ESR_LEC;
    switch(tmp1)
    {
      case(CAN_ESR_LEC_0):
          /* Set CAN error code to STF error */
          hcan->ErrorCode |= HAL_CAN_ERROR_STF;
 8000636:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000638:	f042 0208 	orr.w	r2, r2, #8
 800063c:	e00a      	b.n	8000654 <HAL_CAN_IRQHandler+0x1a4>
          /* Set CAN error code to FOR error */
          hcan->ErrorCode |= HAL_CAN_ERROR_FOR;
          break;
      case(CAN_ESR_LEC_1 | CAN_ESR_LEC_0):
          /* Set CAN error code to ACK error */
          hcan->ErrorCode |= HAL_CAN_ERROR_ACK;
 800063e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000640:	f042 0220 	orr.w	r2, r2, #32
 8000644:	e006      	b.n	8000654 <HAL_CAN_IRQHandler+0x1a4>
          /* Set CAN error code to BR error */
          hcan->ErrorCode |= HAL_CAN_ERROR_BR;
          break;
      case(CAN_ESR_LEC_2 | CAN_ESR_LEC_0):
          /* Set CAN error code to BD error */
          hcan->ErrorCode |= HAL_CAN_ERROR_BD;
 8000646:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000648:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800064c:	e002      	b.n	8000654 <HAL_CAN_IRQHandler+0x1a4>
          break;
      case(CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
          /* Set CAN error code to CRC error */
          hcan->ErrorCode |= HAL_CAN_ERROR_CRC;
 800064e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000650:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000654:	6422      	str	r2, [r4, #64]	; 0x40
      default:
          break;
    }

    /* Clear Last error code Flag */ 
    hcan->Instance->ESR &= ~(CAN_ESR_LEC);
 8000656:	699a      	ldr	r2, [r3, #24]
 8000658:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800065c:	619a      	str	r2, [r3, #24]
  }
  
  /* Call the Error call Back in case of Errors */
  if(hcan->ErrorCode != HAL_CAN_ERROR_NONE)
 800065e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000660:	b16a      	cbz	r2, 800067e <HAL_CAN_IRQHandler+0x1ce>
  {
    /* Clear ERRI Flag */ 
    hcan->Instance->MSR = CAN_MSR_ERRI; 
 8000662:	2204      	movs	r2, #4
 8000664:	605a      	str	r2, [r3, #4]
    /* Set the CAN state ready to be able to start again the process */
    hcan->State = HAL_CAN_STATE_READY;
 8000666:	2201      	movs	r2, #1
 8000668:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    /*  - Disable FIFO 0 message pending Interrupt */
    /*  - Disable FIFO 0 Overrun Interrupt */
    /*  - Disable FIFO 1 message pending Interrupt */
    /*  - Disable FIFO 1 Overrun Interrupt */
    /*  - Disable Transmit mailbox empty Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 800066c:	695a      	ldr	r2, [r3, #20]
 800066e:	f422 420f 	bic.w	r2, r2, #36608	; 0x8f00
 8000672:	f022 025b 	bic.w	r2, r2, #91	; 0x5b
 8000676:	615a      	str	r2, [r3, #20]
                               CAN_IT_FMP1|
                               CAN_IT_FOV1|
                               CAN_IT_TME);

    /* Call Error callback function */
    HAL_CAN_ErrorCallback(hcan);
 8000678:	4620      	mov	r0, r4
 800067a:	f7ff ff17 	bl	80004ac <HAL_CAN_ErrorCallback>
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	04000003 	.word	0x04000003
 8000684:	08000300 	.word	0x08000300
 8000688:	10030000 	.word	0x10030000
 800068c:	00010519 	.word	0x00010519

08000690 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000690:	4a07      	ldr	r2, [pc, #28]	; (80006b0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000692:	68d3      	ldr	r3, [r2, #12]
 8000694:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000698:	041b      	lsls	r3, r3, #16
 800069a:	0c1b      	lsrs	r3, r3, #16
 800069c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80006a0:	0200      	lsls	r0, r0, #8
 80006a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006a6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80006aa:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80006ac:	60d3      	str	r3, [r2, #12]
 80006ae:	4770      	bx	lr
 80006b0:	e000ed00 	.word	0xe000ed00

080006b4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006b4:	4b17      	ldr	r3, [pc, #92]	; (8000714 <HAL_NVIC_SetPriority+0x60>)
 80006b6:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006b8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006bc:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006be:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006c2:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006c4:	2c04      	cmp	r4, #4
 80006c6:	bf28      	it	cs
 80006c8:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ca:	2d06      	cmp	r5, #6

  return (
 80006cc:	f04f 0501 	mov.w	r5, #1
 80006d0:	fa05 f404 	lsl.w	r4, r5, r4
 80006d4:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006d8:	bf8c      	ite	hi
 80006da:	3b03      	subhi	r3, #3
 80006dc:	2300      	movls	r3, #0

  return (
 80006de:	400c      	ands	r4, r1
 80006e0:	409c      	lsls	r4, r3
 80006e2:	fa05 f303 	lsl.w	r3, r5, r3
 80006e6:	3b01      	subs	r3, #1
 80006e8:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80006ea:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80006ec:	ea42 0204 	orr.w	r2, r2, r4
 80006f0:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f4:	bfaf      	iteee	ge
 80006f6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fa:	f000 000f 	andlt.w	r0, r0, #15
 80006fe:	4b06      	ldrlt	r3, [pc, #24]	; (8000718 <HAL_NVIC_SetPriority+0x64>)
 8000700:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000702:	bfa5      	ittet	ge
 8000704:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000708:	b2d2      	uxtbge	r2, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070a:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	bf00      	nop
 8000714:	e000ed00 	.word	0xe000ed00
 8000718:	e000ed14 	.word	0xe000ed14

0800071c <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800071c:	0942      	lsrs	r2, r0, #5
 800071e:	2301      	movs	r3, #1
 8000720:	f000 001f 	and.w	r0, r0, #31
 8000724:	fa03 f000 	lsl.w	r0, r3, r0
 8000728:	4b01      	ldr	r3, [pc, #4]	; (8000730 <HAL_NVIC_EnableIRQ+0x14>)
 800072a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800072e:	4770      	bx	lr
 8000730:	e000e100 	.word	0xe000e100

08000734 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000734:	3801      	subs	r0, #1
 8000736:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800073a:	d20a      	bcs.n	8000752 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800073e:	4a07      	ldr	r2, [pc, #28]	; (800075c <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000740:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000742:	21f0      	movs	r1, #240	; 0xf0
 8000744:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000748:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800074a:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800074c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 8000752:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	e000e010 	.word	0xe000e010
 800075c:	e000ed00 	.word	0xe000ed00

08000760 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000760:	4b04      	ldr	r3, [pc, #16]	; (8000774 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000762:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000764:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000766:	bf0c      	ite	eq
 8000768:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800076c:	f022 0204 	bicne.w	r2, r2, #4
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	4770      	bx	lr
 8000774:	e000e010 	.word	0xe000e010

08000778 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000778:	4770      	bx	lr

0800077a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800077a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800077c:	f7ff fffc 	bl	8000778 <HAL_SYSTICK_Callback>
 8000780:	bd08      	pop	{r3, pc}

08000782 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000782:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000786:	2b02      	cmp	r3, #2
 8000788:	d003      	beq.n	8000792 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800078a:	2380      	movs	r3, #128	; 0x80
 800078c:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800078e:	2001      	movs	r0, #1
 8000790:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000792:	6802      	ldr	r2, [r0, #0]
    return HAL_ERROR;
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000794:	2305      	movs	r3, #5
 8000796:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800079a:	6813      	ldr	r3, [r2, #0]
 800079c:	f023 0301 	bic.w	r3, r3, #1
 80007a0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80007a2:	2000      	movs	r0, #0
}
 80007a4:	4770      	bx	lr
	...

080007a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80007ac:	4f6a      	ldr	r7, [pc, #424]	; (8000958 <HAL_GPIO_Init+0x1b0>)
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007ae:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b0:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 8000960 <HAL_GPIO_Init+0x1b8>

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000964 <HAL_GPIO_Init+0x1bc>
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007b8:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007ba:	2200      	movs	r2, #0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007bc:	9301      	str	r3, [sp, #4]
 80007be:	46be      	mov	lr, r7

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80007c0:	2401      	movs	r4, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 80007c2:	9b01      	ldr	r3, [sp, #4]

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80007c4:	4094      	lsls	r4, r2
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 80007c6:	ea34 0303 	bics.w	r3, r4, r3
 80007ca:	f040 80bd 	bne.w	8000948 <HAL_GPIO_Init+0x1a0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007ce:	684d      	ldr	r5, [r1, #4]
 80007d0:	f025 0a10 	bic.w	sl, r5, #16
 80007d4:	f1ba 0f02 	cmp.w	sl, #2
 80007d8:	d114      	bne.n	8000804 <HAL_GPIO_Init+0x5c>
 80007da:	ea4f 09d2 	mov.w	r9, r2, lsr #3
 80007de:	eb00 0989 	add.w	r9, r0, r9, lsl #2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80007e2:	f002 0b07 	and.w	fp, r2, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80007e6:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80007ea:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80007ee:	230f      	movs	r3, #15
 80007f0:	fa03 f30b 	lsl.w	r3, r3, fp
 80007f4:	ea26 0603 	bic.w	r6, r6, r3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80007f8:	690b      	ldr	r3, [r1, #16]
 80007fa:	fa03 f30b 	lsl.w	r3, r3, fp
 80007fe:	4333      	orrs	r3, r6
        GPIOx->AFR[position >> 3U] = temp;
 8000800:	f8c9 3020 	str.w	r3, [r9, #32]
 8000804:	ea4f 0b42 	mov.w	fp, r2, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000808:	f04f 0903 	mov.w	r9, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800080c:	6803      	ldr	r3, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800080e:	fa09 f90b 	lsl.w	r9, r9, fp
 8000812:	ea6f 0909 	mvn.w	r9, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000816:	f005 0603 	and.w	r6, r5, #3
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800081a:	ea03 0309 	and.w	r3, r3, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800081e:	fa06 f60b 	lsl.w	r6, r6, fp
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000822:	f10a 3aff 	add.w	sl, sl, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000826:	4333      	orrs	r3, r6
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000828:	f1ba 0f01 	cmp.w	sl, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;
 800082c:	6003      	str	r3, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800082e:	d80f      	bhi.n	8000850 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000830:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000832:	68ce      	ldr	r6, [r1, #12]
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000834:	ea09 0303 	and.w	r3, r9, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000838:	fa06 f60b 	lsl.w	r6, r6, fp
 800083c:	431e      	orrs	r6, r3
        GPIOx->OSPEEDR = temp;
 800083e:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000840:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000842:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp |= (GPIO_Init->Speed << (position * 2U));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000846:	ea23 0304 	bic.w	r3, r3, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800084a:	4096      	lsls	r6, r2
 800084c:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 800084e:	6043      	str	r3, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000850:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000852:	ea09 0903 	and.w	r9, r9, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000856:	688b      	ldr	r3, [r1, #8]
 8000858:	fa03 f30b 	lsl.w	r3, r3, fp
 800085c:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
 8000860:	60c3      	str	r3, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000862:	00eb      	lsls	r3, r5, #3
 8000864:	d570      	bpl.n	8000948 <HAL_GPIO_Init+0x1a0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	9303      	str	r3, [sp, #12]
 800086a:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800086e:	4b3b      	ldr	r3, [pc, #236]	; (800095c <HAL_GPIO_Init+0x1b4>)
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000870:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8000874:	f8cc 6044 	str.w	r6, [ip, #68]	; 0x44
 8000878:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44
 800087c:	f022 0903 	bic.w	r9, r2, #3
 8000880:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 8000884:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8000888:	f509 399c 	add.w	r9, r9, #79872	; 0x13800
 800088c:	9603      	str	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800088e:	f002 0a03 	and.w	sl, r2, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000892:	9e03      	ldr	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000894:	f8d9 b008 	ldr.w	fp, [r9, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000898:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800089c:	260f      	movs	r6, #15
 800089e:	fa06 f60a 	lsl.w	r6, r6, sl
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008a2:	4298      	cmp	r0, r3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80008a4:	ea2b 0606 	bic.w	r6, fp, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008a8:	d01c      	beq.n	80008e4 <HAL_GPIO_Init+0x13c>
 80008aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80008ae:	4298      	cmp	r0, r3
 80008b0:	d01a      	beq.n	80008e8 <HAL_GPIO_Init+0x140>
 80008b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80008b6:	4298      	cmp	r0, r3
 80008b8:	d018      	beq.n	80008ec <HAL_GPIO_Init+0x144>
 80008ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80008be:	4298      	cmp	r0, r3
 80008c0:	d016      	beq.n	80008f0 <HAL_GPIO_Init+0x148>
 80008c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80008c6:	4298      	cmp	r0, r3
 80008c8:	d014      	beq.n	80008f4 <HAL_GPIO_Init+0x14c>
 80008ca:	4540      	cmp	r0, r8
 80008cc:	d014      	beq.n	80008f8 <HAL_GPIO_Init+0x150>
 80008ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80008d2:	4298      	cmp	r0, r3
 80008d4:	d012      	beq.n	80008fc <HAL_GPIO_Init+0x154>
 80008d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80008da:	4298      	cmp	r0, r3
 80008dc:	bf14      	ite	ne
 80008de:	2308      	movne	r3, #8
 80008e0:	2307      	moveq	r3, #7
 80008e2:	e00c      	b.n	80008fe <HAL_GPIO_Init+0x156>
 80008e4:	2300      	movs	r3, #0
 80008e6:	e00a      	b.n	80008fe <HAL_GPIO_Init+0x156>
 80008e8:	2301      	movs	r3, #1
 80008ea:	e008      	b.n	80008fe <HAL_GPIO_Init+0x156>
 80008ec:	2302      	movs	r3, #2
 80008ee:	e006      	b.n	80008fe <HAL_GPIO_Init+0x156>
 80008f0:	2303      	movs	r3, #3
 80008f2:	e004      	b.n	80008fe <HAL_GPIO_Init+0x156>
 80008f4:	2304      	movs	r3, #4
 80008f6:	e002      	b.n	80008fe <HAL_GPIO_Init+0x156>
 80008f8:	2305      	movs	r3, #5
 80008fa:	e000      	b.n	80008fe <HAL_GPIO_Init+0x156>
 80008fc:	2306      	movs	r3, #6
 80008fe:	fa03 f30a 	lsl.w	r3, r3, sl
 8000902:	4333      	orrs	r3, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000904:	f8c9 3008 	str.w	r3, [r9, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000908:	683b      	ldr	r3, [r7, #0]
        temp &= ~((uint32_t)iocurrent);
 800090a:	43e6      	mvns	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800090c:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8000910:	bf0c      	ite	eq
 8000912:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 8000914:	4323      	orrne	r3, r4
        }
        EXTI->IMR = temp;
 8000916:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 800091a:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800091e:	f415 3f00 	tst.w	r5, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 8000922:	bf0c      	ite	eq
 8000924:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 8000926:	4323      	orrne	r3, r4
        }
        EXTI->EMR = temp;
 8000928:	607b      	str	r3, [r7, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800092a:	68bb      	ldr	r3, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800092c:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 8000930:	bf0c      	ite	eq
 8000932:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 8000934:	4323      	orrne	r3, r4
        }
        EXTI->RTSR = temp;
 8000936:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 800093a:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800093e:	02ad      	lsls	r5, r5, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 8000940:	bf54      	ite	pl
 8000942:	4033      	andpl	r3, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8000944:	4323      	orrmi	r3, r4
        }
        EXTI->FTSR = temp;
 8000946:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000948:	3201      	adds	r2, #1
 800094a:	2a10      	cmp	r2, #16
 800094c:	f47f af38 	bne.w	80007c0 <HAL_GPIO_Init+0x18>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 8000950:	b005      	add	sp, #20
 8000952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000956:	bf00      	nop
 8000958:	40013c00 	.word	0x40013c00
 800095c:	40020000 	.word	0x40020000
 8000960:	40023800 	.word	0x40023800
 8000964:	40021400 	.word	0x40021400

08000968 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000968:	b902      	cbnz	r2, 800096c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800096a:	0409      	lsls	r1, r1, #16
 800096c:	6181      	str	r1, [r0, #24]
 800096e:	4770      	bx	lr

08000970 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000970:	6943      	ldr	r3, [r0, #20]
 8000972:	4059      	eors	r1, r3
 8000974:	6141      	str	r1, [r0, #20]
 8000976:	4770      	bx	lr

08000978 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8000978:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 800097a:	4606      	mov	r6, r0
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 800097c:	b08b      	sub	sp, #44	; 0x2c
  uint32_t i = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 800097e:	2800      	cmp	r0, #0
 8000980:	d063      	beq.n	8000a4a <HAL_PCD_Init+0xd2>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000982:	2303      	movs	r3, #3
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 8000984:	4634      	mov	r4, r6
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000986:	f880 33b9 	strb.w	r3, [r0, #953]	; 0x3b9
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);
 800098a:	f004 ff79 	bl	8005880 <HAL_PCD_MspInit>

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 800098e:	f854 0b10 	ldr.w	r0, [r4], #16
 8000992:	f003 f825 	bl	80039e0 <USB_DisableGlobalInt>
 
 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000996:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000998:	466d      	mov	r5, sp
 800099a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800099c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800099e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80009a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80009a8:	1d37      	adds	r7, r6, #4
 80009aa:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80009ae:	6830      	ldr	r0, [r6, #0]
 80009b0:	f002 ffd6 	bl	8003960 <USB_CoreInit>
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 80009b4:	2100      	movs	r1, #0
 80009b6:	6830      	ldr	r0, [r6, #0]
 80009b8:	f003 f818 	bl	80039ec <USB_SetCurrentMode>
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 80009bc:	2100      	movs	r1, #0
 80009be:	4633      	mov	r3, r6
 
 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 80009c0:	4632      	mov	r2, r6
 80009c2:	f106 0410 	add.w	r4, r6, #16
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 80009c6:	2501      	movs	r5, #1
   hpcd->IN_ep[i].num = i;
   hpcd->IN_ep[i].tx_fifo_num = i;
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80009c8:	4608      	mov	r0, r1
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
   hpcd->IN_ep[i].num = i;
 80009ca:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
   hpcd->IN_ep[i].tx_fifo_num = i;
 80009ce:	87d1      	strh	r1, [r2, #62]	; 0x3e
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 80009d0:	3101      	adds	r1, #1
 80009d2:	290f      	cmp	r1, #15
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 80009d4:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
   hpcd->IN_ep[i].num = i;
   hpcd->IN_ep[i].tx_fifo_num = i;
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80009d8:	f882 003b 	strb.w	r0, [r2, #59]	; 0x3b
   hpcd->IN_ep[i].maxpacket = 0U;
 80009dc:	6410      	str	r0, [r2, #64]	; 0x40
   hpcd->IN_ep[i].xfer_buff = 0U;
 80009de:	6450      	str	r0, [r2, #68]	; 0x44
   hpcd->IN_ep[i].xfer_len = 0U;
 80009e0:	64d0      	str	r0, [r2, #76]	; 0x4c
 80009e2:	f102 021c 	add.w	r2, r2, #28
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 80009e6:	d1f0      	bne.n	80009ca <HAL_PCD_Init+0x52>
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
   hpcd->OUT_ep[i].maxpacket = 0U;
   hpcd->OUT_ep[i].xfer_buff = 0U;
   hpcd->OUT_ep[i].xfer_len = 0U;
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 80009e8:	2200      	movs	r2, #0
 80009ea:	f8d6 e000 	ldr.w	lr, [r6]
   hpcd->IN_ep[i].xfer_len = 0U;
 }
 
 for (i = 0U; i < 15U; i++)
 {
   hpcd->OUT_ep[i].is_in = 0U;
 80009ee:	4611      	mov	r1, r2
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
   hpcd->OUT_ep[i].maxpacket = 0U;
   hpcd->OUT_ep[i].xfer_buff = 0U;
   hpcd->OUT_ep[i].xfer_len = 0U;
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 80009f0:	f102 0040 	add.w	r0, r2, #64	; 0x40
 }
 
 for (i = 0U; i < 15U; i++)
 {
   hpcd->OUT_ep[i].is_in = 0U;
   hpcd->OUT_ep[i].num = i;
 80009f4:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
   hpcd->IN_ep[i].tx_fifo_num = i;
 80009f8:	87da      	strh	r2, [r3, #62]	; 0x3e
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
   hpcd->OUT_ep[i].maxpacket = 0U;
   hpcd->OUT_ep[i].xfer_buff = 0U;
   hpcd->OUT_ep[i].xfer_len = 0U;
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 80009fa:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
   hpcd->IN_ep[i].maxpacket = 0U;
   hpcd->IN_ep[i].xfer_buff = 0U;
   hpcd->IN_ep[i].xfer_len = 0U;
 }
 
 for (i = 0U; i < 15U; i++)
 80009fe:	3201      	adds	r2, #1
 8000a00:	2a0f      	cmp	r2, #15
 {
   hpcd->OUT_ep[i].is_in = 0U;
 8000a02:	f883 11f9 	strb.w	r1, [r3, #505]	; 0x1f9
   hpcd->OUT_ep[i].num = i;
   hpcd->IN_ep[i].tx_fifo_num = i;
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000a06:	f883 11fb 	strb.w	r1, [r3, #507]	; 0x1fb
   hpcd->OUT_ep[i].maxpacket = 0U;
 8000a0a:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
   hpcd->OUT_ep[i].xfer_buff = 0U;
 8000a0e:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
   hpcd->OUT_ep[i].xfer_len = 0U;
 8000a12:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 8000a16:	6041      	str	r1, [r0, #4]
 8000a18:	f103 031c 	add.w	r3, r3, #28
   hpcd->IN_ep[i].maxpacket = 0U;
   hpcd->IN_ep[i].xfer_buff = 0U;
   hpcd->IN_ep[i].xfer_len = 0U;
 }
 
 for (i = 0U; i < 15U; i++)
 8000a1c:	d1e8      	bne.n	80009f0 <HAL_PCD_Init+0x78>
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 }
 
 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 8000a1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a20:	466d      	mov	r5, sp
 8000a22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a28:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000a2c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000a30:	4670      	mov	r0, lr
 8000a32:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000a36:	f002 ffef 	bl	8003a18 <USB_DevInit>
 
 hpcd->State= HAL_PCD_STATE_READY;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	f886 33b9 	strb.w	r3, [r6, #953]	; 0x3b9
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */
 
 USB_DevDisconnect (hpcd->Instance);  
 8000a40:	6830      	ldr	r0, [r6, #0]
 8000a42:	f003 fbcc 	bl	80041de <USB_DevDisconnect>
 return HAL_OK;
 8000a46:	2000      	movs	r0, #0
 8000a48:	e000      	b.n	8000a4c <HAL_PCD_Init+0xd4>
  uint32_t i = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
  {
    return HAL_ERROR;
 8000a4a:	2001      	movs	r0, #1
 }
#endif /* USB_OTG_GCCFG_BCDEN */
 
 USB_DevDisconnect (hpcd->Instance);  
 return HAL_OK;
}
 8000a4c:	b00b      	add	sp, #44	; 0x2c
 8000a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000a50 <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
  __HAL_LOCK(hpcd); 
 8000a50:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8000a54:	2b01      	cmp	r3, #1
  * @brief  Start The USB OTG Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 8000a56:	b510      	push	{r4, lr}
 8000a58:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8000a5a:	d00c      	beq.n	8000a76 <HAL_PCD_Start+0x26>
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_DevConnect (hpcd->Instance);  
 8000a62:	6800      	ldr	r0, [r0, #0]
 8000a64:	f003 fbaf 	bl	80041c6 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000a68:	6820      	ldr	r0, [r4, #0]
 8000a6a:	f002 ffb3 	bl	80039d4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd); 
 8000a6e:	2000      	movs	r0, #0
 8000a70:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8000a74:	bd10      	pop	{r4, pc}
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
  __HAL_LOCK(hpcd); 
 8000a76:	2002      	movs	r0, #2
  USB_DevConnect (hpcd->Instance);  
  __HAL_PCD_ENABLE(hpcd);
  __HAL_UNLOCK(hpcd); 
  return HAL_OK;
}
 8000a78:	bd10      	pop	{r4, pc}
	...

08000a7c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000a80:	f8d0 a000 	ldr.w	sl, [r0]
  * @brief  Handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000a84:	b087      	sub	sp, #28
 8000a86:	4604      	mov	r4, r0
  uint32_t fifoemptymsk = 0U, temp = 0U;
  USB_OTG_EPTypeDef *ep;
  uint32_t hclk = 180000000U;
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000a88:	4650      	mov	r0, sl
 8000a8a:	f003 fbe2 	bl	8004252 <USB_GetMode>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	f040 8277 	bne.w	8000f82 <HAL_PCD_IRQHandler+0x506>
  {    
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 8000a94:	6820      	ldr	r0, [r4, #0]
 8000a96:	f003 fbae 	bl	80041f6 <USB_ReadInterrupts>
 8000a9a:	2800      	cmp	r0, #0
 8000a9c:	f000 8271 	beq.w	8000f82 <HAL_PCD_IRQHandler+0x506>
    {
      return;
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000aa0:	6820      	ldr	r0, [r4, #0]
 8000aa2:	f003 fba8 	bl	80041f6 <USB_ReadInterrupts>
 8000aa6:	0785      	lsls	r5, r0, #30
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000aa8:	bf48      	it	mi
 8000aaa:	6822      	ldrmi	r2, [r4, #0]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000aac:	6820      	ldr	r0, [r4, #0]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000aae:	bf42      	ittt	mi
 8000ab0:	6953      	ldrmi	r3, [r2, #20]
 8000ab2:	f003 0302 	andmi.w	r3, r3, #2
 8000ab6:	6153      	strmi	r3, [r2, #20]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000ab8:	f003 fb9d 	bl	80041f6 <USB_ReadInterrupts>
 8000abc:	f410 2000 	ands.w	r0, r0, #524288	; 0x80000
 8000ac0:	d04a      	beq.n	8000b58 <HAL_PCD_IRQHandler+0xdc>
    {
      epnum = 0U;
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000ac2:	6820      	ldr	r0, [r4, #0]
 8000ac4:	f003 fb9b 	bl	80041fe <USB_ReadDevAllOutEpInterrupt>
 8000ac8:	f50a 6630 	add.w	r6, sl, #2816	; 0xb00
 8000acc:	4607      	mov	r7, r0
 8000ace:	46a1      	mov	r9, r4
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
    {
      epnum = 0U;
 8000ad0:	2500      	movs	r5, #0
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
      
      while ( ep_intr )
 8000ad2:	2f00      	cmp	r7, #0
 8000ad4:	d041      	beq.n	8000b5a <HAL_PCD_IRQHandler+0xde>
      {
        if (ep_intr & 0x1U)
 8000ad6:	07f8      	lsls	r0, r7, #31
 8000ad8:	d538      	bpl.n	8000b4c <HAL_PCD_IRQHandler+0xd0>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8000ada:	fa5f fb85 	uxtb.w	fp, r5
 8000ade:	4659      	mov	r1, fp
 8000ae0:	6820      	ldr	r0, [r4, #0]
 8000ae2:	f003 fb9c 	bl	800421e <USB_ReadDevOutEPInterrupt>
          
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000ae6:	f010 0f01 	tst.w	r0, #1
      
      while ( ep_intr )
      {
        if (ep_intr & 0x1U)
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8000aea:	4680      	mov	r8, r0
          
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000aec:	d021      	beq.n	8000b32 <HAL_PCD_IRQHandler+0xb6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
            
            if(hpcd->Init.dma_enable == 1U)
 8000aee:	6921      	ldr	r1, [r4, #16]
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
          
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000af0:	2301      	movs	r3, #1
            
            if(hpcd->Init.dma_enable == 1U)
 8000af2:	4299      	cmp	r1, r3
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
          
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000af4:	60b3      	str	r3, [r6, #8]
            
            if(hpcd->Init.dma_enable == 1U)
 8000af6:	d10c      	bne.n	8000b12 <HAL_PCD_IRQHandler+0x96>
            {
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ); 
 8000af8:	6931      	ldr	r1, [r6, #16]
 8000afa:	f8d9 0200 	ldr.w	r0, [r9, #512]	; 0x200
 8000afe:	f3c1 0112 	ubfx	r1, r1, #0, #19
 8000b02:	1a41      	subs	r1, r0, r1
 8000b04:	f8c9 1210 	str.w	r1, [r9, #528]	; 0x210
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 8000b08:	f8d9 1204 	ldr.w	r1, [r9, #516]	; 0x204
 8000b0c:	4408      	add	r0, r1
 8000b0e:	f8c9 0204 	str.w	r0, [r9, #516]	; 0x204
            }
            
            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8000b12:	4659      	mov	r1, fp
 8000b14:	4620      	mov	r0, r4
 8000b16:	f004 feeb 	bl	80058f0 <HAL_PCD_DataOutStageCallback>
            if(hpcd->Init.dma_enable == 1U)
 8000b1a:	6921      	ldr	r1, [r4, #16]
 8000b1c:	2901      	cmp	r1, #1
 8000b1e:	d108      	bne.n	8000b32 <HAL_PCD_IRQHandler+0xb6>
            {
              if((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8000b20:	b93d      	cbnz	r5, 8000b32 <HAL_PCD_IRQHandler+0xb6>
 8000b22:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 8000b26:	b922      	cbnz	r2, 8000b32 <HAL_PCD_IRQHandler+0xb6>
              {
                 /* this is ZLP, so prepare EP0 for next setup */
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000b28:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8000b2c:	6820      	ldr	r0, [r4, #0]
 8000b2e:	f003 fbaf 	bl	8004290 <USB_EP0_OutStart>
              }              
            }
          }
          
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000b32:	f018 0f08 	tst.w	r8, #8
 8000b36:	d004      	beq.n	8000b42 <HAL_PCD_IRQHandler+0xc6>
          {
            /* Inform the upper layer that a setup packet is available */
            HAL_PCD_SetupStageCallback(hpcd);
 8000b38:	4620      	mov	r0, r4
 8000b3a:	f004 fed3 	bl	80058e4 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000b3e:	2308      	movs	r3, #8
 8000b40:	60b3      	str	r3, [r6, #8]
          }
          
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8000b42:	f018 0f10 	tst.w	r8, #16
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8000b46:	bf1c      	itt	ne
 8000b48:	2310      	movne	r3, #16
 8000b4a:	60b3      	strne	r3, [r6, #8]
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
          }
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        }
        epnum++;
 8000b4c:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 8000b4e:	087f      	lsrs	r7, r7, #1
 8000b50:	3620      	adds	r6, #32
 8000b52:	f109 091c 	add.w	r9, r9, #28
 8000b56:	e7bc      	b.n	8000ad2 <HAL_PCD_IRQHandler+0x56>
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t i = 0U, ep_intr = 0U, epint = 0U, epnum = 0U;
 8000b58:	4605      	mov	r5, r0
        epnum++;
        ep_intr >>= 1U;
      }
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8000b5a:	6820      	ldr	r0, [r4, #0]
 8000b5c:	f003 fb4b 	bl	80041f6 <USB_ReadInterrupts>
 8000b60:	0341      	lsls	r1, r0, #13
 8000b62:	f140 809b 	bpl.w	8000c9c <HAL_PCD_IRQHandler+0x220>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8000b66:	6820      	ldr	r0, [r4, #0]
 8000b68:	f003 fb51 	bl	800420e <USB_ReadDevAllInEpInterrupt>
 8000b6c:	4626      	mov	r6, r4
 8000b6e:	9003      	str	r0, [sp, #12]
 8000b70:	f50a 6810 	add.w	r8, sl, #2304	; 0x900
      
      epnum = 0U;
 8000b74:	2500      	movs	r5, #0
      
      while ( ep_intr )
 8000b76:	9b03      	ldr	r3, [sp, #12]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	f000 808f 	beq.w	8000c9c <HAL_PCD_IRQHandler+0x220>
      {
        if (ep_intr & 0x1U) /* In ITR */
 8000b7e:	9b03      	ldr	r3, [sp, #12]
 8000b80:	07da      	lsls	r2, r3, #31
 8000b82:	f140 8083 	bpl.w	8000c8c <HAL_PCD_IRQHandler+0x210>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8000b86:	fa5f f985 	uxtb.w	r9, r5
 8000b8a:	4649      	mov	r1, r9
 8000b8c:	6820      	ldr	r0, [r4, #0]
 8000b8e:	f003 fb50 	bl	8004232 <USB_ReadDevInEPInterrupt>

           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8000b92:	07c3      	lsls	r3, r0, #31
      
      while ( ep_intr )
      {
        if (ep_intr & 0x1U) /* In ITR */
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8000b94:	4607      	mov	r7, r0

           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8000b96:	d520      	bpl.n	8000bda <HAL_PCD_IRQHandler+0x15e>
          {
            fifoemptymsk = 0x1U << epnum;
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000b98:	f8da 3834 	ldr.w	r3, [sl, #2100]	; 0x834
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	40a9      	lsls	r1, r5
 8000ba0:	ea23 0301 	bic.w	r3, r3, r1
 8000ba4:	f8ca 3834 	str.w	r3, [sl, #2100]	; 0x834
            
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8000ba8:	2301      	movs	r3, #1
 8000baa:	f8c8 3008 	str.w	r3, [r8, #8]
            
            if (hpcd->Init.dma_enable == 1U)
 8000bae:	6923      	ldr	r3, [r4, #16]
 8000bb0:	2b01      	cmp	r3, #1
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 8000bb2:	bf01      	itttt	eq
 8000bb4:	6c72      	ldreq	r2, [r6, #68]	; 0x44
 8000bb6:	6c33      	ldreq	r3, [r6, #64]	; 0x40
 8000bb8:	189b      	addeq	r3, r3, r2
 8000bba:	6473      	streq	r3, [r6, #68]	; 0x44
            }
                                      
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 8000bbc:	4649      	mov	r1, r9
 8000bbe:	4620      	mov	r0, r4
 8000bc0:	f004 fe9f 	bl	8005902 <HAL_PCD_DataInStageCallback>

            if (hpcd->Init.dma_enable == 1U)
 8000bc4:	6921      	ldr	r1, [r4, #16]
 8000bc6:	2901      	cmp	r1, #1
 8000bc8:	d107      	bne.n	8000bda <HAL_PCD_IRQHandler+0x15e>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8000bca:	b935      	cbnz	r5, 8000bda <HAL_PCD_IRQHandler+0x15e>
 8000bcc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000bce:	b923      	cbnz	r3, 8000bda <HAL_PCD_IRQHandler+0x15e>
              {
                /* prepare to rx more setup packets */
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000bd0:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8000bd4:	6820      	ldr	r0, [r4, #0]
 8000bd6:	f003 fb5b 	bl	8004290 <USB_EP0_OutStart>
              }
            }           
          }
           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8000bda:	0738      	lsls	r0, r7, #28
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8000bdc:	bf44      	itt	mi
 8000bde:	2308      	movmi	r3, #8
 8000be0:	f8c8 3008 	strmi.w	r3, [r8, #8]
          }
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8000be4:	06f9      	lsls	r1, r7, #27
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8000be6:	bf44      	itt	mi
 8000be8:	2310      	movmi	r3, #16
 8000bea:	f8c8 3008 	strmi.w	r3, [r8, #8]
          }
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8000bee:	067a      	lsls	r2, r7, #25
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8000bf0:	bf44      	itt	mi
 8000bf2:	2340      	movmi	r3, #64	; 0x40
 8000bf4:	f8c8 3008 	strmi.w	r3, [r8, #8]
          }
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8000bf8:	07bb      	lsls	r3, r7, #30
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8000bfa:	bf44      	itt	mi
 8000bfc:	2302      	movmi	r3, #2
 8000bfe:	f8c8 3008 	strmi.w	r3, [r8, #8]
          }       
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8000c02:	063f      	lsls	r7, r7, #24
 8000c04:	d542      	bpl.n	8000c8c <HAL_PCD_IRQHandler+0x210>
  * @param  epnum : endpoint number   
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8000c06:	6823      	ldr	r3, [r4, #0]
 8000c08:	9304      	str	r3, [sp, #16]
  int32_t len = 0U;
  uint32_t len32b;
  uint32_t fifoemptymsk = 0U;

  ep = &hpcd->IN_ep[epnum];
  len = ep->xfer_len - ep->xfer_count;
 8000c0a:	6d37      	ldr	r7, [r6, #80]	; 0x50
 8000c0c:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8000c0e:	1bdb      	subs	r3, r3, r7
  
  if (len > ep->maxpacket)
 8000c10:	6c37      	ldr	r7, [r6, #64]	; 0x40
  int32_t len = 0U;
  uint32_t len32b;
  uint32_t fifoemptymsk = 0U;

  ep = &hpcd->IN_ep[epnum];
  len = ep->xfer_len - ep->xfer_count;
 8000c12:	429f      	cmp	r7, r3
 8000c14:	bf28      	it	cs
 8000c16:	461f      	movcs	r7, r3
  }
  
  
  len32b = (len + 3U) / 4U;
 
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8000c18:	9b04      	ldr	r3, [sp, #16]
 8000c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
  {
    len = ep->maxpacket;
  }
  
  
  len32b = (len + 3U) / 4U;
 8000c1e:	f107 0b03 	add.w	fp, r7, #3
 
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8000c22:	eb03 1345 	add.w	r3, r3, r5, lsl #5
  {
    len = ep->maxpacket;
  }
  
  
  len32b = (len + 3U) / 4U;
 8000c26:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8000c2a:	9305      	str	r3, [sp, #20]
 8000c2c:	9b05      	ldr	r3, [sp, #20]
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	455b      	cmp	r3, fp
 8000c34:	d80c      	bhi.n	8000c50 <HAL_PCD_IRQHandler+0x1d4>
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
  }
  
  if(len <= 0U)
 8000c36:	bb4f      	cbnz	r7, 8000c8c <HAL_PCD_IRQHandler+0x210>
  {
    fifoemptymsk = 0x1U << epnum;
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000c38:	9b04      	ldr	r3, [sp, #16]
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	f503 6900 	add.w	r9, r3, #2048	; 0x800
 8000c40:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
 8000c44:	40aa      	lsls	r2, r5
 8000c46:	ea23 0302 	bic.w	r3, r3, r2
 8000c4a:	f8c9 3034 	str.w	r3, [r9, #52]	; 0x34
 8000c4e:	e01d      	b.n	8000c8c <HAL_PCD_IRQHandler+0x210>
  
  
  len32b = (len + 3U) / 4U;
 
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
          (ep->xfer_count < ep->xfer_len) &&
 8000c50:	6d32      	ldr	r2, [r6, #80]	; 0x50
 8000c52:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
  }
  
  
  len32b = (len + 3U) / 4U;
 
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d9ee      	bls.n	8000c36 <HAL_PCD_IRQHandler+0x1ba>
          (ep->xfer_count < ep->xfer_len) &&
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d0ec      	beq.n	8000c36 <HAL_PCD_IRQHandler+0x1ba>
            (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
    
    if (len > ep->maxpacket)
 8000c5c:	6c37      	ldr	r7, [r6, #64]	; 0x40
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
    
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8000c5e:	9804      	ldr	r0, [sp, #16]
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
          (ep->xfer_count < ep->xfer_len) &&
            (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8000c60:	1a9b      	subs	r3, r3, r2
 8000c62:	429f      	cmp	r7, r3
 8000c64:	bf28      	it	cs
 8000c66:	461f      	movcs	r7, r3
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
    
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8000c68:	7c23      	ldrb	r3, [r4, #16]
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	464a      	mov	r2, r9
 8000c6e:	b2bb      	uxth	r3, r7
 8000c70:	6c71      	ldr	r1, [r6, #68]	; 0x44
 8000c72:	f003 fa26 	bl	80040c2 <USB_WritePacket>
    
    ep->xfer_buff  += len;
 8000c76:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8000c78:	443b      	add	r3, r7
 8000c7a:	6473      	str	r3, [r6, #68]	; 0x44
    ep->xfer_count += len;
 8000c7c:	6d33      	ldr	r3, [r6, #80]	; 0x50
    
    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 8000c7e:	f107 0b03 	add.w	fp, r7, #3
    
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
 8000c82:	443b      	add	r3, r7
    
    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 8000c84:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
    
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
 8000c88:	6533      	str	r3, [r6, #80]	; 0x50
 8000c8a:	e7cf      	b.n	8000c2c <HAL_PCD_IRQHandler+0x1b0>
          {
            PCD_WriteEmptyTxFifo(hpcd , epnum);
          }
        }
        epnum++;
        ep_intr >>= 1U;
 8000c8c:	9b03      	ldr	r3, [sp, #12]
 8000c8e:	085b      	lsrs	r3, r3, #1
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
          {
            PCD_WriteEmptyTxFifo(hpcd , epnum);
          }
        }
        epnum++;
 8000c90:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 8000c92:	9303      	str	r3, [sp, #12]
 8000c94:	361c      	adds	r6, #28
 8000c96:	f108 0820 	add.w	r8, r8, #32
 8000c9a:	e76c      	b.n	8000b76 <HAL_PCD_IRQHandler+0xfa>
      }
    }
    
    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8000c9c:	6820      	ldr	r0, [r4, #0]
 8000c9e:	f003 faaa 	bl	80041f6 <USB_ReadInterrupts>
 8000ca2:	2800      	cmp	r0, #0
 8000ca4:	da0d      	bge.n	8000cc2 <HAL_PCD_IRQHandler+0x246>
    {    
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8000ca6:	f8da 3804 	ldr.w	r3, [sl, #2052]	; 0x804
 8000caa:	f023 0301 	bic.w	r3, r3, #1
 8000cae:	f8ca 3804 	str.w	r3, [sl, #2052]	; 0x804
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
      }
      else
#endif /* USB_OTG_GLPMCFG_LPMEN */
      {
        HAL_PCD_ResumeCallback(hpcd);
 8000cb2:	4620      	mov	r0, r4
 8000cb4:	f004 fe5a 	bl	800596c <HAL_PCD_ResumeCallback>
      }
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8000cb8:	6822      	ldr	r2, [r4, #0]
 8000cba:	6953      	ldr	r3, [r2, #20]
 8000cbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000cc0:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8000cc2:	6820      	ldr	r0, [r4, #0]
 8000cc4:	f003 fa97 	bl	80041f6 <USB_ReadInterrupts>
 8000cc8:	0506      	lsls	r6, r0, #20
 8000cca:	d50b      	bpl.n	8000ce4 <HAL_PCD_IRQHandler+0x268>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8000ccc:	f8da 3808 	ldr.w	r3, [sl, #2056]	; 0x808
 8000cd0:	07d8      	lsls	r0, r3, #31
 8000cd2:	d502      	bpl.n	8000cda <HAL_PCD_IRQHandler+0x25e>
      {
        
        HAL_PCD_SuspendCallback(hpcd);
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f004 fe31 	bl	800593c <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8000cda:	6822      	ldr	r2, [r4, #0]
 8000cdc:	6953      	ldr	r3, [r2, #20]
 8000cde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ce2:	6153      	str	r3, [r2, #20]
      }
    }
#endif /* USB_OTG_GLPMCFG_LPMEN */

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8000ce4:	6820      	ldr	r0, [r4, #0]
 8000ce6:	f003 fa86 	bl	80041f6 <USB_ReadInterrupts>
 8000cea:	04c1      	lsls	r1, r0, #19
 8000cec:	d543      	bpl.n	8000d76 <HAL_PCD_IRQHandler+0x2fa>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8000cee:	f50a 6600 	add.w	r6, sl, #2048	; 0x800
 8000cf2:	6873      	ldr	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 8000cf4:	6820      	ldr	r0, [r4, #0]
#endif /* USB_OTG_GLPMCFG_LPMEN */

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 8000cf6:	f023 0301 	bic.w	r3, r3, #1
 8000cfa:	6073      	str	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 8000cfc:	2110      	movs	r1, #16
 8000cfe:	f002 ff25 	bl	8003b4c <USB_FlushTxFifo>
      
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d02:	6860      	ldr	r0, [r4, #4]
 8000d04:	f50a 6310 	add.w	r3, sl, #2304	; 0x900
 8000d08:	2200      	movs	r2, #0
      {
        USBx_INEP(i)->DIEPINT = 0xFFU;
 8000d0a:	21ff      	movs	r1, #255	; 0xff
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
      
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d0c:	4282      	cmp	r2, r0
 8000d0e:	d005      	beq.n	8000d1c <HAL_PCD_IRQHandler+0x2a0>
      {
        USBx_INEP(i)->DIEPINT = 0xFFU;
 8000d10:	6099      	str	r1, [r3, #8]
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
      
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d12:	3201      	adds	r2, #1
      {
        USBx_INEP(i)->DIEPINT = 0xFFU;
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
 8000d14:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
 8000d18:	3320      	adds	r3, #32
 8000d1a:	e7f7      	b.n	8000d0c <HAL_PCD_IRQHandler+0x290>
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8000d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d20:	61b3      	str	r3, [r6, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8000d22:	69f3      	ldr	r3, [r6, #28]
 8000d24:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8000d28:	61f3      	str	r3, [r6, #28]
      
      if(hpcd->Init.use_dedicated_ep1)
 8000d2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000d2c:	b153      	cbz	r3, 8000d44 <HAL_PCD_IRQHandler+0x2c8>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 8000d2e:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 8000d32:	f043 030b 	orr.w	r3, r3, #11
 8000d36:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 8000d3a:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8000d3c:	f043 030b 	orr.w	r3, r3, #11
 8000d40:	6473      	str	r3, [r6, #68]	; 0x44
 8000d42:	e007      	b.n	8000d54 <HAL_PCD_IRQHandler+0x2d8>
      else
      {
#ifdef USB_OTG_DOEPINT_OTEPSPR
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM | USB_OTG_DOEPMSK_OTEPSPRM);
#else
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 8000d44:	6973      	ldr	r3, [r6, #20]
 8000d46:	f043 030b 	orr.w	r3, r3, #11
 8000d4a:	6173      	str	r3, [r6, #20]
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8000d4c:	6933      	ldr	r3, [r6, #16]
 8000d4e:	f043 030b 	orr.w	r3, r3, #11
 8000d52:	6133      	str	r3, [r6, #16]
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8000d54:	f8da 3800 	ldr.w	r3, [sl, #2048]	; 0x800
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8000d58:	7c21      	ldrb	r1, [r4, #16]
 8000d5a:	6820      	ldr	r0, [r4, #0]
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8000d5c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8000d60:	f8ca 3800 	str.w	r3, [sl, #2048]	; 0x800
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8000d64:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8000d68:	f003 fa92 	bl	8004290 <USB_EP0_OutStart>
        
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8000d6c:	6822      	ldr	r2, [r4, #0]
 8000d6e:	6953      	ldr	r3, [r2, #20]
 8000d70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d74:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8000d76:	6820      	ldr	r0, [r4, #0]
 8000d78:	f003 fa3d 	bl	80041f6 <USB_ReadInterrupts>
 8000d7c:	0482      	lsls	r2, r0, #18
 8000d7e:	d57c      	bpl.n	8000e7a <HAL_PCD_IRQHandler+0x3fe>
    {
      USB_ActivateSetup(hpcd->Instance);
 8000d80:	6820      	ldr	r0, [r4, #0]
 8000d82:	f003 fa6a 	bl	800425a <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8000d86:	6820      	ldr	r0, [r4, #0]
 8000d88:	68c3      	ldr	r3, [r0, #12]
 8000d8a:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8000d8e:	60c3      	str	r3, [r0, #12]
      
      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 8000d90:	f002 ff05 	bl	8003b9e <USB_GetDevSpeed>
 8000d94:	b948      	cbnz	r0, 8000daa <HAL_PCD_IRQHandler+0x32e>
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000d96:	6822      	ldr	r2, [r4, #0]
      USB_ActivateSetup(hpcd->Instance);
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
      
      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 8000d98:	60e0      	str	r0, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
 8000d9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d9e:	6163      	str	r3, [r4, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000da0:	68d3      	ldr	r3, [r2, #12]
 8000da2:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 8000da6:	60d3      	str	r3, [r2, #12]
 8000da8:	e05f      	b.n	8000e6a <HAL_PCD_IRQHandler+0x3ee>
      }
      else
      {
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 8000daa:	2303      	movs	r3, #3
 8000dac:	60e3      	str	r3, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;  
 8000dae:	2340      	movs	r3, #64	; 0x40
 8000db0:	6163      	str	r3, [r4, #20]
        used by application. In the low AHB frequency range it is used to stretch enough the USB response 
        time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access 
        latency to the Data FIFO */
        
        /* Get hclk frequency value */
        hclk = HAL_RCC_GetHCLKFreq();
 8000db2:	f000 fcab 	bl	800170c <HAL_RCC_GetHCLKFreq>
        
        if((hclk >= 14200000U)&&(hclk < 15000000U))
 8000db6:	4b74      	ldr	r3, [pc, #464]	; (8000f88 <HAL_PCD_IRQHandler+0x50c>)
 8000db8:	4a74      	ldr	r2, [pc, #464]	; (8000f8c <HAL_PCD_IRQHandler+0x510>)
 8000dba:	4403      	add	r3, r0
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	6823      	ldr	r3, [r4, #0]
 8000dc0:	d803      	bhi.n	8000dca <HAL_PCD_IRQHandler+0x34e>
        {
          /* hclk Clock Range between 14.2-15 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xFU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000dc2:	68da      	ldr	r2, [r3, #12]
 8000dc4:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
 8000dc8:	e04e      	b.n	8000e68 <HAL_PCD_IRQHandler+0x3ec>
        }
        
        else if((hclk >= 15000000U)&&(hclk < 16000000U))
 8000dca:	4a71      	ldr	r2, [pc, #452]	; (8000f90 <HAL_PCD_IRQHandler+0x514>)
 8000dcc:	4971      	ldr	r1, [pc, #452]	; (8000f94 <HAL_PCD_IRQHandler+0x518>)
 8000dce:	4402      	add	r2, r0
 8000dd0:	428a      	cmp	r2, r1
 8000dd2:	d803      	bhi.n	8000ddc <HAL_PCD_IRQHandler+0x360>
        {
          /* hclk Clock Range between 15-16 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xEU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000dd4:	68da      	ldr	r2, [r3, #12]
 8000dd6:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8000dda:	e045      	b.n	8000e68 <HAL_PCD_IRQHandler+0x3ec>
        }
        
        else if((hclk >= 16000000U)&&(hclk < 17200000U))
 8000ddc:	f5a0 0274 	sub.w	r2, r0, #15990784	; 0xf40000
 8000de0:	496d      	ldr	r1, [pc, #436]	; (8000f98 <HAL_PCD_IRQHandler+0x51c>)
 8000de2:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
 8000de6:	428a      	cmp	r2, r1
 8000de8:	d803      	bhi.n	8000df2 <HAL_PCD_IRQHandler+0x376>
        {
          /* hclk Clock Range between 16-17.2 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xDU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000dea:	68da      	ldr	r2, [r3, #12]
 8000dec:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 8000df0:	e03a      	b.n	8000e68 <HAL_PCD_IRQHandler+0x3ec>
        }
        
        else if((hclk >= 17200000U)&&(hclk < 18500000U))
 8000df2:	f1a0 7283 	sub.w	r2, r0, #17170432	; 0x1060000
 8000df6:	4969      	ldr	r1, [pc, #420]	; (8000f9c <HAL_PCD_IRQHandler+0x520>)
 8000df8:	f5a2 42e7 	sub.w	r2, r2, #29568	; 0x7380
 8000dfc:	428a      	cmp	r2, r1
 8000dfe:	d803      	bhi.n	8000e08 <HAL_PCD_IRQHandler+0x38c>
        {
          /* hclk Clock Range between 17.2-18.5 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xCU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e00:	68da      	ldr	r2, [r3, #12]
 8000e02:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000e06:	e02f      	b.n	8000e68 <HAL_PCD_IRQHandler+0x3ec>
        }
        
        else if((hclk >= 18500000U)&&(hclk < 20000000U))
 8000e08:	4a65      	ldr	r2, [pc, #404]	; (8000fa0 <HAL_PCD_IRQHandler+0x524>)
 8000e0a:	4966      	ldr	r1, [pc, #408]	; (8000fa4 <HAL_PCD_IRQHandler+0x528>)
 8000e0c:	4402      	add	r2, r0
 8000e0e:	428a      	cmp	r2, r1
 8000e10:	d803      	bhi.n	8000e1a <HAL_PCD_IRQHandler+0x39e>
        {
          /* hclk Clock Range between 18.5-20 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xBU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e12:	68da      	ldr	r2, [r3, #12]
 8000e14:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 8000e18:	e026      	b.n	8000e68 <HAL_PCD_IRQHandler+0x3ec>
        }
        
        else if((hclk >= 20000000U)&&(hclk < 21800000U))
 8000e1a:	4a63      	ldr	r2, [pc, #396]	; (8000fa8 <HAL_PCD_IRQHandler+0x52c>)
 8000e1c:	4963      	ldr	r1, [pc, #396]	; (8000fac <HAL_PCD_IRQHandler+0x530>)
 8000e1e:	4402      	add	r2, r0
 8000e20:	428a      	cmp	r2, r1
 8000e22:	d803      	bhi.n	8000e2c <HAL_PCD_IRQHandler+0x3b0>
        {
          /* hclk Clock Range between 20-21.8 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xAU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e24:	68da      	ldr	r2, [r3, #12]
 8000e26:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 8000e2a:	e01d      	b.n	8000e68 <HAL_PCD_IRQHandler+0x3ec>
        }
        
        else if((hclk >= 21800000U)&&(hclk < 24000000U))
 8000e2c:	4a60      	ldr	r2, [pc, #384]	; (8000fb0 <HAL_PCD_IRQHandler+0x534>)
 8000e2e:	4961      	ldr	r1, [pc, #388]	; (8000fb4 <HAL_PCD_IRQHandler+0x538>)
 8000e30:	4402      	add	r2, r0
 8000e32:	428a      	cmp	r2, r1
 8000e34:	d803      	bhi.n	8000e3e <HAL_PCD_IRQHandler+0x3c2>
        {
          /* hclk Clock Range between 21.8-24 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e36:	68da      	ldr	r2, [r3, #12]
 8000e38:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8000e3c:	e014      	b.n	8000e68 <HAL_PCD_IRQHandler+0x3ec>
        }
        
        else if((hclk >= 24000000U)&&(hclk < 27700000U))
 8000e3e:	f1a0 72b7 	sub.w	r2, r0, #23986176	; 0x16e0000
 8000e42:	495d      	ldr	r1, [pc, #372]	; (8000fb8 <HAL_PCD_IRQHandler+0x53c>)
 8000e44:	f5a2 5258 	sub.w	r2, r2, #13824	; 0x3600
 8000e48:	428a      	cmp	r2, r1
 8000e4a:	d803      	bhi.n	8000e54 <HAL_PCD_IRQHandler+0x3d8>
        {
          /* hclk Clock Range between 24-27.7 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e4c:	68da      	ldr	r2, [r3, #12]
 8000e4e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000e52:	e009      	b.n	8000e68 <HAL_PCD_IRQHandler+0x3ec>
        }
        
        else if((hclk >= 27700000U)&&(hclk < 32000000U))
 8000e54:	4a59      	ldr	r2, [pc, #356]	; (8000fbc <HAL_PCD_IRQHandler+0x540>)
 8000e56:	495a      	ldr	r1, [pc, #360]	; (8000fc0 <HAL_PCD_IRQHandler+0x544>)
 8000e58:	4402      	add	r2, r0
 8000e5a:	428a      	cmp	r2, r1
        {
          /* hclk Clock Range between 27.7-32 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e5c:	68da      	ldr	r2, [r3, #12]
 8000e5e:	bf94      	ite	ls
 8000e60:	f442 52e0 	orrls.w	r2, r2, #7168	; 0x1c00
        }
        
        else /* if(hclk >= 32000000) */
        {
          /* hclk Clock Range between 32-180 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8000e64:	f442 52c0 	orrhi.w	r2, r2, #6144	; 0x1800
 8000e68:	60da      	str	r2, [r3, #12]
        }  
      }
      
      HAL_PCD_ResetCallback(hpcd);
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	f004 fd55 	bl	800591a <HAL_PCD_ResetCallback>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8000e70:	6822      	ldr	r2, [r4, #0]
 8000e72:	6953      	ldr	r3, [r2, #20]
 8000e74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e78:	6153      	str	r3, [r2, #20]
    }

    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000e7a:	6820      	ldr	r0, [r4, #0]
 8000e7c:	f003 f9bb 	bl	80041f6 <USB_ReadInterrupts>
 8000e80:	06c3      	lsls	r3, r0, #27
 8000e82:	d538      	bpl.n	8000ef6 <HAL_PCD_IRQHandler+0x47a>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000e84:	6822      	ldr	r2, [r4, #0]
 8000e86:	6993      	ldr	r3, [r2, #24]
 8000e88:	f023 0310 	bic.w	r3, r3, #16
 8000e8c:	6193      	str	r3, [r2, #24]
      
      temp = USBx->GRXSTSP;
 8000e8e:	f8da 6020 	ldr.w	r6, [sl, #32]
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 8000e92:	f3c6 4343 	ubfx	r3, r6, #17, #4
 8000e96:	2b02      	cmp	r3, #2
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
      
      temp = USBx->GRXSTSP;
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8000e98:	f006 070f 	and.w	r7, r6, #15
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 8000e9c:	d114      	bne.n	8000ec8 <HAL_PCD_IRQHandler+0x44c>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8000e9e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8000ea2:	4033      	ands	r3, r6
 8000ea4:	b313      	cbz	r3, 8000eec <HAL_PCD_IRQHandler+0x470>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4U);
 8000ea6:	231c      	movs	r3, #28
 8000ea8:	fb03 4707 	mla	r7, r3, r7, r4
 8000eac:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8000eb0:	4632      	mov	r2, r6
 8000eb2:	f8d7 1204 	ldr.w	r1, [r7, #516]	; 0x204
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	f003 f917 	bl	80040ea <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000ebc:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000ec0:	4433      	add	r3, r6
 8000ec2:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8000ec6:	e00c      	b.n	8000ee2 <HAL_PCD_IRQHandler+0x466>
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
 8000ec8:	2b06      	cmp	r3, #6
 8000eca:	d10f      	bne.n	8000eec <HAL_PCD_IRQHandler+0x470>
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8000ecc:	2208      	movs	r2, #8
 8000ece:	f504 716f 	add.w	r1, r4, #956	; 0x3bc
 8000ed2:	4650      	mov	r0, sl
 8000ed4:	f003 f909 	bl	80040ea <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 8000ed8:	231c      	movs	r3, #28
 8000eda:	fb03 4707 	mla	r7, r3, r7, r4
 8000ede:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8000ee2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000ee6:	441e      	add	r6, r3
 8000ee8:	f8c7 6210 	str.w	r6, [r7, #528]	; 0x210
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000eec:	6822      	ldr	r2, [r4, #0]
 8000eee:	6993      	ldr	r3, [r2, #24]
 8000ef0:	f043 0310 	orr.w	r3, r3, #16
 8000ef4:	6193      	str	r3, [r2, #24]
    }
    
    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8000ef6:	6820      	ldr	r0, [r4, #0]
 8000ef8:	f003 f97d 	bl	80041f6 <USB_ReadInterrupts>
 8000efc:	0707      	lsls	r7, r0, #28
 8000efe:	d507      	bpl.n	8000f10 <HAL_PCD_IRQHandler+0x494>
    {
      HAL_PCD_SOFCallback(hpcd);
 8000f00:	4620      	mov	r0, r4
 8000f02:	f004 fd06 	bl	8005912 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8000f06:	6822      	ldr	r2, [r4, #0]
 8000f08:	6953      	ldr	r3, [r2, #20]
 8000f0a:	f003 0308 	and.w	r3, r3, #8
 8000f0e:	6153      	str	r3, [r2, #20]
    }
    
    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8000f10:	6820      	ldr	r0, [r4, #0]
 8000f12:	f003 f970 	bl	80041f6 <USB_ReadInterrupts>
 8000f16:	02c6      	lsls	r6, r0, #11
 8000f18:	d508      	bpl.n	8000f2c <HAL_PCD_IRQHandler+0x4b0>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 8000f1a:	b2e9      	uxtb	r1, r5
 8000f1c:	4620      	mov	r0, r4
 8000f1e:	f004 fd2d 	bl	800597c <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8000f22:	6822      	ldr	r2, [r4, #0]
 8000f24:	6953      	ldr	r3, [r2, #20]
 8000f26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f2a:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000f2c:	6820      	ldr	r0, [r4, #0]
 8000f2e:	f003 f962 	bl	80041f6 <USB_ReadInterrupts>
 8000f32:	0280      	lsls	r0, r0, #10
 8000f34:	d508      	bpl.n	8000f48 <HAL_PCD_IRQHandler+0x4cc>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 8000f36:	b2e9      	uxtb	r1, r5
 8000f38:	4620      	mov	r0, r4
 8000f3a:	f004 fd1b 	bl	8005974 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000f3e:	6822      	ldr	r2, [r4, #0]
 8000f40:	6953      	ldr	r3, [r2, #20]
 8000f42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f46:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8000f48:	6820      	ldr	r0, [r4, #0]
 8000f4a:	f003 f954 	bl	80041f6 <USB_ReadInterrupts>
 8000f4e:	0041      	lsls	r1, r0, #1
 8000f50:	d507      	bpl.n	8000f62 <HAL_PCD_IRQHandler+0x4e6>
    {
      HAL_PCD_ConnectCallback(hpcd);
 8000f52:	4620      	mov	r0, r4
 8000f54:	f004 fd16 	bl	8005984 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8000f58:	6822      	ldr	r2, [r4, #0]
 8000f5a:	6953      	ldr	r3, [r2, #20]
 8000f5c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000f60:	6153      	str	r3, [r2, #20]
    } 
    
    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8000f62:	6820      	ldr	r0, [r4, #0]
 8000f64:	f003 f947 	bl	80041f6 <USB_ReadInterrupts>
 8000f68:	0742      	lsls	r2, r0, #29
 8000f6a:	d50a      	bpl.n	8000f82 <HAL_PCD_IRQHandler+0x506>
    {
      temp = hpcd->Instance->GOTGINT;
 8000f6c:	6823      	ldr	r3, [r4, #0]
 8000f6e:	685d      	ldr	r5, [r3, #4]
      
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8000f70:	076b      	lsls	r3, r5, #29
 8000f72:	d502      	bpl.n	8000f7a <HAL_PCD_IRQHandler+0x4fe>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 8000f74:	4620      	mov	r0, r4
 8000f76:	f004 fd09 	bl	800598c <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 8000f7a:	6822      	ldr	r2, [r4, #0]
 8000f7c:	6853      	ldr	r3, [r2, #4]
 8000f7e:	432b      	orrs	r3, r5
 8000f80:	6053      	str	r3, [r2, #4]
    }
  }
}
 8000f82:	b007      	add	sp, #28
 8000f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f88:	ff275340 	.word	0xff275340
 8000f8c:	000c34ff 	.word	0x000c34ff
 8000f90:	ff1b1e40 	.word	0xff1b1e40
 8000f94:	000f423f 	.word	0x000f423f
 8000f98:	00124f7f 	.word	0x00124f7f
 8000f9c:	0013d61f 	.word	0x0013d61f
 8000fa0:	fee5b660 	.word	0xfee5b660
 8000fa4:	0016e35f 	.word	0x0016e35f
 8000fa8:	feced300 	.word	0xfeced300
 8000fac:	001b773f 	.word	0x001b773f
 8000fb0:	feb35bc0 	.word	0xfeb35bc0
 8000fb4:	002191bf 	.word	0x002191bf
 8000fb8:	0038751f 	.word	0x0038751f
 8000fbc:	fe5954e0 	.word	0xfe5954e0
 8000fc0:	00419cdf 	.word	0x00419cdf

08000fc4 <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd); 
 8000fc4:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8000fc8:	2b01      	cmp	r3, #1
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000fca:	b510      	push	{r4, lr}
 8000fcc:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8000fce:	d009      	beq.n	8000fe4 <HAL_PCD_SetAddress+0x20>
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_SetDevAddress(hpcd->Instance, address);
 8000fd6:	6800      	ldr	r0, [r0, #0]
 8000fd8:	f003 f8e5 	bl	80041a6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 8000fdc:	2000      	movs	r0, #0
 8000fde:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8000fe2:	bd10      	pop	{r4, pc}
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd); 
 8000fe4:	2002      	movs	r0, #2
  USB_SetDevAddress(hpcd->Instance, address);
  __HAL_UNLOCK(hpcd);   
  return HAL_OK;
}
 8000fe6:	bd10      	pop	{r4, pc}

08000fe8 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000fe8:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8000fea:	b24e      	sxtb	r6, r1
 8000fec:	2e00      	cmp	r6, #0
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000fee:	4604      	mov	r4, r0
 8000ff0:	f04f 051c 	mov.w	r5, #28
 8000ff4:	f001 007f 	and.w	r0, r1, #127	; 0x7f
  HAL_StatusTypeDef  ret = HAL_OK;
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000ff8:	bfb5      	itete	lt
 8000ffa:	fb05 4100 	mlalt	r1, r5, r0, r4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000ffe:	fb05 4101 	mlage	r1, r5, r1, r4
  HAL_StatusTypeDef  ret = HAL_OK;
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001002:	3138      	addlt	r1, #56	; 0x38
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001004:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  }
  ep->num   = ep_addr & 0x7F;
 8001008:	b2c0      	uxtb	r0, r0
  
  ep->is_in = (0x80 & ep_addr) != 0;
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
  if (ep->is_in)
 800100a:	2e00      	cmp	r6, #0
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800100c:	bfb8      	it	lt
 800100e:	80c8      	strhlt	r0, [r1, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK )
 8001010:	2b02      	cmp	r3, #2
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 8001012:	70cb      	strb	r3, [r1, #3]
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8001014:	ea4f 75d6 	mov.w	r5, r6, lsr #31
    ep->tx_fifo_num = ep->num;
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK )
  {
    ep->data_pid_start = 0U;
 8001018:	bf04      	itt	eq
 800101a:	2300      	moveq	r3, #0
 800101c:	710b      	strbeq	r3, [r1, #4]
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
 800101e:	7008      	strb	r0, [r1, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8001020:	704d      	strb	r5, [r1, #1]
  if (ep_type == EP_TYPE_BULK )
  {
    ep->data_pid_start = 0U;
  }
  
  __HAL_LOCK(hpcd); 
 8001022:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
  ep->maxpacket = ep_mps;
 8001026:	608a      	str	r2, [r1, #8]
  if (ep_type == EP_TYPE_BULK )
  {
    ep->data_pid_start = 0U;
  }
  
  __HAL_LOCK(hpcd); 
 8001028:	2b01      	cmp	r3, #1
 800102a:	d009      	beq.n	8001040 <HAL_PCD_EP_Open+0x58>
 800102c:	2301      	movs	r3, #1
 800102e:	f884 33b8 	strb.w	r3, [r4, #952]	; 0x3b8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8001032:	6820      	ldr	r0, [r4, #0]
 8001034:	f002 fdce 	bl	8003bd4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8001038:	2000      	movs	r0, #0
 800103a:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return ret;
 800103e:	bd70      	pop	{r4, r5, r6, pc}
  if (ep_type == EP_TYPE_BULK )
  {
    ep->data_pid_start = 0U;
  }
  
  __HAL_LOCK(hpcd); 
 8001040:	2002      	movs	r0, #2
  USB_ActivateEndpoint(hpcd->Instance , ep);
  __HAL_UNLOCK(hpcd);   
  return ret;
}
 8001042:	bd70      	pop	{r4, r5, r6, pc}

08001044 <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8001044:	b24b      	sxtb	r3, r1
 8001046:	2b00      	cmp	r3, #0
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 8001048:	b510      	push	{r4, lr}
 800104a:	f04f 021c 	mov.w	r2, #28
 800104e:	4604      	mov	r4, r0
 8001050:	f001 007f 	and.w	r0, r1, #127	; 0x7f
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001054:	bfb5      	itete	lt
 8001056:	fb02 4100 	mlalt	r1, r2, r0, r4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800105a:	fb02 4101 	mlage	r1, r2, r1, r4
{  
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800105e:	3138      	addlt	r1, #56	; 0x38
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001060:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8001064:	0fdb      	lsrs	r3, r3, #31
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
 8001066:	7008      	strb	r0, [r1, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8001068:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 800106a:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
 800106e:	2b01      	cmp	r3, #1
 8001070:	d009      	beq.n	8001086 <HAL_PCD_EP_Close+0x42>
 8001072:	2301      	movs	r3, #1
 8001074:	f884 33b8 	strb.w	r3, [r4, #952]	; 0x3b8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8001078:	6820      	ldr	r0, [r4, #0]
 800107a:	f002 fdec 	bl	8003c56 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 800107e:	2000      	movs	r0, #0
 8001080:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8001084:	bd10      	pop	{r4, pc}
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
  
  __HAL_LOCK(hpcd); 
 8001086:	2002      	movs	r0, #2
  USB_DeactivateEndpoint(hpcd->Instance , ep);
  __HAL_UNLOCK(hpcd);   
  return HAL_OK;
}
 8001088:	bd10      	pop	{r4, pc}

0800108a <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer   
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800108a:	b538      	push	{r3, r4, r5, lr}
 800108c:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001090:	241c      	movs	r4, #28
 8001092:	436c      	muls	r4, r5
 8001094:	f504 71fc 	add.w	r1, r4, #504	; 0x1f8
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8001098:	4404      	add	r4, r0
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800109a:	4401      	add	r1, r0
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
 800109c:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
  ep->xfer_count = 0U;
 80010a0:	2300      	movs	r3, #0
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80010a2:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 80010a6:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->is_in = 0U;
 80010aa:	f884 31f9 	strb.w	r3, [r4, #505]	; 0x1f9
  ep->num = ep_addr & 0x7F;
 80010ae:	f884 51f8 	strb.w	r5, [r4, #504]	; 0x1f8
  
  if (hpcd->Init.dma_enable == 1U)
 80010b2:	6903      	ldr	r3, [r0, #16]
 80010b4:	2b01      	cmp	r3, #1
  {
    ep->dma_addr = (uint32_t)pBuf;  
 80010b6:	bf08      	it	eq
 80010b8:	f8c4 2208 	streq.w	r2, [r4, #520]	; 0x208
  }
  
  if ((ep_addr & 0x7F) == 0)
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 80010bc:	6800      	ldr	r0, [r0, #0]
 80010be:	b2da      	uxtb	r2, r3
  if (hpcd->Init.dma_enable == 1U)
  {
    ep->dma_addr = (uint32_t)pBuf;  
  }
  
  if ((ep_addr & 0x7F) == 0)
 80010c0:	b915      	cbnz	r5, 80010c8 <HAL_PCD_EP_Receive+0x3e>
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 80010c2:	f002 ff55 	bl	8003f70 <USB_EP0StartXfer>
 80010c6:	e001      	b.n	80010cc <HAL_PCD_EP_Receive+0x42>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 80010c8:	f002 fe36 	bl	8003d38 <USB_EPStartXfer>
  }
  
  return HAL_OK;
}
 80010cc:	2000      	movs	r0, #0
 80010ce:	bd38      	pop	{r3, r4, r5, pc}

080010d0 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 80010d0:	f001 010f 	and.w	r1, r1, #15
 80010d4:	231c      	movs	r3, #28
 80010d6:	fb03 0001 	mla	r0, r3, r1, r0
}
 80010da:	f8b0 0210 	ldrh.w	r0, [r0, #528]	; 0x210
 80010de:	4770      	bx	lr

080010e0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer   
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80010e0:	b538      	push	{r3, r4, r5, lr}
 80010e2:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80010e6:	241c      	movs	r4, #28
 80010e8:	436c      	muls	r4, r5
 80010ea:	f104 0138 	add.w	r1, r4, #56	; 0x38
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80010ee:	4404      	add	r4, r0
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80010f0:	4401      	add	r1, r0
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
 80010f2:	64e3      	str	r3, [r4, #76]	; 0x4c
  ep->xfer_count = 0U;
 80010f4:	2300      	movs	r3, #0
 80010f6:	6523      	str	r3, [r4, #80]	; 0x50
  ep->is_in = 1U;
 80010f8:	2301      	movs	r3, #1
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80010fa:	6462      	str	r2, [r4, #68]	; 0x44
  ep->xfer_len = len;
  ep->xfer_count = 0U;
  ep->is_in = 1U;
 80010fc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  ep->num = ep_addr & 0x7F;
 8001100:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
  
  if (hpcd->Init.dma_enable == 1U)
 8001104:	6903      	ldr	r3, [r0, #16]
 8001106:	2b01      	cmp	r3, #1
  {
    ep->dma_addr = (uint32_t)pBuf;  
 8001108:	bf08      	it	eq
 800110a:	64a2      	streq	r2, [r4, #72]	; 0x48
  }
  
  if ((ep_addr & 0x7F) == 0)
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 800110c:	6800      	ldr	r0, [r0, #0]
 800110e:	b2da      	uxtb	r2, r3
  if (hpcd->Init.dma_enable == 1U)
  {
    ep->dma_addr = (uint32_t)pBuf;  
  }
  
  if ((ep_addr & 0x7F) == 0)
 8001110:	b915      	cbnz	r5, 8001118 <HAL_PCD_EP_Transmit+0x38>
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8001112:	f002 ff2d 	bl	8003f70 <USB_EP0StartXfer>
 8001116:	e001      	b.n	800111c <HAL_PCD_EP_Transmit+0x3c>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8001118:	f002 fe0e 	bl	8003d38 <USB_EPStartXfer>
  }
  
  return HAL_OK;
}
 800111c:	2000      	movs	r0, #0
 800111e:	bd38      	pop	{r3, r4, r5, pc}

08001120 <HAL_PCD_EP_SetStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001120:	b538      	push	{r3, r4, r5, lr}
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 8001122:	b24b      	sxtb	r3, r1
 8001124:	2b00      	cmp	r3, #0
 8001126:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 800112a:	f04f 021c 	mov.w	r2, #28
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800112e:	bfb5      	itete	lt
 8001130:	fb02 0105 	mlalt	r1, r2, r5, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001134:	fb02 0101 	mlage	r1, r2, r1, r0
{
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001138:	3138      	addlt	r1, #56	; 0x38
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800113a:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  }
  
  ep->is_stall = 1U;
 800113e:	2201      	movs	r2, #1
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001140:	0fdb      	lsrs	r3, r3, #31
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 1U;
  ep->num   = ep_addr & 0x7F;
 8001142:	b2ed      	uxtb	r5, r5
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 1U;
 8001144:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8001146:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001148:	704b      	strb	r3, [r1, #1]
  
  
  __HAL_LOCK(hpcd); 
 800114a:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 800114e:	4293      	cmp	r3, r2
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001150:	4604      	mov	r4, r0
  ep->is_stall = 1U;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  
  __HAL_LOCK(hpcd); 
 8001152:	d00f      	beq.n	8001174 <HAL_PCD_EP_SetStall+0x54>
 8001154:	f880 23b8 	strb.w	r2, [r0, #952]	; 0x3b8
  USB_EPSetStall(hpcd->Instance , ep);
 8001158:	6800      	ldr	r0, [r0, #0]
 800115a:	f002 ffd4 	bl	8004106 <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 800115e:	b92d      	cbnz	r5, 800116c <HAL_PCD_EP_SetStall+0x4c>
  {
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001160:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8001164:	7c21      	ldrb	r1, [r4, #16]
 8001166:	6820      	ldr	r0, [r4, #0]
 8001168:	f003 f892 	bl	8004290 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd); 
 800116c:	2000      	movs	r0, #0
 800116e:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  
  return HAL_OK;
 8001172:	bd38      	pop	{r3, r4, r5, pc}
  ep->is_stall = 1U;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  
  __HAL_LOCK(hpcd); 
 8001174:	2002      	movs	r0, #2
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
  }
  __HAL_UNLOCK(hpcd); 
  
  return HAL_OK;
}
 8001176:	bd38      	pop	{r3, r4, r5, pc}

08001178 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001178:	b538      	push	{r3, r4, r5, lr}
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 800117a:	b24b      	sxtb	r3, r1
 800117c:	2b00      	cmp	r3, #0
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800117e:	4605      	mov	r5, r0
 8001180:	f04f 021c 	mov.w	r2, #28
 8001184:	f001 007f 	and.w	r0, r1, #127	; 0x7f
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001188:	bfb5      	itete	lt
 800118a:	fb02 5100 	mlalt	r1, r2, r0, r5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800118e:	fb02 5101 	mlage	r1, r2, r1, r5
{
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001192:	3138      	addlt	r1, #56	; 0x38
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001194:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  }
  
  ep->is_stall = 0U;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001198:	0fdb      	lsrs	r3, r3, #31
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 0U;
 800119a:	2400      	movs	r4, #0
 800119c:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 800119e:	7008      	strb	r0, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80011a0:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 80011a2:	f895 33b8 	ldrb.w	r3, [r5, #952]	; 0x3b8
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d009      	beq.n	80011be <HAL_PCD_EP_ClrStall+0x46>
 80011aa:	2301      	movs	r3, #1
 80011ac:	f885 33b8 	strb.w	r3, [r5, #952]	; 0x3b8
  USB_EPClearStall(hpcd->Instance , ep);
 80011b0:	6828      	ldr	r0, [r5, #0]
 80011b2:	f002 ffda 	bl	800416a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 80011b6:	f885 43b8 	strb.w	r4, [r5, #952]	; 0x3b8
    
  return HAL_OK;
 80011ba:	4620      	mov	r0, r4
 80011bc:	bd38      	pop	{r3, r4, r5, pc}
  
  ep->is_stall = 0U;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd); 
 80011be:	2002      	movs	r0, #2
  USB_EPClearStall(hpcd->Instance , ep);
  __HAL_UNLOCK(hpcd); 
    
  return HAL_OK;
}
 80011c0:	bd38      	pop	{r3, r4, r5, pc}

080011c2 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo: The number of Tx fifo
  * @param  size: Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80011c2:	b570      	push	{r4, r5, r6, lr}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80011c4:	6804      	ldr	r4, [r0, #0]
 80011c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
  
  if(fifo == 0)
 80011c8:	b919      	cbnz	r1, 80011d2 <HAL_PCDEx_SetTxFiFo+0x10>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);
 80011ca:	ea40 4302 	orr.w	r3, r0, r2, lsl #16
 80011ce:	62a3      	str	r3, [r4, #40]	; 0x28
 80011d0:	e016      	b.n	8001200 <HAL_PCDEx_SetTxFiFo+0x3e>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 80011d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    for (i = 0; i < (fifo - 1); i++)
 80011d4:	2500      	movs	r5, #0
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 80011d6:	eb00 4313 	add.w	r3, r0, r3, lsr #16
    for (i = 0; i < (fifo - 1); i++)
 80011da:	1e4e      	subs	r6, r1, #1
 80011dc:	b2e8      	uxtb	r0, r5
 80011de:	42b0      	cmp	r0, r6
 80011e0:	f105 0501 	add.w	r5, r5, #1
 80011e4:	da06      	bge.n	80011f4 <HAL_PCDEx_SetTxFiFo+0x32>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16U);
 80011e6:	3040      	adds	r0, #64	; 0x40
 80011e8:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80011ec:	6840      	ldr	r0, [r0, #4]
 80011ee:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80011f2:	e7f3      	b.n	80011dc <HAL_PCDEx_SetTxFiFo+0x1a>
    }
    
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
 80011f4:	313f      	adds	r1, #63	; 0x3f
 80011f6:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80011fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80011fe:	6063      	str	r3, [r4, #4]
  }
  
  return HAL_OK;
}
 8001200:	2000      	movs	r0, #0
 8001202:	bd70      	pop	{r4, r5, r6, pc}

08001204 <HAL_PCDEx_SetRxFiFo>:
  * @param  size: Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8001204:	6803      	ldr	r3, [r0, #0]
  
  return HAL_OK;
}
 8001206:	2000      	movs	r0, #0
  * @param  size: Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8001208:	6259      	str	r1, [r3, #36]	; 0x24
  
  return HAL_OK;
}
 800120a:	4770      	bx	lr

0800120c <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800120c:	6803      	ldr	r3, [r0, #0]
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800120e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001212:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001214:	07d8      	lsls	r0, r3, #31
 8001216:	d403      	bmi.n	8001220 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001218:	6823      	ldr	r3, [r4, #0]
 800121a:	0799      	lsls	r1, r3, #30
 800121c:	d44b      	bmi.n	80012b6 <HAL_RCC_OscConfig+0xaa>
 800121e:	e09b      	b.n	8001358 <HAL_RCC_OscConfig+0x14c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001220:	4b8c      	ldr	r3, [pc, #560]	; (8001454 <HAL_RCC_OscConfig+0x248>)
 8001222:	689a      	ldr	r2, [r3, #8]
 8001224:	f002 020c 	and.w	r2, r2, #12
 8001228:	2a04      	cmp	r2, #4
 800122a:	d007      	beq.n	800123c <HAL_RCC_OscConfig+0x30>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800122c:	689a      	ldr	r2, [r3, #8]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800122e:	f002 020c 	and.w	r2, r2, #12
 8001232:	2a08      	cmp	r2, #8
 8001234:	d10b      	bne.n	800124e <HAL_RCC_OscConfig+0x42>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	025a      	lsls	r2, r3, #9
 800123a:	d508      	bpl.n	800124e <HAL_RCC_OscConfig+0x42>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800123c:	4b85      	ldr	r3, [pc, #532]	; (8001454 <HAL_RCC_OscConfig+0x248>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	039b      	lsls	r3, r3, #14
 8001242:	d5e9      	bpl.n	8001218 <HAL_RCC_OscConfig+0xc>
 8001244:	6863      	ldr	r3, [r4, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1e6      	bne.n	8001218 <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 800124a:	2001      	movs	r0, #1
 800124c:	e164      	b.n	8001518 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800124e:	6863      	ldr	r3, [r4, #4]
 8001250:	4d80      	ldr	r5, [pc, #512]	; (8001454 <HAL_RCC_OscConfig+0x248>)
 8001252:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001256:	d006      	beq.n	8001266 <HAL_RCC_OscConfig+0x5a>
 8001258:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800125c:	d108      	bne.n	8001270 <HAL_RCC_OscConfig+0x64>
 800125e:	682b      	ldr	r3, [r5, #0]
 8001260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001264:	602b      	str	r3, [r5, #0]
 8001266:	682b      	ldr	r3, [r5, #0]
 8001268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800126c:	602b      	str	r3, [r5, #0]
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0x76>
 8001270:	682a      	ldr	r2, [r5, #0]
 8001272:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001276:	602a      	str	r2, [r5, #0]
 8001278:	682a      	ldr	r2, [r5, #0]
 800127a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800127e:	602a      	str	r2, [r5, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001280:	b16b      	cbz	r3, 800129e <HAL_RCC_OscConfig+0x92>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001282:	f7fe ffd7 	bl	8000234 <HAL_GetTick>
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001286:	4d73      	ldr	r5, [pc, #460]	; (8001454 <HAL_RCC_OscConfig+0x248>)
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001288:	4606      	mov	r6, r0
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800128a:	682b      	ldr	r3, [r5, #0]
 800128c:	039f      	lsls	r7, r3, #14
 800128e:	d4c3      	bmi.n	8001218 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001290:	f7fe ffd0 	bl	8000234 <HAL_GetTick>
 8001294:	1b80      	subs	r0, r0, r6
 8001296:	2864      	cmp	r0, #100	; 0x64
 8001298:	d9f7      	bls.n	800128a <HAL_RCC_OscConfig+0x7e>
          {
            return HAL_TIMEOUT;
 800129a:	2003      	movs	r0, #3
 800129c:	e13c      	b.n	8001518 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800129e:	f7fe ffc9 	bl	8000234 <HAL_GetTick>
 80012a2:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012a4:	682b      	ldr	r3, [r5, #0]
 80012a6:	0398      	lsls	r0, r3, #14
 80012a8:	d5b6      	bpl.n	8001218 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012aa:	f7fe ffc3 	bl	8000234 <HAL_GetTick>
 80012ae:	1b80      	subs	r0, r0, r6
 80012b0:	2864      	cmp	r0, #100	; 0x64
 80012b2:	d9f7      	bls.n	80012a4 <HAL_RCC_OscConfig+0x98>
 80012b4:	e7f1      	b.n	800129a <HAL_RCC_OscConfig+0x8e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012b6:	4b67      	ldr	r3, [pc, #412]	; (8001454 <HAL_RCC_OscConfig+0x248>)
 80012b8:	689a      	ldr	r2, [r3, #8]
 80012ba:	f012 0f0c 	tst.w	r2, #12
 80012be:	d007      	beq.n	80012d0 <HAL_RCC_OscConfig+0xc4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012c0:	689a      	ldr	r2, [r3, #8]
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012c2:	f002 020c 	and.w	r2, r2, #12
 80012c6:	2a08      	cmp	r2, #8
 80012c8:	d117      	bne.n	80012fa <HAL_RCC_OscConfig+0xee>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	0259      	lsls	r1, r3, #9
 80012ce:	d414      	bmi.n	80012fa <HAL_RCC_OscConfig+0xee>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012d0:	4b60      	ldr	r3, [pc, #384]	; (8001454 <HAL_RCC_OscConfig+0x248>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	0792      	lsls	r2, r2, #30
 80012d6:	d502      	bpl.n	80012de <HAL_RCC_OscConfig+0xd2>
 80012d8:	68e2      	ldr	r2, [r4, #12]
 80012da:	2a01      	cmp	r2, #1
 80012dc:	d1b5      	bne.n	800124a <HAL_RCC_OscConfig+0x3e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012de:	681a      	ldr	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e0:	21f8      	movs	r1, #248	; 0xf8
 80012e2:	fa91 f1a1 	rbit	r1, r1
 80012e6:	6920      	ldr	r0, [r4, #16]
 80012e8:	fab1 f181 	clz	r1, r1
 80012ec:	fa00 f101 	lsl.w	r1, r0, r1
 80012f0:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80012f4:	430a      	orrs	r2, r1
 80012f6:	601a      	str	r2, [r3, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012f8:	e02e      	b.n	8001358 <HAL_RCC_OscConfig+0x14c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012fa:	68e2      	ldr	r2, [r4, #12]
 80012fc:	4b56      	ldr	r3, [pc, #344]	; (8001458 <HAL_RCC_OscConfig+0x24c>)
 80012fe:	b1ea      	cbz	r2, 800133c <HAL_RCC_OscConfig+0x130>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001300:	2201      	movs	r2, #1
 8001302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001304:	f7fe ff96 	bl	8000234 <HAL_GetTick>

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001308:	4d52      	ldr	r5, [pc, #328]	; (8001454 <HAL_RCC_OscConfig+0x248>)
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800130a:	4606      	mov	r6, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800130c:	682b      	ldr	r3, [r5, #0]
 800130e:	4851      	ldr	r0, [pc, #324]	; (8001454 <HAL_RCC_OscConfig+0x248>)
 8001310:	079b      	lsls	r3, r3, #30
 8001312:	d405      	bmi.n	8001320 <HAL_RCC_OscConfig+0x114>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001314:	f7fe ff8e 	bl	8000234 <HAL_GetTick>
 8001318:	1b80      	subs	r0, r0, r6
 800131a:	2802      	cmp	r0, #2
 800131c:	d9f6      	bls.n	800130c <HAL_RCC_OscConfig+0x100>
 800131e:	e7bc      	b.n	800129a <HAL_RCC_OscConfig+0x8e>
            return HAL_TIMEOUT;
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001320:	6803      	ldr	r3, [r0, #0]
 8001322:	22f8      	movs	r2, #248	; 0xf8
 8001324:	fa92 f2a2 	rbit	r2, r2
 8001328:	6921      	ldr	r1, [r4, #16]
 800132a:	fab2 f282 	clz	r2, r2
 800132e:	fa01 f202 	lsl.w	r2, r1, r2
 8001332:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001336:	4313      	orrs	r3, r2
 8001338:	6003      	str	r3, [r0, #0]
 800133a:	e00d      	b.n	8001358 <HAL_RCC_OscConfig+0x14c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800133c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800133e:	f7fe ff79 	bl	8000234 <HAL_GetTick>
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001342:	4d44      	ldr	r5, [pc, #272]	; (8001454 <HAL_RCC_OscConfig+0x248>)
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001344:	4606      	mov	r6, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001346:	682b      	ldr	r3, [r5, #0]
 8001348:	079f      	lsls	r7, r3, #30
 800134a:	d505      	bpl.n	8001358 <HAL_RCC_OscConfig+0x14c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800134c:	f7fe ff72 	bl	8000234 <HAL_GetTick>
 8001350:	1b80      	subs	r0, r0, r6
 8001352:	2802      	cmp	r0, #2
 8001354:	d9f7      	bls.n	8001346 <HAL_RCC_OscConfig+0x13a>
 8001356:	e7a0      	b.n	800129a <HAL_RCC_OscConfig+0x8e>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001358:	6823      	ldr	r3, [r4, #0]
 800135a:	071e      	lsls	r6, r3, #28
 800135c:	d403      	bmi.n	8001366 <HAL_RCC_OscConfig+0x15a>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800135e:	6823      	ldr	r3, [r4, #0]
 8001360:	075d      	lsls	r5, r3, #29
 8001362:	d548      	bpl.n	80013f6 <HAL_RCC_OscConfig+0x1ea>
 8001364:	e01f      	b.n	80013a6 <HAL_RCC_OscConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001366:	6962      	ldr	r2, [r4, #20]
 8001368:	4b3c      	ldr	r3, [pc, #240]	; (800145c <HAL_RCC_OscConfig+0x250>)
 800136a:	b172      	cbz	r2, 800138a <HAL_RCC_OscConfig+0x17e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800136c:	2201      	movs	r2, #1
 800136e:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001370:	f7fe ff60 	bl	8000234 <HAL_GetTick>
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001374:	4d37      	ldr	r5, [pc, #220]	; (8001454 <HAL_RCC_OscConfig+0x248>)
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001376:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001378:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800137a:	0798      	lsls	r0, r3, #30
 800137c:	d4ef      	bmi.n	800135e <HAL_RCC_OscConfig+0x152>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800137e:	f7fe ff59 	bl	8000234 <HAL_GetTick>
 8001382:	1b80      	subs	r0, r0, r6
 8001384:	2802      	cmp	r0, #2
 8001386:	d9f7      	bls.n	8001378 <HAL_RCC_OscConfig+0x16c>
 8001388:	e787      	b.n	800129a <HAL_RCC_OscConfig+0x8e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800138a:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800138c:	f7fe ff52 	bl	8000234 <HAL_GetTick>
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001390:	4d30      	ldr	r5, [pc, #192]	; (8001454 <HAL_RCC_OscConfig+0x248>)
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001392:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001394:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001396:	0799      	lsls	r1, r3, #30
 8001398:	d5e1      	bpl.n	800135e <HAL_RCC_OscConfig+0x152>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800139a:	f7fe ff4b 	bl	8000234 <HAL_GetTick>
 800139e:	1b80      	subs	r0, r0, r6
 80013a0:	2802      	cmp	r0, #2
 80013a2:	d9f7      	bls.n	8001394 <HAL_RCC_OscConfig+0x188>
 80013a4:	e779      	b.n	800129a <HAL_RCC_OscConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	9301      	str	r3, [sp, #4]
 80013aa:	4b2a      	ldr	r3, [pc, #168]	; (8001454 <HAL_RCC_OscConfig+0x248>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80013ac:	4d2c      	ldr	r5, [pc, #176]	; (8001460 <HAL_RCC_OscConfig+0x254>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80013ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013b0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80013b4:	641a      	str	r2, [r3, #64]	; 0x40
 80013b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013bc:	9301      	str	r3, [sp, #4]
 80013be:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80013c0:	682b      	ldr	r3, [r5, #0]
 80013c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013c6:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 80013c8:	f7fe ff34 	bl	8000234 <HAL_GetTick>
 80013cc:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80013ce:	682b      	ldr	r3, [r5, #0]
 80013d0:	05da      	lsls	r2, r3, #23
 80013d2:	d513      	bpl.n	80013fc <HAL_RCC_OscConfig+0x1f0>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013d4:	68a3      	ldr	r3, [r4, #8]
 80013d6:	4d1f      	ldr	r5, [pc, #124]	; (8001454 <HAL_RCC_OscConfig+0x248>)
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d115      	bne.n	8001408 <HAL_RCC_OscConfig+0x1fc>
 80013dc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80013de:	f043 0301 	orr.w	r3, r3, #1
 80013e2:	672b      	str	r3, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013e4:	f7fe ff26 	bl	8000234 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013e8:	4d1a      	ldr	r5, [pc, #104]	; (8001454 <HAL_RCC_OscConfig+0x248>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ea:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013ec:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013f0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80013f2:	079b      	lsls	r3, r3, #30
 80013f4:	d519      	bpl.n	800142a <HAL_RCC_OscConfig+0x21e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013f6:	69a2      	ldr	r2, [r4, #24]
 80013f8:	bba2      	cbnz	r2, 8001464 <HAL_RCC_OscConfig+0x258>
 80013fa:	e072      	b.n	80014e2 <HAL_RCC_OscConfig+0x2d6>
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80013fc:	f7fe ff1a 	bl	8000234 <HAL_GetTick>
 8001400:	1b80      	subs	r0, r0, r6
 8001402:	2802      	cmp	r0, #2
 8001404:	d9e3      	bls.n	80013ce <HAL_RCC_OscConfig+0x1c2>
 8001406:	e748      	b.n	800129a <HAL_RCC_OscConfig+0x8e>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001408:	2b05      	cmp	r3, #5
 800140a:	d104      	bne.n	8001416 <HAL_RCC_OscConfig+0x20a>
 800140c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800140e:	f043 0304 	orr.w	r3, r3, #4
 8001412:	672b      	str	r3, [r5, #112]	; 0x70
 8001414:	e7e2      	b.n	80013dc <HAL_RCC_OscConfig+0x1d0>
 8001416:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001418:	f022 0201 	bic.w	r2, r2, #1
 800141c:	672a      	str	r2, [r5, #112]	; 0x70
 800141e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001420:	f022 0204 	bic.w	r2, r2, #4
 8001424:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001426:	b133      	cbz	r3, 8001436 <HAL_RCC_OscConfig+0x22a>
 8001428:	e7dc      	b.n	80013e4 <HAL_RCC_OscConfig+0x1d8>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800142a:	f7fe ff03 	bl	8000234 <HAL_GetTick>
 800142e:	1b80      	subs	r0, r0, r6
 8001430:	42b8      	cmp	r0, r7
 8001432:	d9dd      	bls.n	80013f0 <HAL_RCC_OscConfig+0x1e4>
 8001434:	e731      	b.n	800129a <HAL_RCC_OscConfig+0x8e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001436:	f7fe fefd 	bl	8000234 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800143a:	f241 3788 	movw	r7, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800143e:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001440:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001442:	0798      	lsls	r0, r3, #30
 8001444:	d5d7      	bpl.n	80013f6 <HAL_RCC_OscConfig+0x1ea>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001446:	f7fe fef5 	bl	8000234 <HAL_GetTick>
 800144a:	1b80      	subs	r0, r0, r6
 800144c:	42b8      	cmp	r0, r7
 800144e:	d9f7      	bls.n	8001440 <HAL_RCC_OscConfig+0x234>
 8001450:	e723      	b.n	800129a <HAL_RCC_OscConfig+0x8e>
 8001452:	bf00      	nop
 8001454:	40023800 	.word	0x40023800
 8001458:	42470000 	.word	0x42470000
 800145c:	42470e80 	.word	0x42470e80
 8001460:	40007000 	.word	0x40007000
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001464:	4d2e      	ldr	r5, [pc, #184]	; (8001520 <HAL_RCC_OscConfig+0x314>)
 8001466:	68ab      	ldr	r3, [r5, #8]
 8001468:	f003 030c 	and.w	r3, r3, #12
 800146c:	2b08      	cmp	r3, #8
 800146e:	f43f aeec 	beq.w	800124a <HAL_RCC_OscConfig+0x3e>
 8001472:	4e2c      	ldr	r6, [pc, #176]	; (8001524 <HAL_RCC_OscConfig+0x318>)
 8001474:	2300      	movs	r3, #0
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001476:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001478:	6033      	str	r3, [r6, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800147a:	d141      	bne.n	8001500 <HAL_RCC_OscConfig+0x2f4>
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800147c:	f7fe feda 	bl	8000234 <HAL_GetTick>
 8001480:	4680      	mov	r8, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001482:	682b      	ldr	r3, [r5, #0]
 8001484:	4f26      	ldr	r7, [pc, #152]	; (8001520 <HAL_RCC_OscConfig+0x314>)
 8001486:	0199      	lsls	r1, r3, #6
 8001488:	d42d      	bmi.n	80014e6 <HAL_RCC_OscConfig+0x2da>
 800148a:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 800148e:	fa92 f2a2 	rbit	r2, r2
 8001492:	f44f 3340 	mov.w	r3, #196608	; 0x30000
            return HAL_TIMEOUT;
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001496:	fab2 fe82 	clz	lr, r2
 800149a:	fa93 f3a3 	rbit	r3, r3
 800149e:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 80014a2:	fab3 f583 	clz	r5, r3
 80014a6:	fa92 f2a2 	rbit	r2, r2
 80014aa:	69e0      	ldr	r0, [r4, #28]
 80014ac:	6a23      	ldr	r3, [r4, #32]
 80014ae:	fab2 f182 	clz	r1, r2
 80014b2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80014b4:	4303      	orrs	r3, r0
 80014b6:	fa02 f20e 	lsl.w	r2, r2, lr
 80014ba:	ea43 0002 	orr.w	r0, r3, r2
 80014be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80014c0:	085a      	lsrs	r2, r3, #1
 80014c2:	3a01      	subs	r2, #1
 80014c4:	fa02 f305 	lsl.w	r3, r2, r5
 80014c8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80014ca:	4303      	orrs	r3, r0
 80014cc:	408a      	lsls	r2, r1
 80014ce:	4313      	orrs	r3, r2
 80014d0:	607b      	str	r3, [r7, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014d2:	2301      	movs	r3, #1
 80014d4:	6033      	str	r3, [r6, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d6:	f7fe fead 	bl	8000234 <HAL_GetTick>
 80014da:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	019a      	lsls	r2, r3, #6
 80014e0:	d508      	bpl.n	80014f4 <HAL_RCC_OscConfig+0x2e8>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80014e2:	2000      	movs	r0, #0
 80014e4:	e018      	b.n	8001518 <HAL_RCC_OscConfig+0x30c>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014e6:	f7fe fea5 	bl	8000234 <HAL_GetTick>
 80014ea:	ebc8 0000 	rsb	r0, r8, r0
 80014ee:	2802      	cmp	r0, #2
 80014f0:	d9c7      	bls.n	8001482 <HAL_RCC_OscConfig+0x276>
 80014f2:	e6d2      	b.n	800129a <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014f4:	f7fe fe9e 	bl	8000234 <HAL_GetTick>
 80014f8:	1b00      	subs	r0, r0, r4
 80014fa:	2802      	cmp	r0, #2
 80014fc:	d9ee      	bls.n	80014dc <HAL_RCC_OscConfig+0x2d0>
 80014fe:	e6cc      	b.n	800129a <HAL_RCC_OscConfig+0x8e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001500:	f7fe fe98 	bl	8000234 <HAL_GetTick>
 8001504:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001506:	682b      	ldr	r3, [r5, #0]
 8001508:	019b      	lsls	r3, r3, #6
 800150a:	d5ea      	bpl.n	80014e2 <HAL_RCC_OscConfig+0x2d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800150c:	f7fe fe92 	bl	8000234 <HAL_GetTick>
 8001510:	1b00      	subs	r0, r0, r4
 8001512:	2802      	cmp	r0, #2
 8001514:	d9f7      	bls.n	8001506 <HAL_RCC_OscConfig+0x2fa>
 8001516:	e6c0      	b.n	800129a <HAL_RCC_OscConfig+0x8e>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001518:	b002      	add	sp, #8
 800151a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800151e:	bf00      	nop
 8001520:	40023800 	.word	0x40023800
 8001524:	42470060 	.word	0x42470060

08001528 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001528:	491b      	ldr	r1, [pc, #108]	; (8001598 <HAL_RCC_GetSysClockFreq+0x70>)
 800152a:	688b      	ldr	r3, [r1, #8]
 800152c:	f003 030c 	and.w	r3, r3, #12
 8001530:	2b04      	cmp	r3, #4
 8001532:	d02c      	beq.n	800158e <HAL_RCC_GetSysClockFreq+0x66>
 8001534:	2b08      	cmp	r3, #8
 8001536:	d12c      	bne.n	8001592 <HAL_RCC_GetSysClockFreq+0x6a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001538:	6848      	ldr	r0, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800153a:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800153c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001540:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001544:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8001548:	684b      	ldr	r3, [r1, #4]
 800154a:	fa92 f2a2 	rbit	r2, r2
 800154e:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8001552:	fab2 f282 	clz	r2, r2
 8001556:	ea01 0103 	and.w	r1, r1, r3
 800155a:	fa21 f102 	lsr.w	r1, r1, r2
 800155e:	bf14      	ite	ne
 8001560:	4a0e      	ldrne	r2, [pc, #56]	; (800159c <HAL_RCC_GetSysClockFreq+0x74>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8001562:	4a0f      	ldreq	r2, [pc, #60]	; (80015a0 <HAL_RCC_GetSysClockFreq+0x78>)
 8001564:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8001568:	4a0b      	ldr	r2, [pc, #44]	; (8001598 <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 800156a:	fb00 f301 	mul.w	r3, r0, r1
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 800156e:	6852      	ldr	r2, [r2, #4]
 8001570:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8001574:	fa90 f0a0 	rbit	r0, r0
      
      sysclockfreq = pllvco/pllp;
 8001578:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 800157c:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllp;
 8001580:	fa22 f000 	lsr.w	r0, r2, r0
 8001584:	3001      	adds	r0, #1
 8001586:	0040      	lsls	r0, r0, #1
 8001588:	fbb3 f0f0 	udiv	r0, r3, r0
 800158c:	4770      	bx	lr
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800158e:	4803      	ldr	r0, [pc, #12]	; (800159c <HAL_RCC_GetSysClockFreq+0x74>)
 8001590:	4770      	bx	lr
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001592:	4803      	ldr	r0, [pc, #12]	; (80015a0 <HAL_RCC_GetSysClockFreq+0x78>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	40023800 	.word	0x40023800
 800159c:	017d7840 	.word	0x017d7840
 80015a0:	00f42400 	.word	0x00f42400

080015a4 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80015a4:	4b55      	ldr	r3, [pc, #340]	; (80016fc <HAL_RCC_ClockConfig+0x158>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	f002 020f 	and.w	r2, r2, #15
 80015ac:	428a      	cmp	r2, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015b2:	4605      	mov	r5, r0
 80015b4:	460e      	mov	r6, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80015b6:	d30a      	bcc.n	80015ce <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015b8:	6829      	ldr	r1, [r5, #0]
 80015ba:	0788      	lsls	r0, r1, #30
 80015bc:	d511      	bpl.n	80015e2 <HAL_RCC_ClockConfig+0x3e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015be:	4850      	ldr	r0, [pc, #320]	; (8001700 <HAL_RCC_ClockConfig+0x15c>)
 80015c0:	6883      	ldr	r3, [r0, #8]
 80015c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015c6:	68ab      	ldr	r3, [r5, #8]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	6083      	str	r3, [r0, #8]
 80015cc:	e009      	b.n	80015e2 <HAL_RCC_ClockConfig+0x3e>
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ce:	b2ca      	uxtb	r2, r1
 80015d0:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 030f 	and.w	r3, r3, #15
 80015d8:	4299      	cmp	r1, r3
 80015da:	d0ed      	beq.n	80015b8 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 80015dc:	2001      	movs	r0, #1
 80015de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015e2:	07c9      	lsls	r1, r1, #31
 80015e4:	d406      	bmi.n	80015f4 <HAL_RCC_ClockConfig+0x50>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80015e6:	4b45      	ldr	r3, [pc, #276]	; (80016fc <HAL_RCC_ClockConfig+0x158>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	f002 020f 	and.w	r2, r2, #15
 80015ee:	4296      	cmp	r6, r2
 80015f0:	d351      	bcc.n	8001696 <HAL_RCC_ClockConfig+0xf2>
 80015f2:	e057      	b.n	80016a4 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015f4:	686b      	ldr	r3, [r5, #4]
 80015f6:	4a42      	ldr	r2, [pc, #264]	; (8001700 <HAL_RCC_ClockConfig+0x15c>)
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d103      	bne.n	8001604 <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fc:	6812      	ldr	r2, [r2, #0]
 80015fe:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001602:	e008      	b.n	8001616 <HAL_RCC_ClockConfig+0x72>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8001604:	1e99      	subs	r1, r3, #2
 8001606:	2901      	cmp	r1, #1
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001608:	6812      	ldr	r2, [r2, #0]
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 800160a:	d802      	bhi.n	8001612 <HAL_RCC_ClockConfig+0x6e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800160c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001610:	e001      	b.n	8001616 <HAL_RCC_ClockConfig+0x72>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001612:	f012 0f02 	tst.w	r2, #2
 8001616:	d0e1      	beq.n	80015dc <HAL_RCC_ClockConfig+0x38>
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001618:	4c39      	ldr	r4, [pc, #228]	; (8001700 <HAL_RCC_ClockConfig+0x15c>)
 800161a:	68a2      	ldr	r2, [r4, #8]
 800161c:	f022 0203 	bic.w	r2, r2, #3
 8001620:	4313      	orrs	r3, r2
 8001622:	60a3      	str	r3, [r4, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001624:	f7fe fe06 	bl	8000234 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001628:	686b      	ldr	r3, [r5, #4]
 800162a:	2b01      	cmp	r3, #1
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800162c:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800162e:	f241 3888 	movw	r8, #5000	; 0x1388
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001632:	d10c      	bne.n	800164e <HAL_RCC_ClockConfig+0xaa>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001634:	68a3      	ldr	r3, [r4, #8]
 8001636:	f003 030c 	and.w	r3, r3, #12
 800163a:	2b04      	cmp	r3, #4
 800163c:	d0d3      	beq.n	80015e6 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800163e:	f7fe fdf9 	bl	8000234 <HAL_GetTick>
 8001642:	1bc0      	subs	r0, r0, r7
 8001644:	4540      	cmp	r0, r8
 8001646:	d9f5      	bls.n	8001634 <HAL_RCC_ClockConfig+0x90>
        {
          return HAL_TIMEOUT;
 8001648:	2003      	movs	r0, #3
 800164a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800164e:	2b02      	cmp	r3, #2
 8001650:	d10a      	bne.n	8001668 <HAL_RCC_ClockConfig+0xc4>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001652:	68a3      	ldr	r3, [r4, #8]
 8001654:	f003 030c 	and.w	r3, r3, #12
 8001658:	2b08      	cmp	r3, #8
 800165a:	d0c4      	beq.n	80015e6 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800165c:	f7fe fdea 	bl	8000234 <HAL_GetTick>
 8001660:	1bc0      	subs	r0, r0, r7
 8001662:	4540      	cmp	r0, r8
 8001664:	d9f5      	bls.n	8001652 <HAL_RCC_ClockConfig+0xae>
 8001666:	e7ef      	b.n	8001648 <HAL_RCC_ClockConfig+0xa4>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8001668:	2b03      	cmp	r3, #3
 800166a:	d10f      	bne.n	800168c <HAL_RCC_ClockConfig+0xe8>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 800166c:	68a3      	ldr	r3, [r4, #8]
 800166e:	f003 030c 	and.w	r3, r3, #12
 8001672:	2b0c      	cmp	r3, #12
 8001674:	d0b7      	beq.n	80015e6 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001676:	f7fe fddd 	bl	8000234 <HAL_GetTick>
 800167a:	1bc0      	subs	r0, r0, r7
 800167c:	4540      	cmp	r0, r8
 800167e:	d9f5      	bls.n	800166c <HAL_RCC_ClockConfig+0xc8>
 8001680:	e7e2      	b.n	8001648 <HAL_RCC_ClockConfig+0xa4>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001682:	f7fe fdd7 	bl	8000234 <HAL_GetTick>
 8001686:	1bc0      	subs	r0, r0, r7
 8001688:	4540      	cmp	r0, r8
 800168a:	d8dd      	bhi.n	8001648 <HAL_RCC_ClockConfig+0xa4>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800168c:	68a3      	ldr	r3, [r4, #8]
 800168e:	f013 0f0c 	tst.w	r3, #12
 8001692:	d1f6      	bne.n	8001682 <HAL_RCC_ClockConfig+0xde>
 8001694:	e7a7      	b.n	80015e6 <HAL_RCC_ClockConfig+0x42>
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001696:	b2f2      	uxtb	r2, r6
 8001698:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 030f 	and.w	r3, r3, #15
 80016a0:	429e      	cmp	r6, r3
 80016a2:	d19b      	bne.n	80015dc <HAL_RCC_ClockConfig+0x38>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a4:	6829      	ldr	r1, [r5, #0]
 80016a6:	074a      	lsls	r2, r1, #29
 80016a8:	d506      	bpl.n	80016b8 <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016aa:	4815      	ldr	r0, [pc, #84]	; (8001700 <HAL_RCC_ClockConfig+0x15c>)
 80016ac:	6883      	ldr	r3, [r0, #8]
 80016ae:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016b2:	68eb      	ldr	r3, [r5, #12]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	6083      	str	r3, [r0, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016b8:	070b      	lsls	r3, r1, #28
 80016ba:	d507      	bpl.n	80016cc <HAL_RCC_ClockConfig+0x128>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016bc:	4a10      	ldr	r2, [pc, #64]	; (8001700 <HAL_RCC_ClockConfig+0x15c>)
 80016be:	6929      	ldr	r1, [r5, #16]
 80016c0:	6893      	ldr	r3, [r2, #8]
 80016c2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80016c6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80016ca:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80016cc:	f7ff ff2c 	bl	8001528 <HAL_RCC_GetSysClockFreq>
 80016d0:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <HAL_RCC_ClockConfig+0x15c>)
 80016d2:	22f0      	movs	r2, #240	; 0xf0
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	fa92 f2a2 	rbit	r2, r2
 80016da:	fab2 f282 	clz	r2, r2
 80016de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016e2:	40d3      	lsrs	r3, r2
 80016e4:	4a07      	ldr	r2, [pc, #28]	; (8001704 <HAL_RCC_ClockConfig+0x160>)
 80016e6:	5cd3      	ldrb	r3, [r2, r3]
 80016e8:	40d8      	lsrs	r0, r3
 80016ea:	4b07      	ldr	r3, [pc, #28]	; (8001708 <HAL_RCC_ClockConfig+0x164>)
 80016ec:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80016ee:	2000      	movs	r0, #0
 80016f0:	f7fe fd6a 	bl	80001c8 <HAL_InitTick>
  
  return HAL_OK;
 80016f4:	2000      	movs	r0, #0
}
 80016f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016fa:	bf00      	nop
 80016fc:	40023c00 	.word	0x40023c00
 8001700:	40023800 	.word	0x40023800
 8001704:	08005e34 	.word	0x08005e34
 8001708:	20000110 	.word	0x20000110

0800170c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800170c:	4b01      	ldr	r3, [pc, #4]	; (8001714 <HAL_RCC_GetHCLKFreq+0x8>)
 800170e:	6818      	ldr	r0, [r3, #0]
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	20000110 	.word	0x20000110

08001718 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8001718:	4b08      	ldr	r3, [pc, #32]	; (800173c <HAL_RCC_GetPCLK1Freq+0x24>)
 800171a:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	fa92 f2a2 	rbit	r2, r2
 8001724:	fab2 f282 	clz	r2, r2
 8001728:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800172c:	40d3      	lsrs	r3, r2
 800172e:	4a04      	ldr	r2, [pc, #16]	; (8001740 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001730:	5cd3      	ldrb	r3, [r2, r3]
 8001732:	4a04      	ldr	r2, [pc, #16]	; (8001744 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001734:	6810      	ldr	r0, [r2, #0]
}
 8001736:	40d8      	lsrs	r0, r3
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	40023800 	.word	0x40023800
 8001740:	08005e44 	.word	0x08005e44
 8001744:	20000110 	.word	0x20000110

08001748 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8001748:	4b08      	ldr	r3, [pc, #32]	; (800176c <HAL_RCC_GetPCLK2Freq+0x24>)
 800174a:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	fa92 f2a2 	rbit	r2, r2
 8001754:	fab2 f282 	clz	r2, r2
 8001758:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800175c:	40d3      	lsrs	r3, r2
 800175e:	4a04      	ldr	r2, [pc, #16]	; (8001770 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001760:	5cd3      	ldrb	r3, [r2, r3]
 8001762:	4a04      	ldr	r2, [pc, #16]	; (8001774 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001764:	6810      	ldr	r0, [r2, #0]
} 
 8001766:	40d8      	lsrs	r0, r3
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	40023800 	.word	0x40023800
 8001770:	08005e44 	.word	0x08005e44
 8001774:	20000110 	.word	0x20000110

08001778 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001778:	6803      	ldr	r3, [r0, #0]
 800177a:	f013 0f05 	tst.w	r3, #5
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *              
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800177e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001782:	4605      	mov	r5, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001784:	d119      	bne.n	80017ba <HAL_RCCEx_PeriphCLKConfig+0x42>
      }
    }
  }
  
  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001786:	6828      	ldr	r0, [r5, #0]
 8001788:	f010 0002 	ands.w	r0, r0, #2
 800178c:	f000 8090 	beq.w	80018b0 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001790:	2300      	movs	r3, #0
 8001792:	9301      	str	r3, [sp, #4]
 8001794:	4b48      	ldr	r3, [pc, #288]	; (80018b8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001796:	4c49      	ldr	r4, [pc, #292]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x144>)
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001798:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800179a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800179e:	641a      	str	r2, [r3, #64]	; 0x40
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a6:	9301      	str	r3, [sp, #4]
 80017a8:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80017aa:	6823      	ldr	r3, [r4, #0]
 80017ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017b0:	6023      	str	r3, [r4, #0]
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80017b2:	f7fe fd3f 	bl	8000234 <HAL_GetTick>
 80017b6:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80017b8:	e039      	b.n	800182e <HAL_RCCEx_PeriphCLKConfig+0xb6>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)    
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80017ba:	4e41      	ldr	r6, [pc, #260]	; (80018c0 <HAL_RCCEx_PeriphCLKConfig+0x148>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80017bc:	4f3e      	ldr	r7, [pc, #248]	; (80018b8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)    
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	6033      	str	r3, [r6, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80017c2:	f7fe fd37 	bl	8000234 <HAL_GetTick>
 80017c6:	4680      	mov	r8, r0
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	4c3b      	ldr	r4, [pc, #236]	; (80018b8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80017cc:	011b      	lsls	r3, r3, #4
 80017ce:	d507      	bpl.n	80017e0 <HAL_RCCEx_PeriphCLKConfig+0x68>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80017d0:	f7fe fd30 	bl	8000234 <HAL_GetTick>
 80017d4:	ebc8 0000 	rsb	r0, r8, r0
 80017d8:	2802      	cmp	r0, #2
 80017da:	d9f5      	bls.n	80017c8 <HAL_RCCEx_PeriphCLKConfig+0x50>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80017dc:	2003      	movs	r0, #3
 80017de:	e067      	b.n	80018b0 <HAL_RCCEx_PeriphCLKConfig+0x138>
 80017e0:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 80017e4:	fa91 f1a1 	rbit	r1, r1
 80017e8:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80017ec:	fab1 f181 	clz	r1, r1
 80017f0:	fa93 f3a3 	rbit	r3, r3
 80017f4:	fab3 f283 	clz	r2, r3
 80017f8:	686b      	ldr	r3, [r5, #4]
 80017fa:	fa03 f101 	lsl.w	r1, r3, r1
 80017fe:	68ab      	ldr	r3, [r5, #8]
 8001800:	4093      	lsls	r3, r2
 8001802:	430b      	orrs	r3, r1
 8001804:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
#endif /* STM32F411xE */
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001808:	2301      	movs	r3, #1
 800180a:	6033      	str	r3, [r6, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800180c:	f7fe fd12 	bl	8000234 <HAL_GetTick>
 8001810:	4606      	mov	r6, r0
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001812:	6823      	ldr	r3, [r4, #0]
 8001814:	0118      	lsls	r0, r3, #4
 8001816:	d4b6      	bmi.n	8001786 <HAL_RCCEx_PeriphCLKConfig+0xe>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001818:	f7fe fd0c 	bl	8000234 <HAL_GetTick>
 800181c:	1b80      	subs	r0, r0, r6
 800181e:	2802      	cmp	r0, #2
 8001820:	d9f7      	bls.n	8001812 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8001822:	e7db      	b.n	80017dc <HAL_RCCEx_PeriphCLKConfig+0x64>
    /* Get tick */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001824:	f7fe fd06 	bl	8000234 <HAL_GetTick>
 8001828:	1b80      	subs	r0, r0, r6
 800182a:	2802      	cmp	r0, #2
 800182c:	d8d6      	bhi.n	80017dc <HAL_RCCEx_PeriphCLKConfig+0x64>
    PWR->CR |= PWR_CR_DBP;
    
    /* Get tick */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800182e:	6823      	ldr	r3, [r4, #0]
 8001830:	05d9      	lsls	r1, r3, #23
 8001832:	d5f7      	bpl.n	8001824 <HAL_RCCEx_PeriphCLKConfig+0xac>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001834:	4c20      	ldr	r4, [pc, #128]	; (80018b8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001836:	6f23      	ldr	r3, [r4, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001838:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800183c:	d10f      	bne.n	800185e <HAL_RCCEx_PeriphCLKConfig+0xe6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800183e:	68ea      	ldr	r2, [r5, #12]
 8001840:	f402 7340 	and.w	r3, r2, #768	; 0x300
 8001844:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001848:	4b1b      	ldr	r3, [pc, #108]	; (80018b8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800184a:	d127      	bne.n	800189c <HAL_RCCEx_PeriphCLKConfig+0x124>
 800184c:	6899      	ldr	r1, [r3, #8]
 800184e:	f421 10f8 	bic.w	r0, r1, #2031616	; 0x1f0000
 8001852:	f022 4170 	bic.w	r1, r2, #4026531840	; 0xf0000000
 8001856:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800185a:	4301      	orrs	r1, r0
 800185c:	e021      	b.n	80018a2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800185e:	68ea      	ldr	r2, [r5, #12]
 8001860:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001864:	4293      	cmp	r3, r2
 8001866:	d0ea      	beq.n	800183e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001868:	6f23      	ldr	r3, [r4, #112]	; 0x70
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800186a:	4a16      	ldr	r2, [pc, #88]	; (80018c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800186c:	2101      	movs	r1, #1
 800186e:	6011      	str	r1, [r2, #0]
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001870:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001874:	2100      	movs	r1, #0
 8001876:	6011      	str	r1, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001878:	6723      	str	r3, [r4, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800187a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800187c:	07da      	lsls	r2, r3, #31
 800187e:	d5de      	bpl.n	800183e <HAL_RCCEx_PeriphCLKConfig+0xc6>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001880:	f7fe fcd8 	bl	8000234 <HAL_GetTick>
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001884:	f241 3788 	movw	r7, #5000	; 0x1388

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001888:	4606      	mov	r6, r0
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800188a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800188c:	079b      	lsls	r3, r3, #30
 800188e:	d4d6      	bmi.n	800183e <HAL_RCCEx_PeriphCLKConfig+0xc6>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001890:	f7fe fcd0 	bl	8000234 <HAL_GetTick>
 8001894:	1b80      	subs	r0, r0, r6
 8001896:	42b8      	cmp	r0, r7
 8001898:	d9f7      	bls.n	800188a <HAL_RCCEx_PeriphCLKConfig+0x112>
 800189a:	e79f      	b.n	80017dc <HAL_RCCEx_PeriphCLKConfig+0x64>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800189c:	6899      	ldr	r1, [r3, #8]
 800189e:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80018a2:	6099      	str	r1, [r3, #8]
 80018a4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80018a6:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80018aa:	430a      	orrs	r2, r1
 80018ac:	671a      	str	r2, [r3, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80018ae:	2000      	movs	r0, #0
}
 80018b0:	b002      	add	sp, #8
 80018b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80018b6:	bf00      	nop
 80018b8:	40023800 	.word	0x40023800
 80018bc:	40007000 	.word	0x40007000
 80018c0:	42470068 	.word	0x42470068
 80018c4:	42470e40 	.word	0x42470e40

080018c8 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80018c8:	6802      	ldr	r2, [r0, #0]
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80018ca:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80018cc:	68d3      	ldr	r3, [r2, #12]
 80018ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80018d2:	60d3      	str	r3, [r2, #12]
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80018d4:	4604      	mov	r4, r0

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;

    /* Get tick */
    tickstart = HAL_GetTick();
 80018d6:	f7fe fcad 	bl	8000234 <HAL_GetTick>
 80018da:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80018dc:	6823      	ldr	r3, [r4, #0]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	069b      	lsls	r3, r3, #26
 80018e2:	d407      	bmi.n	80018f4 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80018e4:	f7fe fca6 	bl	8000234 <HAL_GetTick>
 80018e8:	1b40      	subs	r0, r0, r5
 80018ea:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80018ee:	d9f5      	bls.n	80018dc <HAL_RTC_WaitForSynchro+0x14>
    {       
      return HAL_TIMEOUT;
 80018f0:	2003      	movs	r0, #3
    } 
  }

  return HAL_OK;
}
 80018f2:	bd38      	pop	{r3, r4, r5, pc}
    {       
      return HAL_TIMEOUT;
    } 
  }

  return HAL_OK;
 80018f4:	2000      	movs	r0, #0
 80018f6:	bd38      	pop	{r3, r4, r5, pc}

080018f8 <RTC_EnterInitMode>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80018f8:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U; 
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80018fa:	6803      	ldr	r3, [r0, #0]
 80018fc:	68da      	ldr	r2, [r3, #12]
 80018fe:	0652      	lsls	r2, r2, #25
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8001900:	4604      	mov	r4, r0
  uint32_t tickstart = 0U; 
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001902:	d501      	bpl.n	8001908 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8001904:	2000      	movs	r0, #0
 8001906:	bd38      	pop	{r3, r4, r5, pc}
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8001908:	f04f 32ff 	mov.w	r2, #4294967295
 800190c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800190e:	f7fe fc91 	bl	8000234 <HAL_GetTick>
 8001912:	4605      	mov	r5, r0

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001914:	6823      	ldr	r3, [r4, #0]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	065b      	lsls	r3, r3, #25
 800191a:	d4f3      	bmi.n	8001904 <RTC_EnterInitMode+0xc>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800191c:	f7fe fc8a 	bl	8000234 <HAL_GetTick>
 8001920:	1b40      	subs	r0, r0, r5
 8001922:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001926:	d9f5      	bls.n	8001914 <RTC_EnterInitMode+0x1c>
      {       
        return HAL_TIMEOUT;
 8001928:	2003      	movs	r0, #3
      } 
    }
  }
  
  return HAL_OK;  
}
 800192a:	bd38      	pop	{r3, r4, r5, pc}

0800192c <HAL_RTC_Init>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800192c:	b510      	push	{r4, lr}
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800192e:	4604      	mov	r4, r0
 8001930:	2800      	cmp	r0, #0
 8001932:	d03d      	beq.n	80019b0 <HAL_RTC_Init+0x84>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
  assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
  assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001934:	7f43      	ldrb	r3, [r0, #29]
 8001936:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800193a:	b913      	cbnz	r3, 8001942 <HAL_RTC_Init+0x16>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800193c:	7702      	strb	r2, [r0, #28]
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800193e:	f003 fc7f 	bl	8005240 <HAL_RTC_MspInit>
  }
  
  /* Set RTC state */  
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8001942:	2302      	movs	r3, #2
 8001944:	7763      	strb	r3, [r4, #29]
       
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001946:	6823      	ldr	r3, [r4, #0]
 8001948:	22ca      	movs	r2, #202	; 0xca
 800194a:	625a      	str	r2, [r3, #36]	; 0x24
 800194c:	2253      	movs	r2, #83	; 0x53
 800194e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001950:	4620      	mov	r0, r4
 8001952:	f7ff ffd1 	bl	80018f8 <RTC_EnterInitMode>
 8001956:	6823      	ldr	r3, [r4, #0]
 8001958:	b120      	cbz	r0, 8001964 <HAL_RTC_Init+0x38>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 800195a:	22ff      	movs	r2, #255	; 0xff
 800195c:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800195e:	2304      	movs	r3, #4
 8001960:	7763      	strb	r3, [r4, #29]
 8001962:	e025      	b.n	80019b0 <HAL_RTC_Init+0x84>
    return HAL_ERROR;
  } 
  else
  { 
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001964:	689a      	ldr	r2, [r3, #8]
 8001966:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 800196a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800196e:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001970:	6899      	ldr	r1, [r3, #8]
 8001972:	6862      	ldr	r2, [r4, #4]
 8001974:	4311      	orrs	r1, r2
 8001976:	6922      	ldr	r2, [r4, #16]
 8001978:	4311      	orrs	r1, r2
 800197a:	6962      	ldr	r2, [r4, #20]
 800197c:	430a      	orrs	r2, r1
 800197e:	609a      	str	r2, [r3, #8]
    
    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001980:	68e2      	ldr	r2, [r4, #12]
 8001982:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001984:	691a      	ldr	r2, [r3, #16]
 8001986:	68a1      	ldr	r1, [r4, #8]
 8001988:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800198c:	611a      	str	r2, [r3, #16]
    
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 800198e:	68da      	ldr	r2, [r3, #12]
 8001990:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001994:	60da      	str	r2, [r3, #12]
    
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001996:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001998:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800199c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 800199e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80019a0:	69a2      	ldr	r2, [r4, #24]
 80019a2:	430a      	orrs	r2, r1
 80019a4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80019a6:	22ff      	movs	r2, #255	; 0xff
 80019a8:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80019aa:	2301      	movs	r3, #1
 80019ac:	7763      	strb	r3, [r4, #29]
    
    return HAL_OK;
 80019ae:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
  {
     return HAL_ERROR;
 80019b0:	2001      	movs	r0, #1
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
    
    return HAL_OK;
  }
}
 80019b2:	bd10      	pop	{r4, pc}

080019b4 <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 80019b4:	2300      	movs	r3, #0
  
  while(Value >= 10U)
 80019b6:	2809      	cmp	r0, #9
 80019b8:	d903      	bls.n	80019c2 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10U;
 80019ba:	380a      	subs	r0, #10
{
  uint32_t bcdhigh = 0U;
  
  while(Value >= 10U)
  {
    bcdhigh++;
 80019bc:	3301      	adds	r3, #1
    Value -= 10U;
 80019be:	b2c0      	uxtb	r0, r0
 80019c0:	e7f9      	b.n	80019b6 <RTC_ByteToBcd2+0x2>
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80019c2:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 80019c6:	b2c0      	uxtb	r0, r0
 80019c8:	4770      	bx	lr

080019ca <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80019ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
  
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 80019cc:	7f03      	ldrb	r3, [r0, #28]
 80019ce:	2b01      	cmp	r3, #1
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80019d0:	4606      	mov	r6, r0
 80019d2:	460f      	mov	r7, r1
 80019d4:	f04f 0502 	mov.w	r5, #2
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
  
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 80019d8:	d064      	beq.n	8001aa4 <HAL_RTC_SetTime+0xda>
 80019da:	2301      	movs	r3, #1
 80019dc:	7703      	strb	r3, [r0, #28]
 80019de:	6803      	ldr	r3, [r0, #0]
  
  hrtc->State = HAL_RTC_STATE_BUSY;
 80019e0:	7745      	strb	r5, [r0, #29]
 80019e2:	7808      	ldrb	r0, [r1, #0]
 80019e4:	78bd      	ldrb	r5, [r7, #2]
 80019e6:	7849      	ldrb	r1, [r1, #1]
  
  if(Format == RTC_FORMAT_BIN)
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80019e8:	689b      	ldr	r3, [r3, #8]
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
  
  hrtc->State = HAL_RTC_STATE_BUSY;
  
  if(Format == RTC_FORMAT_BIN)
 80019ea:	b9aa      	cbnz	r2, 8001a18 <HAL_RTC_SetTime+0x4e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80019ec:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    } 
    else
    {
      sTime->TimeFormat = 0x00U;
 80019f0:	bf08      	it	eq
 80019f2:	70fb      	strbeq	r3, [r7, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
    
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80019f4:	f7ff ffde 	bl	80019b4 <RTC_ByteToBcd2>
 80019f8:	4604      	mov	r4, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80019fa:	4608      	mov	r0, r1
 80019fc:	f7ff ffda 	bl	80019b4 <RTC_ByteToBcd2>
 8001a00:	4602      	mov	r2, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8001a02:	4628      	mov	r0, r5
 8001a04:	f7ff ffd6 	bl	80019b4 <RTC_ByteToBcd2>
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
    
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001a08:	78fb      	ldrb	r3, [r7, #3]
 8001a0a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001a0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001a12:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
 8001a16:	e00a      	b.n	8001a2e <HAL_RTC_SetTime+0x64>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
                        (((uint32_t)sTime->TimeFormat) << 16U));  
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001a18:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat)); 
    } 
    else
    {
      sTime->TimeFormat = 0x00U;
 8001a1c:	bf08      	it	eq
 8001a1e:	70fb      	strbeq	r3, [r7, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001a20:	0209      	lsls	r1, r1, #8
 8001a22:	ea41 4400 	orr.w	r4, r1, r0, lsl #16
 8001a26:	78f8      	ldrb	r0, [r7, #3]
 8001a28:	4325      	orrs	r5, r4
 8001a2a:	ea45 4400 	orr.w	r4, r5, r0, lsl #16
              ((uint32_t)sTime->Seconds) | \
              ((uint32_t)(sTime->TimeFormat) << 16U));   
  }
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001a2e:	6833      	ldr	r3, [r6, #0]
 8001a30:	22ca      	movs	r2, #202	; 0xca
 8001a32:	625a      	str	r2, [r3, #36]	; 0x24
 8001a34:	2253      	movs	r2, #83	; 0x53
 8001a36:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001a38:	4630      	mov	r0, r6
 8001a3a:	f7ff ff5d 	bl	80018f8 <RTC_EnterInitMode>
 8001a3e:	6833      	ldr	r3, [r6, #0]
 8001a40:	4605      	mov	r5, r0
 8001a42:	b130      	cbz	r0, 8001a52 <HAL_RTC_SetTime+0x88>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001a44:	22ff      	movs	r2, #255	; 0xff
 8001a46:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001a48:	2304      	movs	r3, #4
 8001a4a:	7773      	strb	r3, [r6, #29]
    
    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	7733      	strb	r3, [r6, #28]
 8001a50:	e01f      	b.n	8001a92 <HAL_RTC_SetTime+0xc8>
    return HAL_ERROR;
  } 
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001a52:	f004 307f 	and.w	r0, r4, #2139062143	; 0x7f7f7f7f
 8001a56:	f020 40fe 	bic.w	r0, r0, #2130706432	; 0x7f000000
 8001a5a:	6018      	str	r0, [r3, #0]
     
    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8001a5c:	689a      	ldr	r2, [r3, #8]
 8001a5e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a62:	609a      	str	r2, [r3, #8]
    
    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001a64:	6899      	ldr	r1, [r3, #8]
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	4311      	orrs	r1, r2
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	609a      	str	r2, [r3, #8]
    
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8001a70:	68da      	ldr	r2, [r3, #12]
 8001a72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a76:	60da      	str	r2, [r3, #12]
    
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	069b      	lsls	r3, r3, #26
 8001a7c:	d40b      	bmi.n	8001a96 <HAL_RTC_SetTime+0xcc>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001a7e:	4630      	mov	r0, r6
 8001a80:	f7ff ff22 	bl	80018c8 <HAL_RTC_WaitForSynchro>
 8001a84:	b138      	cbz	r0, 8001a96 <HAL_RTC_SetTime+0xcc>
      {        
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8001a86:	6833      	ldr	r3, [r6, #0]
 8001a88:	22ff      	movs	r2, #255	; 0xff
 8001a8a:	625a      	str	r2, [r3, #36]	; 0x24
        
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001a8c:	2304      	movs	r3, #4
 8001a8e:	7773      	strb	r3, [r6, #29]
        
        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8001a90:	7735      	strb	r5, [r6, #28]
        
        return HAL_ERROR;
 8001a92:	2501      	movs	r5, #1
 8001a94:	e006      	b.n	8001aa4 <HAL_RTC_SetTime+0xda>
      }
    }
    
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001a96:	6833      	ldr	r3, [r6, #0]
 8001a98:	22ff      	movs	r2, #255	; 0xff
 8001a9a:	625a      	str	r2, [r3, #36]	; 0x24
    
   hrtc->State = HAL_RTC_STATE_READY;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	7773      	strb	r3, [r6, #29]
  
   __HAL_UNLOCK(hrtc); 
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	7733      	strb	r3, [r6, #28]
     
   return HAL_OK;
  }
}
 8001aa4:	4628      	mov	r0, r5
 8001aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001aa8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
 /* Process Locked */ 
 __HAL_LOCK(hrtc);
 8001aaa:	7f03      	ldrb	r3, [r0, #28]
 8001aac:	2b01      	cmp	r3, #1
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001aae:	4606      	mov	r6, r0
 8001ab0:	f04f 0502 	mov.w	r5, #2
  
 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
 /* Process Locked */ 
 __HAL_LOCK(hrtc);
 8001ab4:	d057      	beq.n	8001b66 <HAL_RTC_SetDate+0xbe>
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	7703      	strb	r3, [r0, #28]
  
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8001aba:	7745      	strb	r5, [r0, #29]
 8001abc:	784b      	ldrb	r3, [r1, #1]
 8001abe:	78c8      	ldrb	r0, [r1, #3]
 8001ac0:	788d      	ldrb	r5, [r1, #2]
 8001ac2:	780f      	ldrb	r7, [r1, #0]
  
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001ac4:	2a00      	cmp	r2, #0
 8001ac6:	d147      	bne.n	8001b58 <HAL_RTC_SetDate+0xb0>
 8001ac8:	06da      	lsls	r2, r3, #27
 8001aca:	d503      	bpl.n	8001ad4 <HAL_RTC_SetDate+0x2c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8001acc:	f023 0210 	bic.w	r2, r3, #16
 8001ad0:	320a      	adds	r2, #10
 8001ad2:	704a      	strb	r2, [r1, #1]
  {   
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date)); 
    
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001ad4:	f7ff ff6e 	bl	80019b4 <RTC_ByteToBcd2>
 8001ad8:	4604      	mov	r4, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8001ada:	7848      	ldrb	r0, [r1, #1]
 8001adc:	f7ff ff6a 	bl	80019b4 <RTC_ByteToBcd2>
 8001ae0:	4602      	mov	r2, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8001ae2:	4628      	mov	r0, r5
 8001ae4:	f7ff ff66 	bl	80019b4 <RTC_ByteToBcd2>
  {   
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date)); 
    
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001ae8:	ea40 3047 	orr.w	r0, r0, r7, lsl #13
 8001aec:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001af0:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
                  ((uint32_t)sDate->Date) | \
                  (((uint32_t)sDate->WeekDay) << 13U));  
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001af4:	6833      	ldr	r3, [r6, #0]
 8001af6:	22ca      	movs	r2, #202	; 0xca
 8001af8:	625a      	str	r2, [r3, #36]	; 0x24
 8001afa:	2253      	movs	r2, #83	; 0x53
 8001afc:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001afe:	4630      	mov	r0, r6
 8001b00:	f7ff fefa 	bl	80018f8 <RTC_EnterInitMode>
 8001b04:	6833      	ldr	r3, [r6, #0]
 8001b06:	4605      	mov	r5, r0
 8001b08:	b130      	cbz	r0, 8001b18 <HAL_RTC_SetDate+0x70>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001b0a:	22ff      	movs	r2, #255	; 0xff
 8001b0c:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001b0e:	2304      	movs	r3, #4
 8001b10:	7773      	strb	r3, [r6, #29]
    
    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8001b12:	2300      	movs	r3, #0
 8001b14:	7733      	strb	r3, [r6, #28]
 8001b16:	e015      	b.n	8001b44 <HAL_RTC_SetDate+0x9c>
    return HAL_ERROR;
  } 
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8001b18:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
 8001b1c:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
 8001b20:	6058      	str	r0, [r3, #4]
    
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8001b22:	68da      	ldr	r2, [r3, #12]
 8001b24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b28:	60da      	str	r2, [r3, #12]
    
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	069b      	lsls	r3, r3, #26
 8001b2e:	d40b      	bmi.n	8001b48 <HAL_RTC_SetDate+0xa0>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001b30:	4630      	mov	r0, r6
 8001b32:	f7ff fec9 	bl	80018c8 <HAL_RTC_WaitForSynchro>
 8001b36:	b138      	cbz	r0, 8001b48 <HAL_RTC_SetDate+0xa0>
      { 
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8001b38:	6833      	ldr	r3, [r6, #0]
 8001b3a:	22ff      	movs	r2, #255	; 0xff
 8001b3c:	625a      	str	r2, [r3, #36]	; 0x24
        
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001b3e:	2304      	movs	r3, #4
 8001b40:	7773      	strb	r3, [r6, #29]
        
        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8001b42:	7735      	strb	r5, [r6, #28]
        
        return HAL_ERROR;
 8001b44:	2501      	movs	r5, #1
 8001b46:	e00e      	b.n	8001b66 <HAL_RTC_SetDate+0xbe>
      }
    }
    
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8001b48:	6833      	ldr	r3, [r6, #0]
 8001b4a:	22ff      	movs	r2, #255	; 0xff
 8001b4c:	625a      	str	r2, [r3, #36]	; 0x24
    
    hrtc->State = HAL_RTC_STATE_READY ;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	7773      	strb	r3, [r6, #29]
    
    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8001b52:	2300      	movs	r3, #0
 8001b54:	7733      	strb	r3, [r6, #28]
    
    return HAL_OK;    
 8001b56:	e006      	b.n	8001b66 <HAL_RTC_SetDate+0xbe>
    datetmpreg = RTC_Bcd2ToByte(sDate->Month);
    assert_param(IS_RTC_MONTH(datetmpreg));
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
    assert_param(IS_RTC_DATE(datetmpreg));
    
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001b58:	021b      	lsls	r3, r3, #8
 8001b5a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001b5e:	4328      	orrs	r0, r5
 8001b60:	ea40 3447 	orr.w	r4, r0, r7, lsl #13
 8001b64:	e7c6      	b.n	8001af4 <HAL_RTC_SetDate+0x4c>
    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
    
    return HAL_OK;    
  }
}
 8001b66:	4628      	mov	r0, r5
 8001b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001b6a <HAL_RTC_SetAlarm>:
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
  
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8001b6a:	7f03      	ldrb	r3, [r0, #28]
 8001b6c:	2b01      	cmp	r3, #1
  *             @arg RTC_FORMAT_BIN: Binary data format 
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8001b6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b72:	4606      	mov	r6, r0
 8001b74:	f04f 0002 	mov.w	r0, #2
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
  
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8001b78:	f000 8090 	beq.w	8001c9c <HAL_RTC_SetAlarm+0x132>
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	7733      	strb	r3, [r6, #28]
 8001b80:	6833      	ldr	r3, [r6, #0]
  
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001b82:	7770      	strb	r0, [r6, #29]
 8001b84:	7808      	ldrb	r0, [r1, #0]
 8001b86:	f891 9001 	ldrb.w	r9, [r1, #1]
 8001b8a:	788d      	ldrb	r5, [r1, #2]
 8001b8c:	f891 8020 	ldrb.w	r8, [r1, #32]
 8001b90:	69cc      	ldr	r4, [r1, #28]
 8001b92:	694f      	ldr	r7, [r1, #20]
  
  if(Format == RTC_FORMAT_BIN)
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001b94:	689b      	ldr	r3, [r3, #8]
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
  
  hrtc->State = HAL_RTC_STATE_BUSY;
  
  if(Format == RTC_FORMAT_BIN)
 8001b96:	b9ea      	cbnz	r2, 8001bd4 <HAL_RTC_SetAlarm+0x6a>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001b98:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    } 
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8001b9c:	bf08      	it	eq
 8001b9e:	70cb      	strbeq	r3, [r1, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001ba0:	f7ff ff08 	bl	80019b4 <RTC_ByteToBcd2>
 8001ba4:	4682      	mov	sl, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8001ba6:	4648      	mov	r0, r9
 8001ba8:	f7ff ff04 	bl	80019b4 <RTC_ByteToBcd2>
 8001bac:	4681      	mov	r9, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8001bae:	4628      	mov	r0, r5
 8001bb0:	f7ff ff00 	bl	80019b4 <RTC_ByteToBcd2>
 8001bb4:	4602      	mov	r2, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8001bb6:	4640      	mov	r0, r8
 8001bb8:	f7ff fefc 	bl	80019b4 <RTC_ByteToBcd2>
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8001bbc:	4327      	orrs	r7, r4
 8001bbe:	78cc      	ldrb	r4, [r1, #3]
 8001bc0:	ea47 4404 	orr.w	r4, r7, r4, lsl #16
 8001bc4:	4322      	orrs	r2, r4
 8001bc6:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 8001bca:	ea42 2409 	orr.w	r4, r2, r9, lsl #8
 8001bce:	ea44 6400 	orr.w	r4, r4, r0, lsl #24
 8001bd2:	e00e      	b.n	8001bf2 <HAL_RTC_SetAlarm+0x88>
    {
      tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
    }  
    
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8001bd4:	4327      	orrs	r7, r4
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
              ((uint32_t)sAlarm->AlarmMask)); 
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001bd6:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    } 
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8001bda:	bf08      	it	eq
 8001bdc:	70cb      	strbeq	r3, [r1, #3]
    {
      tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
    }  
    
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8001bde:	433d      	orrs	r5, r7
 8001be0:	78cc      	ldrb	r4, [r1, #3]
 8001be2:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
 8001be6:	ea40 2009 	orr.w	r0, r0, r9, lsl #8
 8001bea:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001bee:	ea40 6408 	orr.w	r4, r0, r8, lsl #24
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
              ((uint32_t)sAlarm->AlarmMask));   
  }
  
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8001bf2:	698b      	ldr	r3, [r1, #24]
 8001bf4:	684d      	ldr	r5, [r1, #4]
 8001bf6:	431d      	orrs	r5, r3
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001bf8:	6833      	ldr	r3, [r6, #0]
 8001bfa:	22ca      	movs	r2, #202	; 0xca
 8001bfc:	625a      	str	r2, [r3, #36]	; 0x24
 8001bfe:	2253      	movs	r2, #83	; 0x53
 8001c00:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8001c02:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001c04:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8001c08:	689a      	ldr	r2, [r3, #8]
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8001c0a:	d11c      	bne.n	8001c46 <HAL_RTC_SetAlarm+0xdc>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8001c0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c10:	609a      	str	r2, [r3, #8]
    
    /* In case of interrupt mode is used, the interrupt source must disabled */ 
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c18:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c1a:	f7fe fb0b 	bl	8000234 <HAL_GetTick>
 8001c1e:	4680      	mov	r8, r0

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8001c20:	6833      	ldr	r3, [r6, #0]
 8001c22:	68da      	ldr	r2, [r3, #12]
 8001c24:	f012 0701 	ands.w	r7, r2, #1
 8001c28:	d107      	bne.n	8001c3a <HAL_RTC_SetAlarm+0xd0>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001c2a:	f7fe fb03 	bl	8000234 <HAL_GetTick>
 8001c2e:	ebc8 0000 	rsb	r0, r8, r0
 8001c32:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001c36:	d9f3      	bls.n	8001c20 <HAL_RTC_SetAlarm+0xb6>
 8001c38:	e01b      	b.n	8001c72 <HAL_RTC_SetAlarm+0x108>
        
        return HAL_TIMEOUT;
      }   
    }
    
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8001c3a:	61dc      	str	r4, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8001c3c:	645d      	str	r5, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c44:	e022      	b.n	8001c8c <HAL_RTC_SetAlarm+0x122>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8001c46:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c4a:	609a      	str	r2, [r3, #8]
    
    /* In case of interrupt mode is used, the interrupt source must disabled */ 
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8001c4c:	689a      	ldr	r2, [r3, #8]
 8001c4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c52:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c54:	f7fe faee 	bl	8000234 <HAL_GetTick>
 8001c58:	4680      	mov	r8, r0

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8001c5a:	6833      	ldr	r3, [r6, #0]
 8001c5c:	68da      	ldr	r2, [r3, #12]
 8001c5e:	f012 0702 	ands.w	r7, r2, #2
 8001c62:	d10e      	bne.n	8001c82 <HAL_RTC_SetAlarm+0x118>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001c64:	f7fe fae6 	bl	8000234 <HAL_GetTick>
 8001c68:	ebc8 0000 	rsb	r0, r8, r0
 8001c6c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001c70:	d9f3      	bls.n	8001c5a <HAL_RTC_SetAlarm+0xf0>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001c72:	6833      	ldr	r3, [r6, #0]
 8001c74:	22ff      	movs	r2, #255	; 0xff
        
        hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 8001c76:	2003      	movs	r0, #3
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001c78:	625a      	str	r2, [r3, #36]	; 0x24
        
        hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 8001c7a:	7770      	strb	r0, [r6, #29]
        
        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8001c7c:	7737      	strb	r7, [r6, #28]
        
        return HAL_TIMEOUT;
 8001c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }  
    }    
    
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8001c82:	621c      	str	r4, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8001c84:	649d      	str	r5, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc); 
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c8c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);   
 8001c8e:	6833      	ldr	r3, [r6, #0]
 8001c90:	22ff      	movs	r2, #255	; 0xff
 8001c92:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY; 
  
  /* Process Unlocked */ 
  __HAL_UNLOCK(hrtc);
 8001c94:	2000      	movs	r0, #0
  
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);   
  
  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY; 
 8001c96:	2301      	movs	r3, #1
 8001c98:	7773      	strb	r3, [r6, #29]
  
  /* Process Unlocked */ 
  __HAL_UNLOCK(hrtc);
 8001c9a:	7730      	strb	r0, [r6, #28]
  
  return HAL_OK;
}
 8001c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001ca0 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0U;
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
  
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8001ca0:	6803      	ldr	r3, [r0, #0]
 8001ca2:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
  
  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8001ca4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8001ca8:	4770      	bx	lr

08001caa <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0U;
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8001caa:	6803      	ldr	r3, [r0, #0]
 8001cac:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8001cae:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 8001cb2:	4770      	bx	lr

08001cb4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8001cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cb6:	b089      	sub	sp, #36	; 0x24
 8001cb8:	4606      	mov	r6, r0
 8001cba:	460d      	mov	r5, r1
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  uint32_t tickstart = HAL_GetTick();
 8001cbc:	f7fe faba 	bl	8000234 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 8001cc0:	2300      	movs	r3, #0
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  uint32_t tickstart = HAL_GetTick();
 8001cc2:	4607      	mov	r7, r0
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8001cc4:	2108      	movs	r1, #8
 8001cc6:	6830      	ldr	r0, [r6, #0]
{
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  uint32_t tickstart = HAL_GetTick();
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	9301      	str	r3, [sp, #4]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8001ccc:	f001 fc43 	bl	8003556 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_OK)
 8001cd0:	2800      	cmp	r0, #0
 8001cd2:	d150      	bne.n	8001d76 <SD_FindSCR+0xc2>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8001cd4:	6d31      	ldr	r1, [r6, #80]	; 0x50
 8001cd6:	6830      	ldr	r0, [r6, #0]
 8001cd8:	0409      	lsls	r1, r1, #16
 8001cda:	f001 fd47 	bl	800376c <SDMMC_CmdAppCommand>
  if(errorstate != HAL_OK)
 8001cde:	2800      	cmp	r0, #0
 8001ce0:	d149      	bne.n	8001d76 <SD_FindSCR+0xc2>
  {
    return errorstate;
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce6:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 8001ce8:	2308      	movs	r3, #8
 8001cea:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8001cec:	2330      	movs	r3, #48	; 0x30
 8001cee:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001cf4:	9006      	str	r0, [sp, #24]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8001cf6:	2301      	movs	r3, #1
  SDIO_ConfigData(hsd->Instance, &config);
 8001cf8:	a902      	add	r1, sp, #8
 8001cfa:	6830      	ldr	r0, [r6, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
  config.DataLength    = 8U;
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
  config.DPSM          = SDIO_DPSM_ENABLE;
 8001cfc:	9307      	str	r3, [sp, #28]
  SDIO_ConfigData(hsd->Instance, &config);
 8001cfe:	f001 fc17 	bl	8003530 <SDIO_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8001d02:	6830      	ldr	r0, [r6, #0]
 8001d04:	f001 fd63 	bl	80037ce <SDMMC_CmdSendSCR>
  if(errorstate != HAL_OK)
 8001d08:	2800      	cmp	r0, #0
 8001d0a:	d134      	bne.n	8001d76 <SD_FindSCR+0xc2>
 8001d0c:	4604      	mov	r4, r0
  {
    return errorstate;
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8001d0e:	6832      	ldr	r2, [r6, #0]
 8001d10:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8001d12:	f240 432a 	movw	r3, #1066	; 0x42a
 8001d16:	400b      	ands	r3, r1
 8001d18:	b99b      	cbnz	r3, 8001d42 <SD_FindSCR+0x8e>
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8001d1a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001d1c:	0298      	lsls	r0, r3, #10
 8001d1e:	d508      	bpl.n	8001d32 <SD_FindSCR+0x7e>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8001d20:	4610      	mov	r0, r2
 8001d22:	f001 fb48 	bl	80033b6 <SDIO_ReadFIFO>
 8001d26:	ab08      	add	r3, sp, #32
 8001d28:	eb03 0384 	add.w	r3, r3, r4, lsl #2
      index++;
 8001d2c:	3401      	adds	r4, #1
  
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8001d2e:	f843 0c20 	str.w	r0, [r3, #-32]
      index++;
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8001d32:	f7fe fa7f 	bl	8000234 <HAL_GetTick>
 8001d36:	1bc0      	subs	r0, r0, r7
 8001d38:	3001      	adds	r0, #1
 8001d3a:	d1e8      	bne.n	8001d0e <SD_FindSCR+0x5a>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8001d3c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8001d40:	e019      	b.n	8001d76 <SD_FindSCR+0xc2>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8001d42:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001d44:	0719      	lsls	r1, r3, #28
 8001d46:	d501      	bpl.n	8001d4c <SD_FindSCR+0x98>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8001d48:	2008      	movs	r0, #8
 8001d4a:	e009      	b.n	8001d60 <SD_FindSCR+0xac>
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8001d4c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001d4e:	079b      	lsls	r3, r3, #30
 8001d50:	d501      	bpl.n	8001d56 <SD_FindSCR+0xa2>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8001d52:	2002      	movs	r0, #2
 8001d54:	e004      	b.n	8001d60 <SD_FindSCR+0xac>
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8001d56:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001d58:	f013 0020 	ands.w	r0, r3, #32
 8001d5c:	d002      	beq.n	8001d64 <SD_FindSCR+0xb0>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8001d5e:	2020      	movs	r0, #32
 8001d60:	6390      	str	r0, [r2, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 8001d62:	e008      	b.n	8001d76 <SD_FindSCR+0xc2>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001d64:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8001d68:	6393      	str	r3, [r2, #56]	; 0x38
 8001d6a:	9b00      	ldr	r3, [sp, #0]
 8001d6c:	ba1b      	rev	r3, r3
    
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8001d6e:	606b      	str	r3, [r5, #4]
 8001d70:	9b01      	ldr	r3, [sp, #4]
 8001d72:	ba1b      	rev	r3, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
    
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8001d74:	602b      	str	r3, [r5, #0]
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
  }

  return HAL_SD_ERROR_NONE;
}
 8001d76:	b009      	add	sp, #36	; 0x24
 8001d78:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d7a <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8001d7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d7e:	b087      	sub	sp, #28
 8001d80:	4604      	mov	r4, r0
 8001d82:	460d      	mov	r5, r1
 8001d84:	4690      	mov	r8, r2
 8001d86:	4699      	mov	r9, r3
 8001d88:	9e10      	ldr	r6, [sp, #64]	; 0x40
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  uint32_t tickstart = HAL_GetTick();
 8001d8a:	f7fe fa53 	bl	8000234 <HAL_GetTick>
 8001d8e:	4607      	mov	r7, r0
  uint32_t count = 0U, *tempbuff = (uint32_t *)pData;
  
  if(NULL == pData)
 8001d90:	b91d      	cbnz	r5, 8001d9a <HAL_SD_ReadBlocks+0x20>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001d92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001d94:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001d98:	e0ca      	b.n	8001f30 <HAL_SD_ReadBlocks+0x1b6>
    return HAL_ERROR;
  }
 
  if(hsd->State == HAL_SD_STATE_READY)
 8001d9a:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8001d9e:	b2c0      	uxtb	r0, r0
 8001da0:	2801      	cmp	r0, #1
 8001da2:	f040 80c2 	bne.w	8001f2a <HAL_SD_ReadBlocks+0x1b0>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001da6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001da8:	eb08 0309 	add.w	r3, r8, r9
    return HAL_ERROR;
  }
 
  if(hsd->State == HAL_SD_STATE_READY)
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dac:	2100      	movs	r1, #0
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001dae:	4293      	cmp	r3, r2
    return HAL_ERROR;
  }
 
  if(hsd->State == HAL_SD_STATE_READY)
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001db0:	63a1      	str	r1, [r4, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001db2:	d904      	bls.n	8001dbe <HAL_SD_ReadBlocks+0x44>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001db4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001db6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dba:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8001dbc:	e0ba      	b.n	8001f34 <HAL_SD_ReadBlocks+0x1ba>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8001dc4:	6820      	ldr	r0, [r4, #0]
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001dc6:	6c63      	ldr	r3, [r4, #68]	; 0x44
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8001dc8:	62c1      	str	r1, [r0, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001dca:	2b01      	cmp	r3, #1
    {
      BlockAdd *= 512U;
    }
      
    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001dcc:	f44f 7100 	mov.w	r1, #512	; 0x200
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
    {
      BlockAdd *= 512U;
 8001dd0:	bf18      	it	ne
 8001dd2:	ea4f 2848 	movne.w	r8, r8, lsl #9
    }
      
    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001dd6:	f001 fbbe 	bl	8003556 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001dda:	2800      	cmp	r0, #0
 8001ddc:	d15a      	bne.n	8001e94 <HAL_SD_ReadBlocks+0x11a>
      hsd->State = HAL_SD_STATE_READY;
      return HAL_ERROR;
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001dde:	f04f 33ff 	mov.w	r3, #4294967295
 8001de2:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001de4:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001de8:	9301      	str	r3, [sp, #4]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001dea:	9004      	str	r0, [sp, #16]
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001dec:	2390      	movs	r3, #144	; 0x90
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001dee:	f04f 0a01 	mov.w	sl, #1
    
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001df2:	f04f 0b02 	mov.w	fp, #2
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
    config.DPSM          = SDIO_DPSM_ENABLE;
    SDIO_ConfigData(hsd->Instance, &config);
 8001df6:	4669      	mov	r1, sp
 8001df8:	6820      	ldr	r0, [r4, #0]
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001dfa:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001dfc:	f8cd b00c 	str.w	fp, [sp, #12]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001e00:	f8cd a014 	str.w	sl, [sp, #20]
    SDIO_ConfigData(hsd->Instance, &config);
 8001e04:	f001 fb94 	bl	8003530 <SDIO_ConfigData>
    
    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8001e08:	45d1      	cmp	r9, sl
 8001e0a:	d906      	bls.n	8001e1a <HAL_SD_ReadBlocks+0xa0>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8001e0c:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8001e10:	4641      	mov	r1, r8
 8001e12:	6820      	ldr	r0, [r4, #0]
 8001e14:	f001 fbcf 	bl	80035b6 <SDMMC_CmdReadMultiBlock>
 8001e18:	e005      	b.n	8001e26 <HAL_SD_ReadBlocks+0xac>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8001e1a:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
      
      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8001e1e:	4641      	mov	r1, r8
 8001e20:	6820      	ldr	r0, [r4, #0]
 8001e22:	f001 fbb0 	bl	8003586 <SDMMC_CmdReadSingleBlock>
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8001e26:	2800      	cmp	r0, #0
 8001e28:	d134      	bne.n	8001e94 <HAL_SD_ReadBlocks+0x11a>
      return HAL_ERROR;
    }
      
    /* Poll on SDIO flags */
#ifdef SDIO_STA_STBITERR
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_STA_STBITERR))
 8001e2a:	6820      	ldr	r0, [r4, #0]
 8001e2c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8001e2e:	f240 332a 	movw	r3, #810	; 0x32a
 8001e32:	4013      	ands	r3, r2
 8001e34:	bb13      	cbnz	r3, 8001e7c <HAL_SD_ReadBlocks+0x102>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF))
 8001e36:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001e38:	041a      	lsls	r2, r3, #16
 8001e3a:	d50b      	bpl.n	8001e54 <HAL_SD_ReadBlocks+0xda>
 8001e3c:	f1a5 0804 	sub.w	r8, r5, #4
 8001e40:	f105 0a1c 	add.w	sl, r5, #28
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
        {
          *(tempbuff + count) = SDIO_ReadFIFO(hsd->Instance);
 8001e44:	6820      	ldr	r0, [r4, #0]
 8001e46:	f001 fab6 	bl	80033b6 <SDIO_ReadFIFO>
 8001e4a:	f848 0f04 	str.w	r0, [r8, #4]!
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF))
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8001e4e:	45d0      	cmp	r8, sl
 8001e50:	d1f8      	bne.n	8001e44 <HAL_SD_ReadBlocks+0xca>
        {
          *(tempbuff + count) = SDIO_ReadFIFO(hsd->Instance);
        }
        tempbuff += 8U;
 8001e52:	3520      	adds	r5, #32
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8001e54:	b966      	cbnz	r6, 8001e70 <HAL_SD_ReadBlocks+0xf6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001e56:	6823      	ldr	r3, [r4, #0]
 8001e58:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001e5c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001e5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e64:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8001e66:	2301      	movs	r3, #1
 8001e68:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8001e6c:	2003      	movs	r0, #3
 8001e6e:	e061      	b.n	8001f34 <HAL_SD_ReadBlocks+0x1ba>
          *(tempbuff + count) = SDIO_ReadFIFO(hsd->Instance);
        }
        tempbuff += 8U;
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8001e70:	f7fe f9e0 	bl	8000234 <HAL_GetTick>
 8001e74:	1bc0      	subs	r0, r0, r7
 8001e76:	4286      	cmp	r6, r0
 8001e78:	d8d7      	bhi.n	8001e2a <HAL_SD_ReadBlocks+0xb0>
 8001e7a:	e7ec      	b.n	8001e56 <HAL_SD_ReadBlocks+0xdc>
        return HAL_TIMEOUT;
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8001e7c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001e7e:	05db      	lsls	r3, r3, #23
 8001e80:	d510      	bpl.n	8001ea4 <HAL_SD_ReadBlocks+0x12a>
 8001e82:	f1b9 0f01 	cmp.w	r9, #1
 8001e86:	d90d      	bls.n	8001ea4 <HAL_SD_ReadBlocks+0x12a>
    {    
      if(hsd->SdCard.CardType != CARD_SECURED)
 8001e88:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001e8a:	2b03      	cmp	r3, #3
 8001e8c:	d00a      	beq.n	8001ea4 <HAL_SD_ReadBlocks+0x12a>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001e8e:	f001 fbdb 	bl	8003648 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8001e92:	b138      	cbz	r0, 8001ea4 <HAL_SD_ReadBlocks+0x12a>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001e94:	6823      	ldr	r3, [r4, #0]
 8001e96:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001e9a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8001e9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e9e:	4318      	orrs	r0, r3
 8001ea0:	63a0      	str	r0, [r4, #56]	; 0x38
 8001ea2:	e036      	b.n	8001f12 <HAL_SD_ReadBlocks+0x198>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8001ea4:	6823      	ldr	r3, [r4, #0]
 8001ea6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ea8:	0710      	lsls	r0, r2, #28
 8001eaa:	d506      	bpl.n	8001eba <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001eac:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001eb0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8001eb2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001eb4:	f043 0308 	orr.w	r3, r3, #8
 8001eb8:	e02a      	b.n	8001f10 <HAL_SD_ReadBlocks+0x196>
      hsd->State = HAL_SD_STATE_READY;
      return HAL_ERROR;
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8001eba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ebc:	0791      	lsls	r1, r2, #30
 8001ebe:	d506      	bpl.n	8001ece <HAL_SD_ReadBlocks+0x154>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001ec0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001ec4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8001ec6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ec8:	f043 0302 	orr.w	r3, r3, #2
 8001ecc:	e020      	b.n	8001f10 <HAL_SD_ReadBlocks+0x196>
      hsd->State = HAL_SD_STATE_READY;
      return HAL_ERROR;
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8001ece:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ed0:	0692      	lsls	r2, r2, #26
 8001ed2:	d50b      	bpl.n	8001eec <HAL_SD_ReadBlocks+0x172>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001ed4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001ed8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8001eda:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001edc:	f043 0320 	orr.w	r3, r3, #32
 8001ee0:	e016      	b.n	8001f10 <HAL_SD_ReadBlocks+0x196>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
    {
      *tempbuff = SDIO_ReadFIFO(hsd->Instance);
      tempbuff++;
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8001ee2:	f7fe f9a7 	bl	8000234 <HAL_GetTick>
 8001ee6:	1bc0      	subs	r0, r0, r7
 8001ee8:	4286      	cmp	r6, r0
 8001eea:	d90a      	bls.n	8001f02 <HAL_SD_ReadBlocks+0x188>
      hsd->State = HAL_SD_STATE_READY;
      return HAL_ERROR;
    }
    
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
 8001eec:	6820      	ldr	r0, [r4, #0]
 8001eee:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001ef0:	f413 1300 	ands.w	r3, r3, #2097152	; 0x200000
 8001ef4:	d011      	beq.n	8001f1a <HAL_SD_ReadBlocks+0x1a0>
    {
      *tempbuff = SDIO_ReadFIFO(hsd->Instance);
 8001ef6:	f001 fa5e 	bl	80033b6 <SDIO_ReadFIFO>
 8001efa:	f845 0b04 	str.w	r0, [r5], #4
      tempbuff++;
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8001efe:	2e00      	cmp	r6, #0
 8001f00:	d1ef      	bne.n	8001ee2 <HAL_SD_ReadBlocks+0x168>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);        
 8001f02:	6823      	ldr	r3, [r4, #0]
 8001f04:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001f08:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001f0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001f10:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8001f12:	2001      	movs	r0, #1
 8001f14:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        return HAL_ERROR;
 8001f18:	e00c      	b.n	8001f34 <HAL_SD_ReadBlocks+0x1ba>
      }
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001f1a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001f1e:	6382      	str	r2, [r0, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8001f20:	2201      	movs	r2, #1
 8001f22:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    
    return HAL_OK;
 8001f26:	4618      	mov	r0, r3
 8001f28:	e004      	b.n	8001f34 <HAL_SD_ReadBlocks+0x1ba>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8001f2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f2c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f30:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8001f32:	2001      	movs	r0, #1
  }
}
 8001f34:	b007      	add	sp, #28
 8001f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001f3a <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8001f3a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f3e:	b087      	sub	sp, #28
 8001f40:	4604      	mov	r4, r0
 8001f42:	460f      	mov	r7, r1
 8001f44:	4615      	mov	r5, r2
 8001f46:	461e      	mov	r6, r3
 8001f48:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  uint32_t tickstart = HAL_GetTick();
 8001f4c:	f7fe f972 	bl	8000234 <HAL_GetTick>
 8001f50:	4681      	mov	r9, r0
  uint32_t count = 0U;
  uint32_t *tempbuff = (uint32_t *)pData;
  
  if(NULL == pData)
 8001f52:	b91f      	cbnz	r7, 8001f5c <HAL_SD_WriteBlocks+0x22>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001f54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f5a:	e0a2      	b.n	80020a2 <HAL_SD_WriteBlocks+0x168>
    return HAL_ERROR;
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8001f5c:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8001f60:	b2c0      	uxtb	r0, r0
 8001f62:	2801      	cmp	r0, #1
 8001f64:	f040 809a 	bne.w	800209c <HAL_SD_WriteBlocks+0x162>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001f68:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001f6a:	19ab      	adds	r3, r5, r6
    return HAL_ERROR;
  }

  if(hsd->State == HAL_SD_STATE_READY)
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f6c:	2100      	movs	r1, #0
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001f6e:	4293      	cmp	r3, r2
    return HAL_ERROR;
  }

  if(hsd->State == HAL_SD_STATE_READY)
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f70:	63a1      	str	r1, [r4, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001f72:	d904      	bls.n	8001f7e <HAL_SD_WriteBlocks+0x44>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001f74:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f7a:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8001f7c:	e093      	b.n	80020a6 <HAL_SD_WriteBlocks+0x16c>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8001f84:	6820      	ldr	r0, [r4, #0]
     
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001f86:	6c63      	ldr	r3, [r4, #68]	; 0x44
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8001f88:	62c1      	str	r1, [r0, #44]	; 0x2c
     
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001f8a:	2b01      	cmp	r3, #1
    {
      BlockAdd *= 512U;
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001f8c:	f44f 7100 	mov.w	r1, #512	; 0x200
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
     
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
    {
      BlockAdd *= 512U;
 8001f90:	bf18      	it	ne
 8001f92:	026d      	lslne	r5, r5, #9
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001f94:	f001 fadf 	bl	8003556 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001f98:	2800      	cmp	r0, #0
 8001f9a:	d14f      	bne.n	800203c <HAL_SD_WriteBlocks+0x102>
      hsd->State = HAL_SD_STATE_READY;
      return HAL_ERROR;
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8001f9c:	2e01      	cmp	r6, #1
 8001f9e:	d906      	bls.n	8001fae <HAL_SD_WriteBlocks+0x74>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8001fa0:	2320      	movs	r3, #32
 8001fa2:	6323      	str	r3, [r4, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8001fa4:	4629      	mov	r1, r5
 8001fa6:	6820      	ldr	r0, [r4, #0]
 8001fa8:	f001 fb35 	bl	8003616 <SDMMC_CmdWriteMultiBlock>
 8001fac:	e005      	b.n	8001fba <HAL_SD_WriteBlocks+0x80>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8001fae:	2310      	movs	r3, #16
 8001fb0:	6323      	str	r3, [r4, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8001fb2:	4629      	mov	r1, r5
 8001fb4:	6820      	ldr	r0, [r4, #0]
 8001fb6:	f001 fb16 	bl	80035e6 <SDMMC_CmdWriteSingleBlock>
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8001fba:	2800      	cmp	r0, #0
 8001fbc:	d13e      	bne.n	800203c <HAL_SD_WriteBlocks+0x102>
      hsd->State = HAL_SD_STATE_READY;
      return HAL_ERROR;
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc2:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001fc4:	0273      	lsls	r3, r6, #9
 8001fc6:	9301      	str	r3, [sp, #4]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001fc8:	2390      	movs	r3, #144	; 0x90
 8001fca:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8001fcc:	9003      	str	r0, [sp, #12]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001fce:	9004      	str	r0, [sp, #16]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001fd0:	2301      	movs	r3, #1
    SDIO_ConfigData(hsd->Instance, &config);
 8001fd2:	4669      	mov	r1, sp
 8001fd4:	6820      	ldr	r0, [r4, #0]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001fd6:	9305      	str	r3, [sp, #20]
    SDIO_ConfigData(hsd->Instance, &config);
 8001fd8:	f001 faaa 	bl	8003530 <SDIO_ConfigData>
    
    /* Write block(s) in polling mode */
#ifdef SDIO_STA_STBITERR
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001fdc:	6820      	ldr	r0, [r4, #0]
 8001fde:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001fe0:	f240 351a 	movw	r5, #794	; 0x31a
 8001fe4:	401d      	ands	r5, r3
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE))
 8001fe6:	6b43      	ldr	r3, [r0, #52]	; 0x34
    config.DPSM          = SDIO_DPSM_ENABLE;
    SDIO_ConfigData(hsd->Instance, &config);
    
    /* Write block(s) in polling mode */
#ifdef SDIO_STA_STBITERR
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001fe8:	b9f5      	cbnz	r5, 8002028 <HAL_SD_WriteBlocks+0xee>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE))
 8001fea:	045b      	lsls	r3, r3, #17
 8001fec:	d507      	bpl.n	8001ffe <HAL_SD_WriteBlocks+0xc4>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
        {
          SDIO_WriteFIFO(hsd->Instance, (tempbuff + count));
 8001fee:	1979      	adds	r1, r7, r5
 8001ff0:	6820      	ldr	r0, [r4, #0]
 8001ff2:	3504      	adds	r5, #4
 8001ff4:	f001 f9e2 	bl	80033bc <SDIO_WriteFIFO>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE))
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8001ff8:	2d20      	cmp	r5, #32
 8001ffa:	d1f8      	bne.n	8001fee <HAL_SD_WriteBlocks+0xb4>
        {
          SDIO_WriteFIFO(hsd->Instance, (tempbuff + count));
        }
        tempbuff += 8U;
 8001ffc:	3720      	adds	r7, #32
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8001ffe:	f1b8 0f00 	cmp.w	r8, #0
 8002002:	d10a      	bne.n	800201a <HAL_SD_WriteBlocks+0xe0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8002004:	6823      	ldr	r3, [r4, #0]
 8002006:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800200a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800200c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800200e:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002010:	2301      	movs	r3, #1
 8002012:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8002016:	2003      	movs	r0, #3
 8002018:	e045      	b.n	80020a6 <HAL_SD_WriteBlocks+0x16c>
          SDIO_WriteFIFO(hsd->Instance, (tempbuff + count));
        }
        tempbuff += 8U;
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 800201a:	f7fe f90b 	bl	8000234 <HAL_GetTick>
 800201e:	ebc9 0000 	rsb	r0, r9, r0
 8002022:	4580      	cmp	r8, r0
 8002024:	d8da      	bhi.n	8001fdc <HAL_SD_WriteBlocks+0xa2>
 8002026:	e7ed      	b.n	8002004 <HAL_SD_WriteBlocks+0xca>
        return HAL_TIMEOUT;
      }
    }
    
    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002028:	05dd      	lsls	r5, r3, #23
 800202a:	d50f      	bpl.n	800204c <HAL_SD_WriteBlocks+0x112>
 800202c:	2e01      	cmp	r6, #1
 800202e:	d90d      	bls.n	800204c <HAL_SD_WriteBlocks+0x112>
    { 
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002030:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002032:	2b03      	cmp	r3, #3
 8002034:	d00a      	beq.n	800204c <HAL_SD_WriteBlocks+0x112>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002036:	f001 fb07 	bl	8003648 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800203a:	b138      	cbz	r0, 800204c <HAL_SD_WriteBlocks+0x112>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 800203c:	6823      	ldr	r3, [r4, #0]
 800203e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002042:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002044:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002046:	4318      	orrs	r0, r3
 8002048:	63a0      	str	r0, [r4, #56]	; 0x38
 800204a:	e01f      	b.n	800208c <HAL_SD_WriteBlocks+0x152>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800204c:	6823      	ldr	r3, [r4, #0]
 800204e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002050:	0711      	lsls	r1, r2, #28
 8002052:	d506      	bpl.n	8002062 <HAL_SD_WriteBlocks+0x128>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002054:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002058:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800205a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800205c:	f043 0308 	orr.w	r3, r3, #8
 8002060:	e013      	b.n	800208a <HAL_SD_WriteBlocks+0x150>
      hsd->State = HAL_SD_STATE_READY;
      return HAL_ERROR;
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002062:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002064:	0792      	lsls	r2, r2, #30
 8002066:	d506      	bpl.n	8002076 <HAL_SD_WriteBlocks+0x13c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002068:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800206c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 800206e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002070:	f043 0302 	orr.w	r3, r3, #2
 8002074:	e009      	b.n	800208a <HAL_SD_WriteBlocks+0x150>
      hsd->State = HAL_SD_STATE_READY;
      return HAL_ERROR;
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8002076:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002078:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800207c:	f010 0010 	ands.w	r0, r0, #16
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002080:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
      hsd->State = HAL_SD_STATE_READY;
      return HAL_ERROR;
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8002082:	d007      	beq.n	8002094 <HAL_SD_WriteBlocks+0x15a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002084:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002086:	f043 0310 	orr.w	r3, r3, #16
 800208a:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800208c:	2001      	movs	r0, #1
 800208e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8002092:	e008      	b.n	80020a6 <HAL_SD_WriteBlocks+0x16c>
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
    
    hsd->State = HAL_SD_STATE_READY;
 8002094:	2301      	movs	r3, #1
 8002096:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    
    return HAL_OK;
 800209a:	e004      	b.n	80020a6 <HAL_SD_WriteBlocks+0x16c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800209c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800209e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80020a2:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 80020a4:	2001      	movs	r0, #1
  }
}
 80020a6:	b007      	add	sp, #28
 80020a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080020ac <HAL_SD_TxCpltCallback>:
 80020ac:	4770      	bx	lr

080020ae <HAL_SD_RxCpltCallback>:
 80020ae:	4770      	bx	lr

080020b0 <HAL_SD_ErrorCallback>:
 80020b0:	4770      	bx	lr

080020b2 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80020b2:	4770      	bx	lr

080020b4 <HAL_SD_GetCardCSD>:
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
  uint32_t tmp = 0U;
  
  /* Byte 0 */
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 80020b4:	6e43      	ldr	r3, [r0, #100]	; 0x64
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 80020b6:	0f9a      	lsrs	r2, r3, #30
 80020b8:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 80020ba:	f3c3 6283 	ubfx	r2, r3, #26, #4
  pCSD->Reserved1      = tmp & 0x03U;
 80020be:	f3c3 6301 	ubfx	r3, r3, #24, #2
  uint32_t tmp = 0U;
  
  /* Byte 0 */
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 80020c2:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 80020c4:	708b      	strb	r3, [r1, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0U] & 0x00FF0000U) >> 16U;
  pCSD->TAAC = (uint8_t)tmp;
 80020c6:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 80020ca:	70cb      	strb	r3, [r1, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0U] & 0x0000FF00U) >> 8U;
  pCSD->NSAC = (uint8_t)tmp;
 80020cc:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
 80020d0:	710b      	strb	r3, [r1, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0U] & 0x000000FFU;
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 80020d2:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 80020d6:	714b      	strb	r3, [r1, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 80020d8:	6e83      	ldr	r3, [r0, #104]	; 0x68
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 80020da:	0e1a      	lsrs	r2, r3, #24
 80020dc:	0112      	lsls	r2, r2, #4
 80020de:	80ca      	strh	r2, [r1, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 80020e0:	88ca      	ldrh	r2, [r1, #6]
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80020e2:	b530      	push	{r4, r5, lr}
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 80020e4:	b292      	uxth	r2, r2
 80020e6:	f3c3 5403 	ubfx	r4, r3, #20, #4
 80020ea:	4322      	orrs	r2, r4
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 80020ec:	f3c3 4303 	ubfx	r3, r3, #16, #4
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 80020f0:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 80020f2:	720b      	strb	r3, [r1, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 80020f4:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 80020f8:	09da      	lsrs	r2, r3, #7
 80020fa:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 80020fc:	f3c3 1280 	ubfx	r2, r3, #6, #1
 8002100:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 8002102:	f3c3 1240 	ubfx	r2, r3, #5, #1
 8002106:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 8002108:	f3c3 1200 	ubfx	r2, r3, #4, #1
 800210c:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 800210e:	2200      	movs	r2, #0
 8002110:	734a      	strb	r2, [r1, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8002112:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002114:	2a00      	cmp	r2, #0
 8002116:	d13b      	bne.n	8002190 <HAL_SD_GetCardCSD+0xdc>
  {
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 8002118:	029b      	lsls	r3, r3, #10
 800211a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800211e:	610b      	str	r3, [r1, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
    pCSD->DeviceSize |= (tmp) << 2U;
 8002120:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8002122:	690a      	ldr	r2, [r1, #16]
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 800212a:	4313      	orrs	r3, r2
 800212c:	610b      	str	r3, [r1, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 800212e:	690a      	ldr	r2, [r1, #16]
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
    pCSD->DeviceSize |= (tmp) << 2U;
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8002130:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 8002132:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8002136:	610a      	str	r2, [r1, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 8002138:	f3c3 62c2 	ubfx	r2, r3, #27, #3
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 800213c:	f3c3 6302 	ubfx	r3, r3, #24, #3
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 8002140:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 8002142:	754b      	strb	r3, [r1, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 8002144:	f8b0 306e 	ldrh.w	r3, [r0, #110]	; 0x6e
 8002148:	b2da      	uxtb	r2, r3
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 800214a:	005b      	lsls	r3, r3, #1
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 800214c:	0954      	lsrs	r4, r2, #5
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 800214e:	f003 0306 	and.w	r3, r3, #6
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 8002152:	f3c2 0282 	ubfx	r2, r2, #2, #3
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 8002156:	758c      	strb	r4, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 8002158:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 800215a:	760b      	strb	r3, [r1, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 800215c:	7e0a      	ldrb	r2, [r1, #24]
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 800215e:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 8002162:	ea42 12d3 	orr.w	r2, r2, r3, lsr #7
 8002166:	760a      	strb	r2, [r1, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002168:	690a      	ldr	r2, [r1, #16]
 800216a:	1c54      	adds	r4, r2, #1
 800216c:	6544      	str	r4, [r0, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 800216e:	7e0a      	ldrb	r2, [r1, #24]
 8002170:	2501      	movs	r5, #1
 8002172:	3202      	adds	r2, #2
 8002174:	fa05 f202 	lsl.w	r2, r5, r2
 8002178:	4362      	muls	r2, r4
 800217a:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 800217c:	7a0c      	ldrb	r4, [r1, #8]
 800217e:	fa05 f404 	lsl.w	r4, r5, r4
 8002182:	6584      	str	r4, [r0, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 8002184:	0a64      	lsrs	r4, r4, #9
 8002186:	4362      	muls	r2, r4
 8002188:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800218a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800218e:	e01c      	b.n	80021ca <HAL_SD_GetCardCSD+0x116>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002190:	2a01      	cmp	r2, #1
 8002192:	d16d      	bne.n	8002270 <HAL_SD_GetCardCSD+0x1bc>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 8002194:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8002196:	041b      	lsls	r3, r3, #16
 8002198:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800219c:	610b      	str	r3, [r1, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 800219e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    
    pCSD->DeviceSize |= (tmp << 8U);
 80021a0:	690a      	ldr	r2, [r1, #16]
 80021a2:	0e1c      	lsrs	r4, r3, #24
 80021a4:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 80021a8:	610a      	str	r2, [r1, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
    
    pCSD->DeviceSize |= (tmp);
 80021aa:	690a      	ldr	r2, [r1, #16]
 80021ac:	f3c3 4407 	ubfx	r4, r3, #16, #8
 80021b0:	4322      	orrs	r2, r4
 80021b2:	610a      	str	r2, [r1, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 80021b4:	690a      	ldr	r2, [r1, #16]
 80021b6:	0292      	lsls	r2, r2, #10
 80021b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021bc:	6542      	str	r2, [r0, #84]	; 0x54
 80021be:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 80021c0:	f44f 7200 	mov.w	r2, #512	; 0x200
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
    
    pCSD->DeviceSize |= (tmp);
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 80021c4:	f3c3 2307 	ubfx	r3, r3, #8, #8
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 80021c8:	6582      	str	r2, [r0, #88]	; 0x58
 80021ca:	6602      	str	r2, [r0, #96]	; 0x60
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
    hsd->State = HAL_SD_STATE_READY;
    return HAL_ERROR;
  }
  
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 80021cc:	f3c3 1280 	ubfx	r2, r3, #6, #1
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	f003 037e 	and.w	r3, r3, #126	; 0x7e
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
    hsd->State = HAL_SD_STATE_READY;
    return HAL_ERROR;
  }
  
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 80021d6:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 80021d8:	768b      	strb	r3, [r1, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 80021da:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 80021dc:	7e8c      	ldrb	r4, [r1, #26]
 80021de:	f3c3 12c0 	ubfx	r2, r3, #7, #1
 80021e2:	4322      	orrs	r2, r4
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 80021e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 80021e8:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 80021ea:	76cb      	strb	r3, [r1, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 80021ec:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 80021ee:	0fda      	lsrs	r2, r3, #31
 80021f0:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 80021f2:	f3c3 7241 	ubfx	r2, r3, #29, #2
 80021f6:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 80021f8:	f3c3 6282 	ubfx	r2, r3, #26, #3
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 80021fc:	0d9b      	lsrs	r3, r3, #22
 80021fe:	f003 030c 	and.w	r3, r3, #12
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 8002202:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 8002204:	77cb      	strb	r3, [r1, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
 8002206:	f8b0 2072 	ldrh.w	r2, [r0, #114]	; 0x72
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 800220a:	7fcc      	ldrb	r4, [r1, #31]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
 800220c:	b2d3      	uxtb	r3, r2
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 800220e:	ea44 1493 	orr.w	r4, r4, r3, lsr #6
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 8002212:	f3c3 1340 	ubfx	r3, r3, #5, #1
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 8002216:	77cc      	strb	r4, [r1, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
  pCSD->Reserved3           = 0U;
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 8002218:	f002 0201 	and.w	r2, r2, #1
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 800221c:	f881 3020 	strb.w	r3, [r1, #32]
  pCSD->Reserved3           = 0U;
 8002220:	2300      	movs	r3, #0
 8002222:	f881 3021 	strb.w	r3, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 8002226:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
 800222a:	6f04      	ldr	r4, [r0, #112]	; 0x70
 800222c:	0a24      	lsrs	r4, r4, #8
 800222e:	b2e2      	uxtb	r2, r4
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 8002230:	09d5      	lsrs	r5, r2, #7
 8002232:	f881 5023 	strb.w	r5, [r1, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 8002236:	f3c2 1580 	ubfx	r5, r2, #6, #1
 800223a:	f881 5024 	strb.w	r5, [r1, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 800223e:	f3c2 1540 	ubfx	r5, r2, #5, #1
 8002242:	f881 5025 	strb.w	r5, [r1, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
  pCSD->ECC              = (tmp & 0x03U);
 8002246:	f004 0403 	and.w	r4, r4, #3
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 800224a:	f3c2 1500 	ubfx	r5, r2, #4, #1
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 800224e:	f3c2 0281 	ubfx	r2, r2, #2, #2
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 8002252:	f881 5026 	strb.w	r5, [r1, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 8002256:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 800225a:	f881 4028 	strb.w	r4, [r1, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 800225e:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8002260:	f3c2 0246 	ubfx	r2, r2, #1, #7
 8002264:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 8002268:	2201      	movs	r2, #1
 800226a:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
 800226e:	e00a      	b.n	8002286 <HAL_SD_GetCardCSD+0x1d2>
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 8002270:	6803      	ldr	r3, [r0, #0]
 8002272:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002276:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002278:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800227a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800227e:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002280:	2301      	movs	r3, #1
 8002282:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
  pCSD->Reserved4 = 1U;
  
  return HAL_OK;
 8002286:	4618      	mov	r0, r3
}
 8002288:	bd30      	pop	{r4, r5, pc}
	...

0800228c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800228c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800228e:	b099      	sub	sp, #100	; 0x64
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002290:	2500      	movs	r5, #0
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
  Init.BusWide             = SDIO_BUS_WIDE_1B;
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002292:	2376      	movs	r3, #118	; 0x76
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002294:	950a      	str	r5, [sp, #40]	; 0x28
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002296:	950b      	str	r5, [sp, #44]	; 0x2c
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002298:	930c      	str	r3, [sp, #48]	; 0x30

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 800229a:	ab0a      	add	r3, sp, #40	; 0x28
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800229c:	4604      	mov	r4, r0
  Init.BusWide             = SDIO_BUS_WIDE_1B;
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 800229e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80022a2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
{
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80022a6:	9507      	str	r5, [sp, #28]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80022a8:	9508      	str	r5, [sp, #32]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80022aa:	9509      	str	r5, [sp, #36]	; 0x24

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd); 
 80022ac:	4f6b      	ldr	r7, [pc, #428]	; (800245c <HAL_SD_InitCard+0x1d0>)
  Init.BusWide             = SDIO_BUS_WIDE_1B;
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 80022ae:	6820      	ldr	r0, [r4, #0]
 80022b0:	ab07      	add	r3, sp, #28
 80022b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022b4:	f001 f864 	bl	8003380 <SDIO_Init>
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
  
  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80022b8:	2601      	movs	r6, #1

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd); 
 80022ba:	603d      	str	r5, [r7, #0]
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
 80022bc:	6820      	ldr	r0, [r4, #0]
 80022be:	f001 f882 	bl	80033c6 <SDIO_PowerState_ON>
  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
  
  /* Required power up waiting time before starting the SD initialization 
  sequence */
  HAL_Delay(2U);
 80022c2:	2002      	movs	r0, #2
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
  
  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80022c4:	603e      	str	r6, [r7, #0]
  
  /* Required power up waiting time before starting the SD initialization 
  sequence */
  HAL_Delay(2U);
 80022c6:	f7fd ffbb 	bl	8000240 <HAL_Delay>
  __IO uint32_t count = 0U;
  uint32_t response = 0U, validvoltage = 0U;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80022ca:	6820      	ldr	r0, [r4, #0]
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
  __IO uint32_t count = 0U;
 80022cc:	9506      	str	r5, [sp, #24]
  uint32_t response = 0U, validvoltage = 0U;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80022ce:	f001 f9ed 	bl	80036ac <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 80022d2:	4605      	mov	r5, r0
 80022d4:	2800      	cmp	r0, #0
 80022d6:	f040 80b8 	bne.w	800244a <HAL_SD_InitCard+0x1be>
  {
    return errorstate;
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80022da:	6820      	ldr	r0, [r4, #0]
 80022dc:	f001 fa0e 	bl	80036fc <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 80022e0:	b300      	cbz	r0, 8002324 <HAL_SD_InitCard+0x98>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80022e2:	64a5      	str	r5, [r4, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80022e4:	f64f 75ff 	movw	r5, #65535	; 0xffff
 80022e8:	9b06      	ldr	r3, [sp, #24]
 80022ea:	1c5a      	adds	r2, r3, #1
 80022ec:	42ab      	cmp	r3, r5
 80022ee:	9206      	str	r2, [sp, #24]
 80022f0:	d102      	bne.n	80022f8 <HAL_SD_InitCard+0x6c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80022f2:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80022f6:	e0a8      	b.n	800244a <HAL_SD_InitCard+0x1be>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 80022f8:	2100      	movs	r1, #0
 80022fa:	6820      	ldr	r0, [r4, #0]
 80022fc:	f001 fa36 	bl	800376c <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8002300:	4601      	mov	r1, r0
 8002302:	b110      	cbz	r0, 800230a <HAL_SD_InitCard+0x7e>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002304:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002308:	e09f      	b.n	800244a <HAL_SD_InitCard+0x1be>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 800230a:	6820      	ldr	r0, [r4, #0]
 800230c:	f001 fa46 	bl	800379c <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8002310:	4601      	mov	r1, r0
 8002312:	2800      	cmp	r0, #0
 8002314:	d1f6      	bne.n	8002304 <HAL_SD_InitCard+0x78>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002316:	6820      	ldr	r0, [r4, #0]
 8002318:	f001 f870 	bl	80033fc <SDIO_GetResponse>
  if(errorstate != HAL_SD_ERROR_NONE)
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 800231c:	2800      	cmp	r0, #0
 800231e:	dae3      	bge.n	80022e8 <HAL_SD_InitCard+0x5c>
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 8002320:	2300      	movs	r3, #0
 8002322:	e01d      	b.n	8002360 <HAL_SD_InitCard+0xd4>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8002324:	64a6      	str	r6, [r4, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8002326:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800232a:	9b06      	ldr	r3, [sp, #24]
 800232c:	1c5a      	adds	r2, r3, #1
 800232e:	42ab      	cmp	r3, r5
 8002330:	9206      	str	r2, [sp, #24]
 8002332:	d0de      	beq.n	80022f2 <HAL_SD_InitCard+0x66>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8002334:	2100      	movs	r1, #0
 8002336:	6820      	ldr	r0, [r4, #0]
 8002338:	f001 fa18 	bl	800376c <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 800233c:	2800      	cmp	r0, #0
 800233e:	f040 8084 	bne.w	800244a <HAL_SD_InitCard+0x1be>
      {
        return errorstate;
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8002342:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002346:	6820      	ldr	r0, [r4, #0]
 8002348:	f001 fa28 	bl	800379c <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 800234c:	2800      	cmp	r0, #0
 800234e:	d17c      	bne.n	800244a <HAL_SD_InitCard+0x1be>
      {
        return errorstate;
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002350:	4601      	mov	r1, r0
 8002352:	6820      	ldr	r0, [r4, #0]
 8002354:	f001 f852 	bl	80033fc <SDIO_GetResponse>
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 8002358:	0fc3      	lsrs	r3, r0, #31
 800235a:	d0e6      	beq.n	800232a <HAL_SD_InitCard+0x9e>
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800235c:	0042      	lsls	r2, r0, #1
 800235e:	d5df      	bpl.n	8002320 <HAL_SD_InitCard+0x94>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8002360:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  uint16_t sd_rca = 1U;
  
  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 8002362:	6820      	ldr	r0, [r4, #0]
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  uint16_t sd_rca = 1U;
 8002364:	2301      	movs	r3, #1
 8002366:	f8ad 3016 	strh.w	r3, [sp, #22]
  
  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 800236a:	f001 f830 	bl	80033ce <SDIO_GetPowerState>
 800236e:	2800      	cmp	r0, #0
 8002370:	d065      	beq.n	800243e <HAL_SD_InitCard+0x1b2>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8002372:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002374:	2b03      	cmp	r3, #3
 8002376:	d019      	beq.n	80023ac <HAL_SD_InitCard+0x120>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8002378:	6820      	ldr	r0, [r4, #0]
 800237a:	f001 fa40 	bl	80037fe <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 800237e:	2800      	cmp	r0, #0
 8002380:	d160      	bne.n	8002444 <HAL_SD_InitCard+0x1b8>
      return errorstate;
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002382:	4601      	mov	r1, r0
 8002384:	6820      	ldr	r0, [r4, #0]
 8002386:	f001 f839 	bl	80033fc <SDIO_GetResponse>
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800238a:	2104      	movs	r1, #4
      return errorstate;
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800238c:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800238e:	6820      	ldr	r0, [r4, #0]
 8002390:	f001 f834 	bl	80033fc <SDIO_GetResponse>
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002394:	2108      	movs	r1, #8
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002396:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002398:	6820      	ldr	r0, [r4, #0]
 800239a:	f001 f82f 	bl	80033fc <SDIO_GetResponse>
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800239e:	210c      	movs	r1, #12
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80023a0:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80023a2:	6820      	ldr	r0, [r4, #0]
 80023a4:	f001 f82a 	bl	80033fc <SDIO_GetResponse>
 80023a8:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80023ac:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80023ae:	2b03      	cmp	r3, #3
 80023b0:	d103      	bne.n	80023ba <HAL_SD_InitCard+0x12e>
    if(errorstate != HAL_SD_ERROR_NONE)
    {
      return errorstate;
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80023b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80023b4:	2b03      	cmp	r3, #3
 80023b6:	d108      	bne.n	80023ca <HAL_SD_InitCard+0x13e>
 80023b8:	e024      	b.n	8002404 <HAL_SD_InitCard+0x178>
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80023ba:	f10d 0116 	add.w	r1, sp, #22
 80023be:	6820      	ldr	r0, [r4, #0]
 80023c0:	f001 fa48 	bl	8003854 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 80023c4:	2800      	cmp	r0, #0
 80023c6:	d0f4      	beq.n	80023b2 <HAL_SD_InitCard+0x126>
 80023c8:	e03c      	b.n	8002444 <HAL_SD_InitCard+0x1b8>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80023ca:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80023ce:	6521      	str	r1, [r4, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80023d0:	6820      	ldr	r0, [r4, #0]
 80023d2:	0409      	lsls	r1, r1, #16
 80023d4:	f001 fa28 	bl	8003828 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 80023d8:	2800      	cmp	r0, #0
 80023da:	d133      	bne.n	8002444 <HAL_SD_InitCard+0x1b8>
      return errorstate;
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80023dc:	4601      	mov	r1, r0
 80023de:	6820      	ldr	r0, [r4, #0]
 80023e0:	f001 f80c 	bl	80033fc <SDIO_GetResponse>
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80023e4:	2104      	movs	r1, #4
      return errorstate;
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80023e6:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80023e8:	6820      	ldr	r0, [r4, #0]
 80023ea:	f001 f807 	bl	80033fc <SDIO_GetResponse>
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80023ee:	2108      	movs	r1, #8
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80023f0:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80023f2:	6820      	ldr	r0, [r4, #0]
 80023f4:	f001 f802 	bl	80033fc <SDIO_GetResponse>
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80023f8:	210c      	movs	r1, #12
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80023fa:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80023fc:	6820      	ldr	r0, [r4, #0]
 80023fe:	f000 fffd 	bl	80033fc <SDIO_GetResponse>
 8002402:	6720      	str	r0, [r4, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002404:	2104      	movs	r1, #4
 8002406:	6820      	ldr	r0, [r4, #0]
 8002408:	f000 fff8 	bl	80033fc <SDIO_GetResponse>
 800240c:	0d00      	lsrs	r0, r0, #20
 800240e:	64e0      	str	r0, [r4, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 8002410:	a90d      	add	r1, sp, #52	; 0x34
 8002412:	4620      	mov	r0, r4
 8002414:	f7ff fe4e 	bl	80020b4 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002418:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800241a:	6820      	ldr	r0, [r4, #0]
 800241c:	0412      	lsls	r2, r2, #16
 800241e:	2300      	movs	r3, #0
 8002420:	f001 f92c 	bl	800367c <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002424:	b970      	cbnz	r0, 8002444 <HAL_SD_InitCard+0x1b8>
  {
    return errorstate;
  }

  /* Configure SDIO peripheral interface */     
  SDIO_Init(hsd->Instance, hsd->Init);
 8002426:	f104 0310 	add.w	r3, r4, #16
 800242a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800242e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8002432:	1d23      	adds	r3, r4, #4
 8002434:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002436:	6820      	ldr	r0, [r4, #0]
 8002438:	f000 ffa2 	bl	8003380 <SDIO_Init>
 800243c:	e003      	b.n	8002446 <HAL_SD_InitCard+0x1ba>
  
  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800243e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002442:	e002      	b.n	800244a <HAL_SD_InitCard+0x1be>
    return HAL_ERROR;
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
  if(errorstate != HAL_SD_ERROR_NONE)
 8002444:	b908      	cbnz	r0, 800244a <HAL_SD_InitCard+0x1be>
    hsd->State = HAL_SD_STATE_READY;
    hsd->ErrorCode |= errorstate;
    return HAL_ERROR;
  }

  return HAL_OK;
 8002446:	2000      	movs	r0, #0
 8002448:	e006      	b.n	8002458 <HAL_SD_InitCard+0x1cc>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
  if(errorstate != HAL_SD_ERROR_NONE)
  {
    hsd->State = HAL_SD_STATE_READY;
 800244a:	2301      	movs	r3, #1
 800244c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002450:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002452:	4301      	orrs	r1, r0
 8002454:	63a1      	str	r1, [r4, #56]	; 0x38
    return HAL_ERROR;
 8002456:	4618      	mov	r0, r3
    hsd->ErrorCode |= errorstate;
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8002458:	b019      	add	sp, #100	; 0x64
 800245a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800245c:	422580a0 	.word	0x422580a0

08002460 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002460:	b510      	push	{r4, lr}
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002462:	4604      	mov	r4, r0
 8002464:	b1a0      	cbz	r0, 8002490 <HAL_SD_Init+0x30>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002466:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800246a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800246e:	b913      	cbnz	r3, 8002476 <HAL_SD_Init+0x16>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002470:	7702      	strb	r2, [r0, #28]
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002472:	f002 ff01 	bl	8005278 <HAL_SD_MspInit>
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002476:	2303      	movs	r3, #3
 8002478:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 800247c:	4620      	mov	r0, r4
 800247e:	f7ff ff05 	bl	800228c <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8002482:	2000      	movs	r0, #0
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002484:	2301      	movs	r3, #1

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8002486:	63a0      	str	r0, [r4, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002488:	6320      	str	r0, [r4, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800248a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

  return HAL_OK;
 800248e:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
  /* Check the SD handle allocation */
  if(hsd == NULL)
  {
    return HAL_ERROR;
 8002490:	2001      	movs	r0, #1
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;

  return HAL_OK;
}
 8002492:	bd10      	pop	{r4, pc}

08002494 <HAL_SD_GetCardInfo>:
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002494:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002496:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002498:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800249a:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800249c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800249e:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80024a0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80024a2:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80024a4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80024a6:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80024a8:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80024aa:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80024ac:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80024ae:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80024b0:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80024b2:	61cb      	str	r3, [r1, #28]
  
  return HAL_OK;
}
 80024b4:	2000      	movs	r0, #0
 80024b6:	4770      	bx	lr

080024b8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80024b8:	b570      	push	{r4, r5, r6, lr}
  
  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 80024ba:	2303      	movs	r3, #3
 80024bc:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80024c0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80024c2:	2b03      	cmp	r3, #3
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80024c4:	b08a      	sub	sp, #40	; 0x28
 80024c6:	4604      	mov	r4, r0
 80024c8:	460d      	mov	r5, r1
  assert_param(IS_SDIO_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80024ca:	d047      	beq.n	800255c <HAL_SD_ConfigWideBusOperation+0xa4>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80024cc:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80024d0:	d044      	beq.n	800255c <HAL_SD_ConfigWideBusOperation+0xa4>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80024d2:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80024d6:	d119      	bne.n	800250c <HAL_SD_ConfigWideBusOperation+0x54>
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
  uint32_t scr[2U] = {0U, 0U};
 80024d8:	2100      	movs	r1, #0
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80024da:	6800      	ldr	r0, [r0, #0]
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
  uint32_t scr[2U] = {0U, 0U};
 80024dc:	9104      	str	r1, [sp, #16]
 80024de:	9105      	str	r1, [sp, #20]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80024e0:	f000 ff8c 	bl	80033fc <SDIO_GetResponse>
 80024e4:	0180      	lsls	r0, r0, #6
 80024e6:	d40f      	bmi.n	8002508 <HAL_SD_ConfigWideBusOperation+0x50>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80024e8:	a904      	add	r1, sp, #16
 80024ea:	4620      	mov	r0, r4
 80024ec:	f7ff fbe2 	bl	8001cb4 <SD_FindSCR>
  if(errorstate != HAL_OK)
 80024f0:	bb60      	cbnz	r0, 800254c <HAL_SD_ConfigWideBusOperation+0x94>
  {
    return errorstate;
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80024f2:	9b05      	ldr	r3, [sp, #20]
 80024f4:	0359      	lsls	r1, r3, #13
 80024f6:	d527      	bpl.n	8002548 <HAL_SD_ConfigWideBusOperation+0x90>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80024f8:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80024fa:	6820      	ldr	r0, [r4, #0]
 80024fc:	0409      	lsls	r1, r1, #16
 80024fe:	f001 f935 	bl	800376c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 8002502:	bb18      	cbnz	r0, 800254c <HAL_SD_ConfigWideBusOperation+0x94>
    {
      return errorstate;
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8002504:	2102      	movs	r1, #2
 8002506:	e018      	b.n	800253a <HAL_SD_ConfigWideBusOperation+0x82>
  uint32_t scr[2U] = {0U, 0U};
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002508:	4628      	mov	r0, r5
 800250a:	e01f      	b.n	800254c <HAL_SD_ConfigWideBusOperation+0x94>
    {
      errorstate = SD_WideBus_Enable(hsd);
      
      hsd->ErrorCode |= errorstate;
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800250c:	bb11      	cbnz	r1, 8002554 <HAL_SD_ConfigWideBusOperation+0x9c>
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
  uint32_t scr[2U] = {0U, 0U};
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800250e:	6800      	ldr	r0, [r0, #0]
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
  uint32_t scr[2U] = {0U, 0U};
 8002510:	9104      	str	r1, [sp, #16]
 8002512:	9105      	str	r1, [sp, #20]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002514:	f000 ff72 	bl	80033fc <SDIO_GetResponse>
 8002518:	0182      	lsls	r2, r0, #6
 800251a:	d412      	bmi.n	8002542 <HAL_SD_ConfigWideBusOperation+0x8a>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800251c:	a904      	add	r1, sp, #16
 800251e:	4620      	mov	r0, r4
 8002520:	f7ff fbc8 	bl	8001cb4 <SD_FindSCR>
  if(errorstate != HAL_OK)
 8002524:	b990      	cbnz	r0, 800254c <HAL_SD_ConfigWideBusOperation+0x94>
  {
    return errorstate;
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002526:	9b05      	ldr	r3, [sp, #20]
 8002528:	03db      	lsls	r3, r3, #15
 800252a:	d50d      	bpl.n	8002548 <HAL_SD_ConfigWideBusOperation+0x90>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800252c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800252e:	6820      	ldr	r0, [r4, #0]
 8002530:	0409      	lsls	r1, r1, #16
 8002532:	f001 f91b 	bl	800376c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 8002536:	b948      	cbnz	r0, 800254c <HAL_SD_ConfigWideBusOperation+0x94>
    {
      return errorstate;
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8002538:	4629      	mov	r1, r5
 800253a:	6820      	ldr	r0, [r4, #0]
 800253c:	f001 fa0e 	bl	800395c <SDMMC_CmdBusWidth>
 8002540:	e004      	b.n	800254c <HAL_SD_ConfigWideBusOperation+0x94>
  uint32_t scr[2U] = {0U, 0U};
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002542:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002546:	e001      	b.n	800254c <HAL_SD_ConfigWideBusOperation+0x94>
    
    return HAL_SD_ERROR_NONE;
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002548:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
    {
      errorstate = SD_WideBus_Disable(hsd);
      
      hsd->ErrorCode |= errorstate;
 800254c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800254e:	4318      	orrs	r0, r3
 8002550:	63a0      	str	r0, [r4, #56]	; 0x38
 8002552:	e007      	b.n	8002564 <HAL_SD_ConfigWideBusOperation+0xac>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002554:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002556:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800255a:	e002      	b.n	8002562 <HAL_SD_ConfigWideBusOperation+0xaa>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800255c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800255e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002562:	63a3      	str	r3, [r4, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002564:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8002566:	b13e      	cbz	r6, 8002578 <HAL_SD_ConfigWideBusOperation+0xc0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002568:	6823      	ldr	r3, [r4, #0]
 800256a:	f240 52ff 	movw	r2, #1535	; 0x5ff
    hsd->State = HAL_SD_STATE_READY;
 800256e:	2001      	movs	r0, #1
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002570:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002572:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    return HAL_ERROR;
 8002576:	e018      	b.n	80025aa <HAL_SD_ConfigWideBusOperation+0xf2>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8002578:	6863      	ldr	r3, [r4, #4]
 800257a:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800257c:	68a3      	ldr	r3, [r4, #8]
 800257e:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8002580:	68e3      	ldr	r3, [r4, #12]
 8002582:	9306      	str	r3, [sp, #24]
    Init.BusWide             = WideMode;
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8002584:	6963      	ldr	r3, [r4, #20]
 8002586:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8002588:	69a3      	ldr	r3, [r4, #24]
 800258a:	9309      	str	r3, [sp, #36]	; 0x24
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
    Init.ClockBypass         = hsd->Init.ClockBypass;
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
    Init.BusWide             = WideMode;
 800258c:	9507      	str	r5, [sp, #28]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
    Init.ClockDiv            = hsd->Init.ClockDiv;
    SDIO_Init(hsd->Instance, Init);
 800258e:	ab0a      	add	r3, sp, #40	; 0x28
 8002590:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8002594:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8002598:	ab04      	add	r3, sp, #16
 800259a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800259c:	6820      	ldr	r0, [r4, #0]
 800259e:	f000 feef 	bl	8003380 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80025a2:	2301      	movs	r3, #1
 80025a4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  
  return HAL_OK;
 80025a8:	4630      	mov	r0, r6
}
 80025aa:	b00a      	add	sp, #40	; 0x28
 80025ac:	bd70      	pop	{r4, r5, r6, pc}

080025ae <HAL_SD_GetCardState>:
  {
    return HAL_SD_ERROR_PARAM;
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80025ae:	6d01      	ldr	r1, [r0, #80]	; 0x50
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80025b0:	b510      	push	{r4, lr}
  {
    return HAL_SD_ERROR_PARAM;
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80025b2:	0409      	lsls	r1, r1, #16
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80025b4:	4604      	mov	r4, r0
  {
    return HAL_SD_ERROR_PARAM;
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80025b6:	6800      	ldr	r0, [r0, #0]
 80025b8:	f001 f9a0 	bl	80038fc <SDMMC_CmdSendStatus>
  if(errorstate != HAL_OK)
 80025bc:	4601      	mov	r1, r0
 80025be:	b918      	cbnz	r0, 80025c8 <HAL_SD_GetCardState+0x1a>
  {
    return errorstate;
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80025c0:	6820      	ldr	r0, [r4, #0]
 80025c2:	f000 ff1b 	bl	80033fc <SDIO_GetResponse>
 80025c6:	e003      	b.n	80025d0 <HAL_SD_GetCardState+0x22>
  uint32_t resp1 = 0;
  
  errorstate = SD_SendStatus(hsd, &resp1);
  if(errorstate != HAL_OK)
  {
    hsd->ErrorCode |= errorstate;
 80025c8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80025ca:	4301      	orrs	r1, r0
 80025cc:	63a1      	str	r1, [r4, #56]	; 0x38
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  uint32_t resp1 = 0;
 80025ce:	2000      	movs	r0, #0
    hsd->ErrorCode |= errorstate;
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9U) & 0x0FU);
  
  return cardstate;
 80025d0:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 80025d4:	bd10      	pop	{r4, pc}

080025d6 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback 
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)   
{
 80025d6:	b538      	push	{r3, r4, r5, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80025d8:	6b84      	ldr	r4, [r0, #56]	; 0x38
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmatx != NULL)
 80025da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025dc:	b10b      	cbz	r3, 80025e2 <SD_DMATxAbort+0xc>
  {
    hsd->hdmatx = NULL;
 80025de:	2300      	movs	r3, #0
 80025e0:	6423      	str	r3, [r4, #64]	; 0x40
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmarx == NULL)
 80025e2:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80025e4:	b9c5      	cbnz	r5, 8002618 <SD_DMATxAbort+0x42>
  {
    CardState = HAL_SD_GetCardState(hsd);
 80025e6:	4620      	mov	r0, r4
 80025e8:	f7ff ffe1 	bl	80025ae <HAL_SD_GetCardState>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
    hsd->State = HAL_SD_STATE_READY;
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80025ec:	3805      	subs	r0, #5
  /* All DMA channels are aborted */
  if(hsd->hdmarx == NULL)
  {
    CardState = HAL_SD_GetCardState(hsd);
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
    hsd->State = HAL_SD_STATE_READY;
 80025ee:	2301      	movs	r3, #1
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80025f0:	b2c0      	uxtb	r0, r0
 80025f2:	4298      	cmp	r0, r3
  
  /* All DMA channels are aborted */
  if(hsd->hdmarx == NULL)
  {
    CardState = HAL_SD_GetCardState(hsd);
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80025f4:	63a5      	str	r5, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80025f6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80025fa:	d80d      	bhi.n	8002618 <SD_DMATxAbort+0x42>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80025fc:	6820      	ldr	r0, [r4, #0]
 80025fe:	f001 f823 	bl	8003648 <SDMMC_CmdStopTransfer>
 8002602:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002604:	4318      	orrs	r0, r3
 8002606:	63a0      	str	r0, [r4, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002608:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      {
        HAL_SD_AbortCallback(hsd);
 800260a:	4620      	mov	r0, r4
    hsd->State = HAL_SD_STATE_READY;
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800260c:	b113      	cbz	r3, 8002614 <SD_DMATxAbort+0x3e>
      {
        HAL_SD_AbortCallback(hsd);
 800260e:	f7ff fd50 	bl	80020b2 <HAL_SD_AbortCallback>
 8002612:	bd38      	pop	{r3, r4, r5, pc}
      }
      else
      {
        HAL_SD_ErrorCallback(hsd);
 8002614:	f7ff fd4c 	bl	80020b0 <HAL_SD_ErrorCallback>
 8002618:	bd38      	pop	{r3, r4, r5, pc}

0800261a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback 
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)   
{
 800261a:	b538      	push	{r3, r4, r5, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800261c:	6b84      	ldr	r4, [r0, #56]	; 0x38
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmarx != NULL)
 800261e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002620:	b10b      	cbz	r3, 8002626 <SD_DMARxAbort+0xc>
  {
    hsd->hdmarx = NULL;
 8002622:	2300      	movs	r3, #0
 8002624:	63e3      	str	r3, [r4, #60]	; 0x3c
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmatx == NULL)
 8002626:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8002628:	b9c5      	cbnz	r5, 800265c <SD_DMARxAbort+0x42>
  {
    CardState = HAL_SD_GetCardState(hsd);
 800262a:	4620      	mov	r0, r4
 800262c:	f7ff ffbf 	bl	80025ae <HAL_SD_GetCardState>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
    hsd->State = HAL_SD_STATE_READY;
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002630:	3805      	subs	r0, #5
  /* All DMA channels are aborted */
  if(hsd->hdmatx == NULL)
  {
    CardState = HAL_SD_GetCardState(hsd);
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
    hsd->State = HAL_SD_STATE_READY;
 8002632:	2301      	movs	r3, #1
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002634:	b2c0      	uxtb	r0, r0
 8002636:	4298      	cmp	r0, r3
  
  /* All DMA channels are aborted */
  if(hsd->hdmatx == NULL)
  {
    CardState = HAL_SD_GetCardState(hsd);
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002638:	63a5      	str	r5, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800263a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800263e:	d80d      	bhi.n	800265c <SD_DMARxAbort+0x42>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002640:	6820      	ldr	r0, [r4, #0]
 8002642:	f001 f801 	bl	8003648 <SDMMC_CmdStopTransfer>
 8002646:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002648:	4318      	orrs	r0, r3
 800264a:	63a0      	str	r0, [r4, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800264c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      {
        HAL_SD_AbortCallback(hsd);
 800264e:	4620      	mov	r0, r4
    hsd->State = HAL_SD_STATE_READY;
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002650:	b113      	cbz	r3, 8002658 <SD_DMARxAbort+0x3e>
      {
        HAL_SD_AbortCallback(hsd);
 8002652:	f7ff fd2e 	bl	80020b2 <HAL_SD_AbortCallback>
 8002656:	bd38      	pop	{r3, r4, r5, pc}
      }
      else
      {
        HAL_SD_ErrorCallback(hsd);
 8002658:	f7ff fd2a 	bl	80020b0 <HAL_SD_ErrorCallback>
 800265c:	bd38      	pop	{r3, r4, r5, pc}
	...

08002660 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8002660:	b570      	push	{r4, r5, r6, lr}
 8002662:	4604      	mov	r4, r0
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  
  /* Check for SDIO interrupt flags */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DATAEND) != RESET)
 8002664:	6800      	ldr	r0, [r0, #0]
 8002666:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8002668:	f415 7580 	ands.w	r5, r5, #256	; 0x100
 800266c:	d04f      	beq.n	800270e <HAL_SD_IRQHandler+0xae>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND); 
 800266e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002672:	6383      	str	r3, [r0, #56]	; 0x38
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002674:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002676:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800267a:	f023 0302 	bic.w	r3, r3, #2
 800267e:	63c3      	str	r3, [r0, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
#endif
    
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8002680:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002682:	f013 0f08 	tst.w	r3, #8
    {
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 8002686:	6b23      	ldr	r3, [r4, #48]	; 0x30
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
#endif
    
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8002688:	d01e      	beq.n	80026c8 <HAL_SD_IRQHandler+0x68>
    {
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 800268a:	0799      	lsls	r1, r3, #30
 800268c:	d402      	bmi.n	8002694 <HAL_SD_IRQHandler+0x34>
 800268e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002690:	069a      	lsls	r2, r3, #26
 8002692:	d508      	bpl.n	80026a6 <HAL_SD_IRQHandler+0x46>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002694:	f000 ffd8 	bl	8003648 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8002698:	b128      	cbz	r0, 80026a6 <HAL_SD_IRQHandler+0x46>
        {
          hsd->ErrorCode |= errorstate;
 800269a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800269c:	4318      	orrs	r0, r3
 800269e:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80026a0:	4620      	mov	r0, r4
 80026a2:	f7ff fd05 	bl	80020b0 <HAL_SD_ErrorCallback>
        }
      }
      
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80026a6:	6823      	ldr	r3, [r4, #0]
 80026a8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80026ac:	639a      	str	r2, [r3, #56]	; 0x38
      
      hsd->State = HAL_SD_STATE_READY;
 80026ae:	2301      	movs	r3, #1
 80026b0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 80026b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80026b6:	07db      	lsls	r3, r3, #31
      {
        HAL_SD_RxCpltCallback(hsd);
 80026b8:	4620      	mov	r0, r4
      
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
      
      hsd->State = HAL_SD_STATE_READY;
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 80026ba:	d402      	bmi.n	80026c2 <HAL_SD_IRQHandler+0x62>
 80026bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80026be:	079e      	lsls	r6, r3, #30
 80026c0:	d522      	bpl.n	8002708 <HAL_SD_IRQHandler+0xa8>
      {
        HAL_SD_RxCpltCallback(hsd);
 80026c2:	f7ff fcf4 	bl	80020ae <HAL_SD_RxCpltCallback>
 80026c6:	bd70      	pop	{r4, r5, r6, pc}
      else
      {
        HAL_SD_TxCpltCallback(hsd);
      }
    }
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 80026c8:	061d      	lsls	r5, r3, #24
 80026ca:	f140 80a5 	bpl.w	8002818 <HAL_SD_IRQHandler+0x1b8>
    {
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 80026ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80026d0:	0699      	lsls	r1, r3, #26
 80026d2:	d508      	bpl.n	80026e6 <HAL_SD_IRQHandler+0x86>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80026d4:	f000 ffb8 	bl	8003648 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 80026d8:	b128      	cbz	r0, 80026e6 <HAL_SD_IRQHandler+0x86>
        {
          hsd->ErrorCode |= errorstate;
 80026da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80026dc:	4318      	orrs	r0, r3
 80026de:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80026e0:	4620      	mov	r0, r4
 80026e2:	f7ff fce5 	bl	80020b0 <HAL_SD_ErrorCallback>
        }
      }
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET) && ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == RESET))
 80026e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80026e8:	07da      	lsls	r2, r3, #31
 80026ea:	f100 8095 	bmi.w	8002818 <HAL_SD_IRQHandler+0x1b8>
 80026ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80026f0:	079b      	lsls	r3, r3, #30
 80026f2:	f100 8091 	bmi.w	8002818 <HAL_SD_IRQHandler+0x1b8>
      {
        /* Disable the DMA transfer for transmit request by setting the DMAEN bit
        in the SD DCTRL register */
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80026f6:	6822      	ldr	r2, [r4, #0]
 80026f8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80026fa:	f023 0308 	bic.w	r3, r3, #8
 80026fe:	62d3      	str	r3, [r2, #44]	; 0x2c
        
        hsd->State = HAL_SD_STATE_READY;
 8002700:	2301      	movs	r3, #1
 8002702:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        
        HAL_SD_TxCpltCallback(hsd);
 8002706:	4620      	mov	r0, r4
 8002708:	f7ff fcd0 	bl	80020ac <HAL_SD_TxCpltCallback>
 800270c:	bd70      	pop	{r4, r5, r6, pc}
      }
    }
  }
  
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXFIFOHE) != RESET)
 800270e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002710:	045e      	lsls	r6, r3, #17
 8002712:	d50e      	bpl.n	8002732 <HAL_SD_IRQHandler+0xd2>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_TXFIFOHE);
 8002714:	f44f 4380 	mov.w	r3, #16384	; 0x4000
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
  uint32_t count = 0U;
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 8002718:	6a26      	ldr	r6, [r4, #32]
    }
  }
  
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXFIFOHE) != RESET)
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_TXFIFOHE);
 800271a:	6383      	str	r3, [r0, #56]	; 0x38
  tmp = (uint32_t*)hsd->pTxBuffPtr;
  
  /* Write data to SDIO Tx FIFO */
  for(count = 0U; count < 8U; count++)
  {
    SDIO_WriteFIFO(hsd->Instance, (tmp + count));
 800271c:	1971      	adds	r1, r6, r5
 800271e:	6820      	ldr	r0, [r4, #0]
 8002720:	3504      	adds	r5, #4
 8002722:	f000 fe4b 	bl	80033bc <SDIO_WriteFIFO>
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
  
  /* Write data to SDIO Tx FIFO */
  for(count = 0U; count < 8U; count++)
 8002726:	2d20      	cmp	r5, #32
 8002728:	d1f8      	bne.n	800271c <HAL_SD_IRQHandler+0xbc>
  {
    SDIO_WriteFIFO(hsd->Instance, (tmp + count));
  }
  
  hsd->pTxBuffPtr += 8U;
 800272a:	6a23      	ldr	r3, [r4, #32]
 800272c:	3320      	adds	r3, #32
 800272e:	6223      	str	r3, [r4, #32]
 8002730:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_TXFIFOHE);
    
    SD_Write_IT(hsd);
  }
  
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXFIFOHF) != RESET)
 8002732:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002734:	0419      	lsls	r1, r3, #16
 8002736:	d511      	bpl.n	800275c <HAL_SD_IRQHandler+0xfc>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXFIFOHF);
 8002738:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800273c:	6383      	str	r3, [r0, #56]	; 0x38
static HAL_StatusTypeDef SD_Read_IT(SD_HandleTypeDef *hsd)
{
  uint32_t count = 0U;
  uint32_t* tmp;

  tmp = (uint32_t*)hsd->pRxBuffPtr;
 800273e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002740:	1f1e      	subs	r6, r3, #4
 8002742:	f103 051c 	add.w	r5, r3, #28
  
  /* Read data from SDIO Rx FIFO */
  for(count = 0U; count < 8U; count++)
  {
    *(tmp + count) = SDIO_ReadFIFO(hsd->Instance);
 8002746:	6820      	ldr	r0, [r4, #0]
 8002748:	f000 fe35 	bl	80033b6 <SDIO_ReadFIFO>
 800274c:	f846 0f04 	str.w	r0, [r6, #4]!
  uint32_t* tmp;

  tmp = (uint32_t*)hsd->pRxBuffPtr;
  
  /* Read data from SDIO Rx FIFO */
  for(count = 0U; count < 8U; count++)
 8002750:	42b5      	cmp	r5, r6
 8002752:	d1f8      	bne.n	8002746 <HAL_SD_IRQHandler+0xe6>
  {
    *(tmp + count) = SDIO_ReadFIFO(hsd->Instance);
  }
  
  hsd->pRxBuffPtr += 8U;
 8002754:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002756:	3320      	adds	r3, #32
 8002758:	62a3      	str	r3, [r4, #40]	; 0x28
 800275a:	bd70      	pop	{r4, r5, r6, pc}
    
    SD_Read_IT(hsd);
  }
  
#ifdef SDIO_STA_STBITERR
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR) != RESET)
 800275c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800275e:	f240 233a 	movw	r3, #570	; 0x23a
 8002762:	4013      	ands	r3, r2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d057      	beq.n	8002818 <HAL_SD_IRQHandler+0x1b8>
  {
    /* Set Error code */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL) != RESET)
 8002768:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800276a:	079a      	lsls	r2, r3, #30
    {
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 800276c:	bf42      	ittt	mi
 800276e:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8002770:	f043 0302 	orrmi.w	r3, r3, #2
 8002774:	63a3      	strmi	r3, [r4, #56]	; 0x38
    }
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DTIMEOUT) != RESET)
 8002776:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002778:	071b      	lsls	r3, r3, #28
    {
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
 800277a:	bf42      	ittt	mi
 800277c:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 800277e:	f043 0308 	orrmi.w	r3, r3, #8
 8002782:	63a3      	strmi	r3, [r4, #56]	; 0x38
    }
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXOVERR) != RESET)
 8002784:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002786:	069e      	lsls	r6, r3, #26
    {
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
 8002788:	bf42      	ittt	mi
 800278a:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 800278c:	f043 0320 	orrmi.w	r3, r3, #32
 8002790:	63a3      	strmi	r3, [r4, #56]	; 0x38
    }
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXUNDERR) != RESET)
 8002792:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002794:	06dd      	lsls	r5, r3, #27
    {
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 8002796:	bf42      	ittt	mi
 8002798:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 800279a:	f043 0310 	orrmi.w	r3, r3, #16
 800279e:	63a3      	strmi	r3, [r4, #56]	; 0x38
    }
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_STBITERR) != RESET)
 80027a0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80027a2:	0599      	lsls	r1, r3, #22
    {
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80027a4:	bf42      	ittt	mi
 80027a6:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 80027a8:	f043 0308 	orrmi.w	r3, r3, #8
 80027ac:	63a3      	strmi	r3, [r4, #56]	; 0x38
    }

    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS | SDIO_FLAG_STBITERR);
 80027ae:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80027b2:	6383      	str	r3, [r0, #56]	; 0x38
    
    /* Disable all interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80027b4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80027b6:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80027ba:	f023 0302 	bic.w	r3, r3, #2
 80027be:	63c3      	str	r3, [r0, #60]	; 0x3c
                             SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR |SDIO_IT_STBITERR);
    
    if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 80027c0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80027c2:	061a      	lsls	r2, r3, #24
 80027c4:	d51f      	bpl.n	8002806 <HAL_SD_IRQHandler+0x1a6>
    {
      /* Abort the SD DMA Streams */
      if(hsd->hdmatx != NULL)
 80027c6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80027c8:	b148      	cbz	r0, 80027de <HAL_SD_IRQHandler+0x17e>
      {
        /* Set the DMA Tx abort callback */
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80027ca:	4b14      	ldr	r3, [pc, #80]	; (800281c <HAL_SD_IRQHandler+0x1bc>)
 80027cc:	6503      	str	r3, [r0, #80]	; 0x50
        /* Abort DMA in IT mode */
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80027ce:	f7fd ffd8 	bl	8000782 <HAL_DMA_Abort_IT>
 80027d2:	b308      	cbz	r0, 8002818 <HAL_SD_IRQHandler+0x1b8>
        {
          SD_DMATxAbort(hsd->hdmatx);
 80027d4:	6c20      	ldr	r0, [r4, #64]	; 0x40
      hsd->State = HAL_SD_STATE_READY;
      HAL_SD_ErrorCallback(hsd);
    }
  }
#endif
}
 80027d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        /* Set the DMA Tx abort callback */
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
        /* Abort DMA in IT mode */
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
        {
          SD_DMATxAbort(hsd->hdmatx);
 80027da:	f7ff befc 	b.w	80025d6 <SD_DMATxAbort>
        }
      }
      else if(hsd->hdmarx != NULL)
 80027de:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80027e0:	b148      	cbz	r0, 80027f6 <HAL_SD_IRQHandler+0x196>
      {
        /* Set the DMA Rx abort callback */
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80027e2:	4b0f      	ldr	r3, [pc, #60]	; (8002820 <HAL_SD_IRQHandler+0x1c0>)
 80027e4:	6503      	str	r3, [r0, #80]	; 0x50
        /* Abort DMA in IT mode */
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80027e6:	f7fd ffcc 	bl	8000782 <HAL_DMA_Abort_IT>
 80027ea:	b1a8      	cbz	r0, 8002818 <HAL_SD_IRQHandler+0x1b8>
        {
          SD_DMARxAbort(hsd->hdmarx);
 80027ec:	6be0      	ldr	r0, [r4, #60]	; 0x3c
      hsd->State = HAL_SD_STATE_READY;
      HAL_SD_ErrorCallback(hsd);
    }
  }
#endif
}
 80027ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        /* Set the DMA Rx abort callback */
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
        /* Abort DMA in IT mode */
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
        {
          SD_DMARxAbort(hsd->hdmarx);
 80027f2:	f7ff bf12 	b.w	800261a <SD_DMARxAbort>
        }
      }
      else
      {
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
        hsd->State = HAL_SD_STATE_READY;
 80027f6:	2301      	movs	r3, #1
          SD_DMARxAbort(hsd->hdmarx);
        }
      }
      else
      {
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80027f8:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80027fa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        HAL_SD_AbortCallback(hsd);
 80027fe:	4620      	mov	r0, r4
 8002800:	f7ff fc57 	bl	80020b2 <HAL_SD_AbortCallback>
 8002804:	bd70      	pop	{r4, r5, r6, pc}
      }
    }
    else if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8002806:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002808:	071b      	lsls	r3, r3, #28
 800280a:	d505      	bpl.n	8002818 <HAL_SD_IRQHandler+0x1b8>
    {
      /* Set the SD state to ready to be able to start again the process */
      hsd->State = HAL_SD_STATE_READY;
 800280c:	2301      	movs	r3, #1
 800280e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 8002812:	4620      	mov	r0, r4
 8002814:	f7ff fc4c 	bl	80020b0 <HAL_SD_ErrorCallback>
 8002818:	bd70      	pop	{r4, r5, r6, pc}
 800281a:	bf00      	nop
 800281c:	080025d7 	.word	0x080025d7
 8002820:	0800261b 	.word	0x0800261b

08002824 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002824:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8002826:	4604      	mov	r4, r0
 8002828:	2800      	cmp	r0, #0
 800282a:	d036      	beq.n	800289a <HAL_SPI_Init+0x76>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800282c:	2300      	movs	r3, #0
 800282e:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8002830:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002834:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002838:	b91b      	cbnz	r3, 8002842 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800283a:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800283e:	f002 fd79 	bl	8005334 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002842:	68a1      	ldr	r1, [r4, #8]
 8002844:	6860      	ldr	r0, [r4, #4]
 8002846:	4308      	orrs	r0, r1
 8002848:	68e1      	ldr	r1, [r4, #12]
 800284a:	4308      	orrs	r0, r1
 800284c:	6921      	ldr	r1, [r4, #16]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800284e:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002850:	4308      	orrs	r0, r1
 8002852:	6961      	ldr	r1, [r4, #20]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002854:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002858:	6823      	ldr	r3, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800285a:	4308      	orrs	r0, r1
 800285c:	69e1      	ldr	r1, [r4, #28]
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800285e:	681a      	ldr	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002860:	4308      	orrs	r0, r1
 8002862:	6a21      	ldr	r1, [r4, #32]
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002864:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002868:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800286a:	4308      	orrs	r0, r1
 800286c:	69a2      	ldr	r2, [r4, #24]
 800286e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002870:	4308      	orrs	r0, r1
 8002872:	f402 7100 	and.w	r1, r2, #512	; 0x200
 8002876:	4301      	orrs	r1, r0
 8002878:	6019      	str	r1, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800287a:	0c12      	lsrs	r2, r2, #16
 800287c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800287e:	f002 0204 	and.w	r2, r2, #4
 8002882:	430a      	orrs	r2, r1
 8002884:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002886:	69da      	ldr	r2, [r3, #28]
 8002888:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800288c:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800288e:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8002890:	2301      	movs	r3, #1
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002892:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002894:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 8002898:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if(hspi == NULL)
  {
    return HAL_ERROR;
 800289a:	2001      	movs	r0, #1

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;

  return HAL_OK;
}
 800289c:	bd10      	pop	{r4, pc}
	...

080028a0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028a0:	6a03      	ldr	r3, [r0, #32]
 80028a2:	f023 0301 	bic.w	r3, r3, #1
 80028a6:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028a8:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80028aa:	6842      	ldr	r2, [r0, #4]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028ac:	b570      	push	{r4, r5, r6, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028ae:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028b0:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80028b2:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028b6:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80028b8:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80028bc:	688b      	ldr	r3, [r1, #8]
 80028be:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80028c0:	4c0c      	ldr	r4, [pc, #48]	; (80028f4 <TIM_OC1_SetConfig+0x54>)
 80028c2:	42a0      	cmp	r0, r4
 80028c4:	d009      	beq.n	80028da <TIM_OC1_SetConfig+0x3a>
 80028c6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80028ca:	42a0      	cmp	r0, r4
 80028cc:	d005      	beq.n	80028da <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028ce:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80028d0:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028d2:	6185      	str	r5, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80028d4:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80028d6:	6203      	str	r3, [r0, #32]
} 
 80028d8:	bd70      	pop	{r4, r5, r6, pc}
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80028da:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80028dc:	694e      	ldr	r6, [r1, #20]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80028de:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80028e2:	4323      	orrs	r3, r4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80028e4:	698c      	ldr	r4, [r1, #24]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80028e6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80028ea:	4334      	orrs	r4, r6
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80028ec:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80028f0:	4322      	orrs	r2, r4
 80028f2:	e7ec      	b.n	80028ce <TIM_OC1_SetConfig+0x2e>
 80028f4:	40010000 	.word	0x40010000

080028f8 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80028f8:	6a03      	ldr	r3, [r0, #32]
 80028fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028fe:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002900:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002902:	6842      	ldr	r2, [r0, #4]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002904:	b530      	push	{r4, r5, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002906:	69c4      	ldr	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002908:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 800290a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800290e:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002910:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002912:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002916:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800291a:	4d0e      	ldr	r5, [pc, #56]	; (8002954 <TIM_OC3_SetConfig+0x5c>)
 800291c:	42a8      	cmp	r0, r5
 800291e:	d009      	beq.n	8002934 <TIM_OC3_SetConfig+0x3c>
 8002920:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002924:	42a8      	cmp	r0, r5
 8002926:	d005      	beq.n	8002934 <TIM_OC3_SetConfig+0x3c>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002928:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800292a:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800292c:	61c4      	str	r4, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800292e:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002930:	6203      	str	r3, [r0, #32]
}
 8002932:	bd30      	pop	{r4, r5, pc}
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002934:	68cd      	ldr	r5, [r1, #12]
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002936:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800293a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800293e:	694d      	ldr	r5, [r1, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002940:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002944:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002948:	698d      	ldr	r5, [r1, #24]
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800294a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800294e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8002952:	e7e9      	b.n	8002928 <TIM_OC3_SetConfig+0x30>
 8002954:	40010000 	.word	0x40010000

08002958 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002958:	6a03      	ldr	r3, [r0, #32]
 800295a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800295e:	6203      	str	r3, [r0, #32]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002960:	b530      	push	{r4, r5, lr}

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002962:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002964:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002966:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002968:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800296a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800296e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002972:	688d      	ldr	r5, [r1, #8]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002974:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002978:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800297c:	4d09      	ldr	r5, [pc, #36]	; (80029a4 <TIM_OC4_SetConfig+0x4c>)
 800297e:	42a8      	cmp	r0, r5
 8002980:	d009      	beq.n	8002996 <TIM_OC4_SetConfig+0x3e>
 8002982:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002986:	42a8      	cmp	r0, r5
 8002988:	d005      	beq.n	8002996 <TIM_OC4_SetConfig+0x3e>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800298a:	6043      	str	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800298c:	684b      	ldr	r3, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 800298e:	61c2      	str	r2, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002990:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002992:	6204      	str	r4, [r0, #32]
}
 8002994:	bd30      	pop	{r4, r5, pc}
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002996:	694d      	ldr	r5, [r1, #20]
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002998:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800299c:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 80029a0:	e7f3      	b.n	800298a <TIM_OC4_SetConfig+0x32>
 80029a2:	bf00      	nop
 80029a4:	40010000 	.word	0x40010000

080029a8 <HAL_TIM_PWM_MspInit>:
 80029a8:	4770      	bx	lr

080029aa <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0U;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 80029aa:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80029ae:	2b01      	cmp	r3, #1
  * @param  sClockSourceConfig: pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 80029b0:	b570      	push	{r4, r5, r6, lr}
 80029b2:	f04f 0302 	mov.w	r3, #2
  uint32_t tmpsmcr = 0U;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 80029b6:	f000 80b0 	beq.w	8002b1a <HAL_TIM_ConfigClockSource+0x170>
  
  htim->State = HAL_TIM_STATE_BUSY;
 80029ba:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029be:	6803      	ldr	r3, [r0, #0]
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0U;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 80029c0:	2201      	movs	r2, #1
 80029c2:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029c6:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029c8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80029cc:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80029d0:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 80029d2:	680a      	ldr	r2, [r1, #0]
 80029d4:	2a40      	cmp	r2, #64	; 0x40
 80029d6:	d077      	beq.n	8002ac8 <HAL_TIM_ConfigClockSource+0x11e>
 80029d8:	d818      	bhi.n	8002a0c <HAL_TIM_ConfigClockSource+0x62>
 80029da:	2a10      	cmp	r2, #16
 80029dc:	f000 808b 	beq.w	8002af6 <HAL_TIM_ConfigClockSource+0x14c>
 80029e0:	d808      	bhi.n	80029f4 <HAL_TIM_ConfigClockSource+0x4a>
 80029e2:	2a00      	cmp	r2, #0
 80029e4:	f040 8093 	bne.w	8002b0e <HAL_TIM_ConfigClockSource+0x164>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80029e8:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80029ea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80029ee:	f042 0207 	orr.w	r2, r2, #7
 80029f2:	e08b      	b.n	8002b0c <HAL_TIM_ConfigClockSource+0x162>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 80029f4:	2a20      	cmp	r2, #32
 80029f6:	f000 8084 	beq.w	8002b02 <HAL_TIM_ConfigClockSource+0x158>
 80029fa:	2a30      	cmp	r2, #48	; 0x30
 80029fc:	f040 8087 	bne.w	8002b0e <HAL_TIM_ConfigClockSource+0x164>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002a00:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002a02:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002a06:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8002a0a:	e07f      	b.n	8002b0c <HAL_TIM_ConfigClockSource+0x162>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 8002a0c:	2a70      	cmp	r2, #112	; 0x70
 8002a0e:	d035      	beq.n	8002a7c <HAL_TIM_ConfigClockSource+0xd2>
 8002a10:	d81b      	bhi.n	8002a4a <HAL_TIM_ConfigClockSource+0xa0>
 8002a12:	2a50      	cmp	r2, #80	; 0x50
 8002a14:	d041      	beq.n	8002a9a <HAL_TIM_ConfigClockSource+0xf0>
 8002a16:	2a60      	cmp	r2, #96	; 0x60
 8002a18:	d179      	bne.n	8002b0e <HAL_TIM_ConfigClockSource+0x164>
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a1a:	6a1c      	ldr	r4, [r3, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance, 
 8002a1c:	684d      	ldr	r5, [r1, #4]
 8002a1e:	68ce      	ldr	r6, [r1, #12]
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a20:	f024 0410 	bic.w	r4, r4, #16
 8002a24:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a26:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8002a28:	6a1a      	ldr	r2, [r3, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a2a:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a2e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a32:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a36:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= (TIM_ICPolarity << 4U);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a3a:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a3c:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002a3e:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002a40:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002a44:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8002a48:	e060      	b.n	8002b0c <HAL_TIM_ConfigClockSource+0x162>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 8002a4a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002a4e:	d011      	beq.n	8002a74 <HAL_TIM_ConfigClockSource+0xca>
 8002a50:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002a54:	d15b      	bne.n	8002b0e <HAL_TIM_ConfigClockSource+0x164>
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8002a56:	689c      	ldr	r4, [r3, #8]
 8002a58:	688d      	ldr	r5, [r1, #8]
 8002a5a:	684a      	ldr	r2, [r1, #4]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002a5c:	68c9      	ldr	r1, [r1, #12]
 8002a5e:	432a      	orrs	r2, r5
 8002a60:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 8002a64:	4322      	orrs	r2, r4
 8002a66:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a6a:	609a      	str	r2, [r3, #8]
      TIM_ETR_SetConfig(htim->Instance, 
                        sClockSourceConfig->ClockPrescaler, 
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a6c:	689a      	ldr	r2, [r3, #8]
 8002a6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a72:	e04b      	b.n	8002b0c <HAL_TIM_ConfigClockSource+0x162>
    case TIM_CLOCKSOURCE_INTERNAL:
    { 
      assert_param(IS_TIM_INSTANCE(htim->Instance));
      
      /* Disable slave mode to clock the prescaler directly with the internal clock */
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002a74:	689a      	ldr	r2, [r3, #8]
 8002a76:	f022 0207 	bic.w	r2, r2, #7
 8002a7a:	e047      	b.n	8002b0c <HAL_TIM_ConfigClockSource+0x162>
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8002a7c:	689c      	ldr	r4, [r3, #8]
 8002a7e:	688d      	ldr	r5, [r1, #8]
 8002a80:	684a      	ldr	r2, [r1, #4]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002a82:	68c9      	ldr	r1, [r1, #12]
 8002a84:	432a      	orrs	r2, r5
 8002a86:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 8002a8a:	4322      	orrs	r2, r4
 8002a8c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a90:	609a      	str	r2, [r3, #8]
      TIM_ETR_SetConfig(htim->Instance, 
                        sClockSourceConfig->ClockPrescaler, 
                        sClockSourceConfig->ClockPolarity, 
                        sClockSourceConfig->ClockFilter);
      /* Get the TIMx SMCR register value */
      tmpsmcr = htim->Instance->SMCR;
 8002a92:	689a      	ldr	r2, [r3, #8]
      /* Reset the SMS and TS Bits */
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a94:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8002a98:	e038      	b.n	8002b0c <HAL_TIM_ConfigClockSource+0x162>
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a9a:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a9c:	6a1c      	ldr	r4, [r3, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002a9e:	684d      	ldr	r5, [r1, #4]
 8002aa0:	68ce      	ldr	r6, [r1, #12]
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002aa2:	f024 0401 	bic.w	r4, r4, #1
 8002aa6:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8002aa8:	6999      	ldr	r1, [r3, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002aaa:	f022 020a 	bic.w	r2, r2, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;    
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002aae:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 8002ab2:	432a      	orrs	r2, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;    
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ab4:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ab8:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8002aba:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002abc:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002abe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002ac2:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8002ac6:	e021      	b.n	8002b0c <HAL_TIM_ConfigClockSource+0x162>
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ac8:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002aca:	6a1c      	ldr	r4, [r3, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002acc:	684d      	ldr	r5, [r1, #4]
 8002ace:	68ce      	ldr	r6, [r1, #12]
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ad0:	f024 0401 	bic.w	r4, r4, #1
 8002ad4:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8002ad6:	6999      	ldr	r1, [r3, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ad8:	f022 020a 	bic.w	r2, r2, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;    
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002adc:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 8002ae0:	432a      	orrs	r2, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;    
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ae2:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ae6:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ae8:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002aea:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002aec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002af0:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8002af4:	e00a      	b.n	8002b0c <HAL_TIM_ConfigClockSource+0x162>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002af6:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002af8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002afc:	f042 0217 	orr.w	r2, r2, #23
 8002b00:	e004      	b.n	8002b0c <HAL_TIM_ConfigClockSource+0x162>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002b02:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002b04:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002b08:	f042 0227 	orr.w	r2, r2, #39	; 0x27
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8002b0c:	609a      	str	r2, [r3, #8]
    break;
    
    default:
    break;    
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8002b14:	2300      	movs	r3, #0
 8002b16:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0U;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 8002b1a:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
  
  __HAL_UNLOCK(htim);
  
  return HAL_OK;
}
 8002b1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002b20 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002b20:	4a2e      	ldr	r2, [pc, #184]	; (8002bdc <TIM_Base_SetConfig+0xbc>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
 8002b22:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002b24:	4290      	cmp	r0, r2
 8002b26:	d012      	beq.n	8002b4e <TIM_Base_SetConfig+0x2e>
 8002b28:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002b2c:	d00f      	beq.n	8002b4e <TIM_Base_SetConfig+0x2e>
 8002b2e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002b32:	4290      	cmp	r0, r2
 8002b34:	d00b      	beq.n	8002b4e <TIM_Base_SetConfig+0x2e>
 8002b36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b3a:	4290      	cmp	r0, r2
 8002b3c:	d007      	beq.n	8002b4e <TIM_Base_SetConfig+0x2e>
 8002b3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b42:	4290      	cmp	r0, r2
 8002b44:	d003      	beq.n	8002b4e <TIM_Base_SetConfig+0x2e>
 8002b46:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002b4a:	4290      	cmp	r0, r2
 8002b4c:	d118      	bne.n	8002b80 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002b4e:	684a      	ldr	r2, [r1, #4]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002b54:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002b56:	4a21      	ldr	r2, [pc, #132]	; (8002bdc <TIM_Base_SetConfig+0xbc>)
 8002b58:	4290      	cmp	r0, r2
 8002b5a:	d037      	beq.n	8002bcc <TIM_Base_SetConfig+0xac>
 8002b5c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002b60:	d034      	beq.n	8002bcc <TIM_Base_SetConfig+0xac>
 8002b62:	4a1f      	ldr	r2, [pc, #124]	; (8002be0 <TIM_Base_SetConfig+0xc0>)
 8002b64:	4290      	cmp	r0, r2
 8002b66:	d031      	beq.n	8002bcc <TIM_Base_SetConfig+0xac>
 8002b68:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b6c:	4290      	cmp	r0, r2
 8002b6e:	d02d      	beq.n	8002bcc <TIM_Base_SetConfig+0xac>
 8002b70:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b74:	4290      	cmp	r0, r2
 8002b76:	d029      	beq.n	8002bcc <TIM_Base_SetConfig+0xac>
 8002b78:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002b7c:	4290      	cmp	r0, r2
 8002b7e:	d025      	beq.n	8002bcc <TIM_Base_SetConfig+0xac>
 8002b80:	4a18      	ldr	r2, [pc, #96]	; (8002be4 <TIM_Base_SetConfig+0xc4>)
 8002b82:	4290      	cmp	r0, r2
 8002b84:	d022      	beq.n	8002bcc <TIM_Base_SetConfig+0xac>
 8002b86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b8a:	4290      	cmp	r0, r2
 8002b8c:	d01e      	beq.n	8002bcc <TIM_Base_SetConfig+0xac>
 8002b8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b92:	4290      	cmp	r0, r2
 8002b94:	d01a      	beq.n	8002bcc <TIM_Base_SetConfig+0xac>
 8002b96:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002b9a:	4290      	cmp	r0, r2
 8002b9c:	d016      	beq.n	8002bcc <TIM_Base_SetConfig+0xac>
 8002b9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ba2:	4290      	cmp	r0, r2
 8002ba4:	d012      	beq.n	8002bcc <TIM_Base_SetConfig+0xac>
 8002ba6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002baa:	4290      	cmp	r0, r2
 8002bac:	d00e      	beq.n	8002bcc <TIM_Base_SetConfig+0xac>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8002bae:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bb0:	688b      	ldr	r3, [r1, #8]
 8002bb2:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002bb4:	680b      	ldr	r3, [r1, #0]
 8002bb6:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002bb8:	4b08      	ldr	r3, [pc, #32]	; (8002bdc <TIM_Base_SetConfig+0xbc>)
 8002bba:	4298      	cmp	r0, r3
 8002bbc:	d00b      	beq.n	8002bd6 <TIM_Base_SetConfig+0xb6>
 8002bbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bc2:	4298      	cmp	r0, r3
 8002bc4:	d007      	beq.n	8002bd6 <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	6143      	str	r3, [r0, #20]
}
 8002bca:	4770      	bx	lr
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bcc:	68ca      	ldr	r2, [r1, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	e7eb      	b.n	8002bae <TIM_Base_SetConfig+0x8e>
  TIMx->PSC = (uint32_t)Structure->Prescaler;
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bd6:	690b      	ldr	r3, [r1, #16]
 8002bd8:	6303      	str	r3, [r0, #48]	; 0x30
 8002bda:	e7f4      	b.n	8002bc6 <TIM_Base_SetConfig+0xa6>
 8002bdc:	40010000 	.word	0x40010000
 8002be0:	40000400 	.word	0x40000400
 8002be4:	40014000 	.word	0x40014000

08002be8 <HAL_TIM_Base_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8002be8:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002bea:	4604      	mov	r4, r0
 8002bec:	b1a0      	cbz	r0, 8002c18 <HAL_TIM_Base_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8002bee:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002bf2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002bf6:	b91b      	cbnz	r3, 8002c00 <HAL_TIM_Base_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bf8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bfc:	f002 fc8c 	bl	8005518 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002c00:	2302      	movs	r3, #2
 8002c02:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002c06:	6820      	ldr	r0, [r4, #0]
 8002c08:	1d21      	adds	r1, r4, #4
 8002c0a:	f7ff ff89 	bl	8002b20 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8002c14:	2000      	movs	r0, #0
 8002c16:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8002c18:	2001      	movs	r0, #1
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 8002c1a:	bd10      	pop	{r4, pc}

08002c1c <HAL_TIM_PWM_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c1c:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002c1e:	4604      	mov	r4, r0
 8002c20:	b1a0      	cbz	r0, 8002c4c <HAL_TIM_PWM_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8002c22:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002c26:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c2a:	b91b      	cbnz	r3, 8002c34 <HAL_TIM_PWM_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c2c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c30:	f7ff feba 	bl	80029a8 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 8002c34:	2302      	movs	r3, #2
 8002c36:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002c3a:	6820      	ldr	r0, [r4, #0]
 8002c3c:	1d21      	adds	r1, r4, #4
 8002c3e:	f7ff ff6f 	bl	8002b20 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002c42:	2301      	movs	r3, #1
 8002c44:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8002c48:	2000      	movs	r0, #0
 8002c4a:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8002c4c:	2001      	movs	r0, #1
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}  
 8002c4e:	bd10      	pop	{r4, pc}

08002c50 <HAL_TIM_Encoder_Init>:
  *                the configuration information for TIM module.
  * @param  sConfig: TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef* sConfig)
{
 8002c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c52:	460c      	mov	r4, r1
  uint32_t tmpsmcr = 0U;
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002c54:	4605      	mov	r5, r0
 8002c56:	2800      	cmp	r0, #0
 8002c58:	d041      	beq.n	8002cde <HAL_TIM_Encoder_Init+0x8e>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if(htim->State == HAL_TIM_STATE_RESET)
 8002c5a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002c5e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c62:	b91b      	cbnz	r3, 8002c6c <HAL_TIM_Encoder_Init+0x1c>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c64:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002c68:	f002 fc6e 	bl	8005548 <HAL_TIM_Encoder_MspInit>
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;   
    
  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002c6c:	4629      	mov	r1, r5
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;   
 8002c6e:	2302      	movs	r3, #2
    
  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002c70:	f851 0b04 	ldr.w	r0, [r1], #4
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;   
 8002c74:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
    
  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002c78:	6883      	ldr	r3, [r0, #8]
 8002c7a:	f023 0307 	bic.w	r3, r3, #7
 8002c7e:	6083      	str	r3, [r0, #8]
  
  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
 8002c80:	f7ff ff4e 	bl	8002b20 <TIM_Base_SetConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c84:	6828      	ldr	r0, [r5, #0]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002c86:	6823      	ldr	r3, [r4, #0]
  
  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c88:	6887      	ldr	r7, [r0, #8]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002c8a:	6981      	ldr	r1, [r0, #24]
 8002c8c:	69a2      	ldr	r2, [r4, #24]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002c8e:	6a06      	ldr	r6, [r0, #32]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002c90:	431f      	orrs	r7, r3
 8002c92:	f421 7340 	bic.w	r3, r1, #768	; 0x300
 8002c96:	f023 0303 	bic.w	r3, r3, #3
 8002c9a:	ea43 2202 	orr.w	r2, r3, r2, lsl #8

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002c9e:	68a3      	ldr	r3, [r4, #8]
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002ca0:	6921      	ldr	r1, [r4, #16]
  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002ca2:	4313      	orrs	r3, r2
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002ca4:	69e2      	ldr	r2, [r4, #28]
 8002ca6:	0109      	lsls	r1, r1, #4
 8002ca8:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8002cac:	68e2      	ldr	r2, [r4, #12]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002cb2:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002cb6:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002cba:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8002cbe:	6961      	ldr	r1, [r4, #20]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	f026 02aa 	bic.w	r2, r6, #170	; 0xaa
 8002cc6:	ea42 1201 	orr.w	r2, r2, r1, lsl #4

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002cca:	6861      	ldr	r1, [r4, #4]
  
  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002ccc:	6087      	str	r7, [r0, #8]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002cce:	430a      	orrs	r2, r1
  
  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002cd0:	6183      	str	r3, [r0, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002cd2:	2301      	movs	r3, #1

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002cd4:	6202      	str	r2, [r0, #32]
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002cd6:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  
  return HAL_OK;
 8002cda:	2000      	movs	r0, #0
 8002cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t tmpccer = 0U;
  
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8002cde:	2001      	movs	r0, #1
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 8002ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002ce4 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ce4:	6a03      	ldr	r3, [r0, #32]
 8002ce6:	f023 0310 	bic.w	r3, r3, #16
 8002cea:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8002cec:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002cee:	6842      	ldr	r2, [r0, #4]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cf0:	b530      	push	{r4, r5, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cf2:	6984      	ldr	r4, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cf4:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002cf6:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cfa:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002cfe:	688d      	ldr	r5, [r1, #8]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d00:	f023 0320 	bic.w	r3, r3, #32
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d04:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002d08:	4d0e      	ldr	r5, [pc, #56]	; (8002d44 <TIM_OC2_SetConfig+0x60>)
 8002d0a:	42a8      	cmp	r0, r5
 8002d0c:	d009      	beq.n	8002d22 <TIM_OC2_SetConfig+0x3e>
 8002d0e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002d12:	42a8      	cmp	r0, r5
 8002d14:	d005      	beq.n	8002d22 <TIM_OC2_SetConfig+0x3e>
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d16:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d18:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d1a:	6184      	str	r4, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d1c:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d1e:	6203      	str	r3, [r0, #32]
}
 8002d20:	bd30      	pop	{r4, r5, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d22:	68cd      	ldr	r5, [r1, #12]
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d28:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d2c:	694d      	ldr	r5, [r1, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d2e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d32:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d36:	698d      	ldr	r5, [r1, #24]
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d3c:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 8002d40:	e7e9      	b.n	8002d16 <TIM_OC2_SetConfig+0x32>
 8002d42:	bf00      	nop
 8002d44:	40010000 	.word	0x40010000

08002d48 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8002d48:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002d4a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002d4e:	2b01      	cmp	r3, #1
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8002d50:	4604      	mov	r4, r0
 8002d52:	460d      	mov	r5, r1
 8002d54:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8002d58:	d058      	beq.n	8002e0c <HAL_TIM_PWM_ConfigChannel+0xc4>
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  assert_param(IS_TIM_CHANNELS(Channel)); 
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8002d60:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
    
  switch (Channel)
 8002d64:	2a0c      	cmp	r2, #12
 8002d66:	d84b      	bhi.n	8002e00 <HAL_TIM_PWM_ConfigChannel+0xb8>
 8002d68:	e8df f002 	tbb	[pc, r2]
 8002d6c:	4a4a4a07 	.word	0x4a4a4a07
 8002d70:	4a4a4a17 	.word	0x4a4a4a17
 8002d74:	4a4a4a29 	.word	0x4a4a4a29
 8002d78:	39          	.byte	0x39
 8002d79:	00          	.byte	0x00
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d7a:	6820      	ldr	r0, [r4, #0]
 8002d7c:	f7ff fd90 	bl	80028a0 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d80:	6823      	ldr	r3, [r4, #0]
 8002d82:	699a      	ldr	r2, [r3, #24]
 8002d84:	f042 0208 	orr.w	r2, r2, #8
 8002d88:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d8a:	699a      	ldr	r2, [r3, #24]
 8002d8c:	f022 0204 	bic.w	r2, r2, #4
 8002d90:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d92:	6999      	ldr	r1, [r3, #24]
 8002d94:	692a      	ldr	r2, [r5, #16]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	e00f      	b.n	8002dba <HAL_TIM_PWM_ConfigChannel+0x72>
    
    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d9a:	6820      	ldr	r0, [r4, #0]
 8002d9c:	f7ff ffa2 	bl	8002ce4 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002da0:	6823      	ldr	r3, [r4, #0]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002da2:	6909      	ldr	r1, [r1, #16]
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002da4:	699a      	ldr	r2, [r3, #24]
 8002da6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002daa:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002dac:	699a      	ldr	r2, [r3, #24]
 8002dae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002db2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002db4:	699a      	ldr	r2, [r3, #24]
 8002db6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002dba:	619a      	str	r2, [r3, #24]
    }
    break;
 8002dbc:	e020      	b.n	8002e00 <HAL_TIM_PWM_ConfigChannel+0xb8>
    
    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002dbe:	6820      	ldr	r0, [r4, #0]
 8002dc0:	f7ff fd9a 	bl	80028f8 <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002dc4:	6823      	ldr	r3, [r4, #0]
 8002dc6:	69da      	ldr	r2, [r3, #28]
 8002dc8:	f042 0208 	orr.w	r2, r2, #8
 8002dcc:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002dce:	69da      	ldr	r2, [r3, #28]
 8002dd0:	f022 0204 	bic.w	r2, r2, #4
 8002dd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8002dd6:	69d9      	ldr	r1, [r3, #28]
 8002dd8:	692a      	ldr	r2, [r5, #16]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	e00f      	b.n	8002dfe <HAL_TIM_PWM_ConfigChannel+0xb6>
    
    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002dde:	6820      	ldr	r0, [r4, #0]
 8002de0:	f7ff fdba 	bl	8002958 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002de4:	6823      	ldr	r3, [r4, #0]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8002de6:	6909      	ldr	r1, [r1, #16]
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002de8:	69da      	ldr	r2, [r3, #28]
 8002dea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dee:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002df0:	69da      	ldr	r2, [r3, #28]
 8002df2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002df6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8002df8:	69da      	ldr	r2, [r3, #28]
 8002dfa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002dfe:	61da      	str	r2, [r3, #28]
    
    default:
    break;    
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8002e00:	2301      	movs	r3, #1
    
  __HAL_UNLOCK(htim);
 8002e02:	2000      	movs	r0, #0
    
    default:
    break;    
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8002e04:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 8002e08:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  
  return HAL_OK;
}
 8002e0c:	bd38      	pop	{r3, r4, r5, pc}

08002e0e <TIM_CCxChannelCmd>:
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e0e:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e10:	2301      	movs	r3, #1
 8002e12:	6a04      	ldr	r4, [r0, #32]
 8002e14:	408b      	lsls	r3, r1
 8002e16:	ea24 0303 	bic.w	r3, r4, r3
 8002e1a:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002e1c:	6a03      	ldr	r3, [r0, #32]
 8002e1e:	408a      	lsls	r2, r1
 8002e20:	ea42 0103 	orr.w	r1, r2, r3
 8002e24:	6201      	str	r1, [r0, #32]
 8002e26:	bd10      	pop	{r4, pc}

08002e28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e28:	b510      	push	{r4, lr}
 8002e2a:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	6800      	ldr	r0, [r0, #0]
 8002e30:	f7ff ffed 	bl	8002e0e <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8002e34:	6823      	ldr	r3, [r4, #0]
 8002e36:	4a08      	ldr	r2, [pc, #32]	; (8002e58 <HAL_TIM_PWM_Start+0x30>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d003      	beq.n	8002e44 <HAL_TIM_PWM_Start+0x1c>
 8002e3c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d103      	bne.n	8002e4c <HAL_TIM_PWM_Start+0x24>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e4a:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	f042 0201 	orr.w	r2, r2, #1
 8002e52:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
} 
 8002e54:	2000      	movs	r0, #0
 8002e56:	bd10      	pop	{r4, pc}
 8002e58:	40010000 	.word	0x40010000

08002e5c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable. 
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8002e5c:	b510      	push	{r4, lr}
  assert_param(IS_TIM_COMPLEMENTARY_CHANNELS(Channel));

  tmp = TIM_CCER_CC1NE << Channel;

  /* Reset the CCxNE Bit */
  TIMx->CCER &= ~tmp;
 8002e5e:	2304      	movs	r3, #4
 8002e60:	6a04      	ldr	r4, [r0, #32]
 8002e62:	408b      	lsls	r3, r1
 8002e64:	ea24 0303 	bic.w	r3, r4, r3
 8002e68:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelNState << Channel);
 8002e6a:	6a03      	ldr	r3, [r0, #32]
 8002e6c:	408a      	lsls	r2, r1
 8002e6e:	ea42 0103 	orr.w	r1, r2, r3
 8002e72:	6201      	str	r1, [r0, #32]
 8002e74:	bd10      	pop	{r4, pc}

08002e76 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e76:	b510      	push	{r4, lr}
 8002e78:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
  
  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8002e7a:	2204      	movs	r2, #4
 8002e7c:	6800      	ldr	r0, [r0, #0]
 8002e7e:	f7ff ffed 	bl	8002e5c <TIM_CCxNChannelCmd>
  
  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8002e82:	6823      	ldr	r3, [r4, #0]
 8002e84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e8a:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	f042 0201 	orr.w	r2, r2, #1
 8002e92:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
} 
 8002e94:	2000      	movs	r0, #0
 8002e96:	bd10      	pop	{r4, pc}

08002e98 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8002e98:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002e9c:	2b01      	cmp	r3, #1
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002e9e:	b510      	push	{r4, lr}
 8002ea0:	f04f 0302 	mov.w	r3, #2
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8002ea4:	d018      	beq.n	8002ed8 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8002ea6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002eaa:	6803      	ldr	r3, [r0, #0]
 8002eac:	685a      	ldr	r2, [r3, #4]
 8002eae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002eb2:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8002eb4:	685c      	ldr	r4, [r3, #4]
 8002eb6:	680a      	ldr	r2, [r1, #0]
 8002eb8:	4322      	orrs	r2, r4
 8002eba:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002ebc:	689a      	ldr	r2, [r3, #8]
 8002ebe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ec2:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002ec4:	689c      	ldr	r4, [r3, #8]
 8002ec6:	684a      	ldr	r2, [r1, #4]
 8002ec8:	4322      	orrs	r2, r4
 8002eca:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8002ed8:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
  
  __HAL_UNLOCK(htim);
  
  return HAL_OK;
} 
 8002eda:	bd10      	pop	{r4, pc}

08002edc <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002edc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d01f      	beq.n	8002f24 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002ee4:	68cb      	ldr	r3, [r1, #12]
 8002ee6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002eea:	688b      	ldr	r3, [r1, #8]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002ef2:	684b      	ldr	r3, [r1, #4]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002efa:	680b      	ldr	r3, [r1, #0]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002f02:	690b      	ldr	r3, [r1, #16]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002f0a:	694b      	ldr	r3, [r1, #20]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002f10:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002f14:	4313      	orrs	r3, r2
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002f16:	6802      	ldr	r2, [r0, #0]
 8002f18:	6453      	str	r3, [r2, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8002f20:	4618      	mov	r0, r3
 8002f22:	4770      	bx	lr
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002f24:	2002      	movs	r0, #2
  htim->Instance->BDTR = tmpbdtr;
  
  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 8002f26:	4770      	bx	lr

08002f28 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8002f2c:	6807      	ldr	r7, [r0, #0]
 8002f2e:	693b      	ldr	r3, [r7, #16]
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f30:	4604      	mov	r4, r0

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8002f32:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8002f36:	68c3      	ldr	r3, [r0, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f38:	68a1      	ldr	r1, [r4, #8]
 8002f3a:	69c0      	ldr	r0, [r0, #28]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8002f3c:	4313      	orrs	r3, r2
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f3e:	6922      	ldr	r2, [r4, #16]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8002f40:	613b      	str	r3, [r7, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8002f42:	68fb      	ldr	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f44:	4311      	orrs	r1, r2
 8002f46:	6962      	ldr	r2, [r4, #20]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002f48:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	4302      	orrs	r2, r0

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002f50:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f54:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8002f56:	60fb      	str	r3, [r7, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8002f58:	697b      	ldr	r3, [r7, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8002f5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8002f5e:	69a3      	ldr	r3, [r4, #24]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f60:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8002f64:	ea43 0302 	orr.w	r3, r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8002f68:	617b      	str	r3, [r7, #20]
 8002f6a:	4b7c      	ldr	r3, [pc, #496]	; (800315c <UART_SetConfig+0x234>)
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f6c:	d17c      	bne.n	8003068 <UART_SetConfig+0x140>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f6e:	429f      	cmp	r7, r3
 8002f70:	d003      	beq.n	8002f7a <UART_SetConfig+0x52>
 8002f72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f76:	429f      	cmp	r7, r3
 8002f78:	d131      	bne.n	8002fde <UART_SetConfig+0xb6>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002f7a:	f7fe fbe5 	bl	8001748 <HAL_RCC_GetPCLK2Freq>
 8002f7e:	6863      	ldr	r3, [r4, #4]
 8002f80:	2519      	movs	r5, #25
 8002f82:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8002f86:	4368      	muls	r0, r5
 8002f88:	fbb0 f8f8 	udiv	r8, r0, r8
 8002f8c:	f7fe fbdc 	bl	8001748 <HAL_RCC_GetPCLK2Freq>
 8002f90:	6866      	ldr	r6, [r4, #4]
 8002f92:	4368      	muls	r0, r5
 8002f94:	0076      	lsls	r6, r6, #1
 8002f96:	fbb0 f6f6 	udiv	r6, r0, r6
 8002f9a:	f7fe fbd5 	bl	8001748 <HAL_RCC_GetPCLK2Freq>
 8002f9e:	6863      	ldr	r3, [r4, #4]
 8002fa0:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	4368      	muls	r0, r5
 8002fa8:	fbb0 f0f3 	udiv	r0, r0, r3
 8002fac:	fbb0 f0f9 	udiv	r0, r0, r9
 8002fb0:	fb09 6610 	mls	r6, r9, r0, r6
 8002fb4:	f7fe fbc8 	bl	8001748 <HAL_RCC_GetPCLK2Freq>
 8002fb8:	fbb8 f8f9 	udiv	r8, r8, r9
 8002fbc:	6861      	ldr	r1, [r4, #4]
 8002fbe:	00f6      	lsls	r6, r6, #3
 8002fc0:	3632      	adds	r6, #50	; 0x32
 8002fc2:	fbb6 f6f9 	udiv	r6, r6, r9
 8002fc6:	0076      	lsls	r6, r6, #1
 8002fc8:	4368      	muls	r0, r5
 8002fca:	0049      	lsls	r1, r1, #1
 8002fcc:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8002fd0:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
 8002fd4:	fbb0 faf1 	udiv	sl, r0, r1
 8002fd8:	f7fe fbb6 	bl	8001748 <HAL_RCC_GetPCLK2Freq>
 8002fdc:	e030      	b.n	8003040 <UART_SetConfig+0x118>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002fde:	f7fe fb9b 	bl	8001718 <HAL_RCC_GetPCLK1Freq>
 8002fe2:	6863      	ldr	r3, [r4, #4]
 8002fe4:	2519      	movs	r5, #25
 8002fe6:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8002fea:	4368      	muls	r0, r5
 8002fec:	fbb0 f8f8 	udiv	r8, r0, r8
 8002ff0:	f7fe fb92 	bl	8001718 <HAL_RCC_GetPCLK1Freq>
 8002ff4:	6866      	ldr	r6, [r4, #4]
 8002ff6:	4368      	muls	r0, r5
 8002ff8:	0076      	lsls	r6, r6, #1
 8002ffa:	fbb0 f6f6 	udiv	r6, r0, r6
 8002ffe:	f7fe fb8b 	bl	8001718 <HAL_RCC_GetPCLK1Freq>
 8003002:	6863      	ldr	r3, [r4, #4]
 8003004:	f04f 0964 	mov.w	r9, #100	; 0x64
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	4368      	muls	r0, r5
 800300c:	fbb0 f0f3 	udiv	r0, r0, r3
 8003010:	fbb0 f0f9 	udiv	r0, r0, r9
 8003014:	fb09 6610 	mls	r6, r9, r0, r6
 8003018:	f7fe fb7e 	bl	8001718 <HAL_RCC_GetPCLK1Freq>
 800301c:	fbb8 f8f9 	udiv	r8, r8, r9
 8003020:	00f6      	lsls	r6, r6, #3
 8003022:	6861      	ldr	r1, [r4, #4]
 8003024:	3632      	adds	r6, #50	; 0x32
 8003026:	fbb6 f6f9 	udiv	r6, r6, r9
 800302a:	0076      	lsls	r6, r6, #1
 800302c:	4368      	muls	r0, r5
 800302e:	0049      	lsls	r1, r1, #1
 8003030:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8003034:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
 8003038:	fbb0 faf1 	udiv	sl, r0, r1
 800303c:	f7fe fb6c 	bl	8001718 <HAL_RCC_GetPCLK1Freq>
 8003040:	4345      	muls	r5, r0
 8003042:	6860      	ldr	r0, [r4, #4]
 8003044:	0040      	lsls	r0, r0, #1
 8003046:	fbb5 f0f0 	udiv	r0, r5, r0
 800304a:	fbb0 f0f9 	udiv	r0, r0, r9
 800304e:	fb09 a210 	mls	r2, r9, r0, sl
 8003052:	00d2      	lsls	r2, r2, #3
 8003054:	3232      	adds	r2, #50	; 0x32
 8003056:	fbb2 f3f9 	udiv	r3, r2, r9
 800305a:	f003 0307 	and.w	r3, r3, #7
 800305e:	4443      	add	r3, r8
 8003060:	441e      	add	r6, r3
 8003062:	60be      	str	r6, [r7, #8]
 8003064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003068:	429f      	cmp	r7, r3
 800306a:	d002      	beq.n	8003072 <UART_SetConfig+0x14a>
 800306c:	4b3c      	ldr	r3, [pc, #240]	; (8003160 <UART_SetConfig+0x238>)
 800306e:	429f      	cmp	r7, r3
 8003070:	d130      	bne.n	80030d4 <UART_SetConfig+0x1ac>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003072:	f7fe fb69 	bl	8001748 <HAL_RCC_GetPCLK2Freq>
 8003076:	6863      	ldr	r3, [r4, #4]
 8003078:	2519      	movs	r5, #25
 800307a:	ea4f 0883 	mov.w	r8, r3, lsl #2
 800307e:	4368      	muls	r0, r5
 8003080:	fbb0 f8f8 	udiv	r8, r0, r8
 8003084:	f7fe fb60 	bl	8001748 <HAL_RCC_GetPCLK2Freq>
 8003088:	6866      	ldr	r6, [r4, #4]
 800308a:	4368      	muls	r0, r5
 800308c:	00b6      	lsls	r6, r6, #2
 800308e:	fbb0 f6f6 	udiv	r6, r0, r6
 8003092:	f7fe fb59 	bl	8001748 <HAL_RCC_GetPCLK2Freq>
 8003096:	6863      	ldr	r3, [r4, #4]
 8003098:	f04f 0964 	mov.w	r9, #100	; 0x64
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4368      	muls	r0, r5
 80030a0:	fbb0 f0f3 	udiv	r0, r0, r3
 80030a4:	fbb0 f0f9 	udiv	r0, r0, r9
 80030a8:	fb09 6610 	mls	r6, r9, r0, r6
 80030ac:	f7fe fb4c 	bl	8001748 <HAL_RCC_GetPCLK2Freq>
 80030b0:	fbb8 f8f9 	udiv	r8, r8, r9
 80030b4:	6861      	ldr	r1, [r4, #4]
 80030b6:	0136      	lsls	r6, r6, #4
 80030b8:	4368      	muls	r0, r5
 80030ba:	0089      	lsls	r1, r1, #2
 80030bc:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80030c0:	3632      	adds	r6, #50	; 0x32
 80030c2:	fbb0 faf1 	udiv	sl, r0, r1
 80030c6:	fbb6 f6f9 	udiv	r6, r6, r9
 80030ca:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
 80030ce:	f7fe fb3b 	bl	8001748 <HAL_RCC_GetPCLK2Freq>
 80030d2:	e02f      	b.n	8003134 <UART_SetConfig+0x20c>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80030d4:	f7fe fb20 	bl	8001718 <HAL_RCC_GetPCLK1Freq>
 80030d8:	6863      	ldr	r3, [r4, #4]
 80030da:	2519      	movs	r5, #25
 80030dc:	ea4f 0883 	mov.w	r8, r3, lsl #2
 80030e0:	4368      	muls	r0, r5
 80030e2:	fbb0 f8f8 	udiv	r8, r0, r8
 80030e6:	f7fe fb17 	bl	8001718 <HAL_RCC_GetPCLK1Freq>
 80030ea:	6866      	ldr	r6, [r4, #4]
 80030ec:	4368      	muls	r0, r5
 80030ee:	00b6      	lsls	r6, r6, #2
 80030f0:	fbb0 f6f6 	udiv	r6, r0, r6
 80030f4:	f7fe fb10 	bl	8001718 <HAL_RCC_GetPCLK1Freq>
 80030f8:	6863      	ldr	r3, [r4, #4]
 80030fa:	f04f 0964 	mov.w	r9, #100	; 0x64
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4368      	muls	r0, r5
 8003102:	fbb0 f0f3 	udiv	r0, r0, r3
 8003106:	fbb0 f0f9 	udiv	r0, r0, r9
 800310a:	fb09 6610 	mls	r6, r9, r0, r6
 800310e:	f7fe fb03 	bl	8001718 <HAL_RCC_GetPCLK1Freq>
 8003112:	fbb8 f8f9 	udiv	r8, r8, r9
 8003116:	6861      	ldr	r1, [r4, #4]
 8003118:	0136      	lsls	r6, r6, #4
 800311a:	3632      	adds	r6, #50	; 0x32
 800311c:	4368      	muls	r0, r5
 800311e:	fbb6 f6f9 	udiv	r6, r6, r9
 8003122:	0089      	lsls	r1, r1, #2
 8003124:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8003128:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
 800312c:	fbb0 faf1 	udiv	sl, r0, r1
 8003130:	f7fe faf2 	bl	8001718 <HAL_RCC_GetPCLK1Freq>
 8003134:	4345      	muls	r5, r0
 8003136:	6860      	ldr	r0, [r4, #4]
 8003138:	0080      	lsls	r0, r0, #2
 800313a:	fbb5 f0f0 	udiv	r0, r5, r0
 800313e:	fbb0 f0f9 	udiv	r0, r0, r9
 8003142:	fb09 a210 	mls	r2, r9, r0, sl
 8003146:	0112      	lsls	r2, r2, #4
 8003148:	3232      	adds	r2, #50	; 0x32
 800314a:	fbb2 f3f9 	udiv	r3, r2, r9
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	4433      	add	r3, r6
 8003154:	4443      	add	r3, r8
 8003156:	60bb      	str	r3, [r7, #8]
 8003158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800315c:	40011000 	.word	0x40011000
 8003160:	40011400 	.word	0x40011400

08003164 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003164:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 8003166:	4604      	mov	r4, r0
 8003168:	b340      	cbz	r0, 80031bc <HAL_UART_Init+0x58>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 800316a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800316e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003172:	b91b      	cbnz	r3, 800317c <HAL_UART_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003174:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8003178:	f002 fb18 	bl	80057ac <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800317c:	6822      	ldr	r2, [r4, #0]
    huart->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800317e:	2324      	movs	r3, #36	; 0x24
 8003180:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003184:	68d3      	ldr	r3, [r2, #12]
 8003186:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800318a:	60d3      	str	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800318c:	4620      	mov	r0, r4
 800318e:	f7ff fecb 	bl	8002f28 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003192:	6823      	ldr	r3, [r4, #0]
 8003194:	691a      	ldr	r2, [r3, #16]
 8003196:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800319a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800319c:	695a      	ldr	r2, [r3, #20]
 800319e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031a2:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031a4:	68da      	ldr	r2, [r3, #12]
 80031a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031aa:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031ac:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 80031ae:	2320      	movs	r3, #32
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031b0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80031b2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80031b6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  
  return HAL_OK;
 80031ba:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 80031bc:	2001      	movs	r0, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->gState= HAL_UART_STATE_READY;
  huart->RxState= HAL_UART_STATE_READY;
  
  return HAL_OK;
}
 80031be:	bd10      	pop	{r4, pc}

080031c0 <HAL_USART_Init>:
  * @param  husart: pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80031c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  /* Check the USART handle allocation */
  if(husart == NULL)
 80031c4:	4604      	mov	r4, r0
 80031c6:	2800      	cmp	r0, #0
 80031c8:	f000 808a 	beq.w	80032e0 <HAL_USART_Init+0x120>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if(husart->State == HAL_USART_STATE_RESET)
 80031cc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80031d0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80031d4:	b91b      	cbnz	r3, 80031de <HAL_USART_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80031d6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    /* Init the low level hardware */
    HAL_USART_MspInit(husart);
 80031da:	f002 fabf 	bl	800575c <HAL_USART_MspInit>
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80031de:	6826      	ldr	r6, [r4, #0]
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE| husart->Init.CLKPolarity |
 80031e0:	69a1      	ldr	r1, [r4, #24]
    husart->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_USART_MspInit(husart);
  }

  husart->State = HAL_USART_STATE_BUSY;
 80031e2:	2302      	movs	r3, #2
 80031e4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80031e8:	68f3      	ldr	r3, [r6, #12]
 80031ea:	f023 030c 	bic.w	r3, r3, #12
 80031ee:	60f3      	str	r3, [r6, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 80031f0:	6933      	ldr	r3, [r6, #16]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 80031f2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE| husart->Init.CLKPolarity |
 80031f6:	69e3      	ldr	r3, [r4, #28]
 80031f8:	430b      	orrs	r3, r1
 80031fa:	6a21      	ldr	r1, [r4, #32]
 80031fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003200:	430b      	orrs	r3, r1
 8003202:	68e1      	ldr	r1, [r4, #12]
 8003204:	430b      	orrs	r3, r1
 8003206:	4313      	orrs	r3, r2
                       husart->Init.CLKPhase| husart->Init.CLKLastBit | husart->Init.StopBits);
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 8003208:	6133      	str	r3, [r6, #16]
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800320a:	68a1      	ldr	r1, [r4, #8]
 800320c:	6922      	ldr	r2, [r4, #16]
                       husart->Init.CLKPhase| husart->Init.CLKLastBit | husart->Init.StopBits);
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 800320e:	68f3      	ldr	r3, [r6, #12]
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8003210:	430a      	orrs	r2, r1
 8003212:	6961      	ldr	r1, [r4, #20]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8003214:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8003218:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800321c:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8003220:	430a      	orrs	r2, r1
 8003222:	4313      	orrs	r3, r2

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 8003224:	60f3      	str	r3, [r6, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8003226:	6973      	ldr	r3, [r6, #20]
 8003228:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800322c:	6173      	str	r3, [r6, #20]

  /*-------------------------- USART BRR Configuration -----------------------*/
#if defined(USART6) 
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 800322e:	4b2e      	ldr	r3, [pc, #184]	; (80032e8 <HAL_USART_Init+0x128>)
 8003230:	429e      	cmp	r6, r3
 8003232:	d003      	beq.n	800323c <HAL_USART_Init+0x7c>
 8003234:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003238:	429e      	cmp	r6, r3
 800323a:	d116      	bne.n	800326a <HAL_USART_Init+0xaa>
  {
    husart->Instance->BRR = USART_BRR(HAL_RCC_GetPCLK2Freq(), husart->Init.BaudRate);
 800323c:	f7fe fa84 	bl	8001748 <HAL_RCC_GetPCLK2Freq>
 8003240:	6867      	ldr	r7, [r4, #4]
 8003242:	2519      	movs	r5, #25
 8003244:	4368      	muls	r0, r5
 8003246:	007f      	lsls	r7, r7, #1
 8003248:	fbb0 f7f7 	udiv	r7, r0, r7
 800324c:	f7fe fa7c 	bl	8001748 <HAL_RCC_GetPCLK2Freq>
 8003250:	6862      	ldr	r2, [r4, #4]
 8003252:	f04f 0864 	mov.w	r8, #100	; 0x64
 8003256:	4368      	muls	r0, r5
 8003258:	fbb7 f7f8 	udiv	r7, r7, r8
 800325c:	0052      	lsls	r2, r2, #1
 800325e:	013f      	lsls	r7, r7, #4
 8003260:	fbb0 f9f2 	udiv	r9, r0, r2
 8003264:	f7fe fa70 	bl	8001748 <HAL_RCC_GetPCLK2Freq>
 8003268:	e015      	b.n	8003296 <HAL_USART_Init+0xd6>
    husart->Instance->BRR = USART_BRR(HAL_RCC_GetPCLK2Freq(), husart->Init.BaudRate);
  }	
#endif /* USART6 */	
  else
  {
    husart->Instance->BRR = USART_BRR(HAL_RCC_GetPCLK1Freq(), husart->Init.BaudRate);
 800326a:	f7fe fa55 	bl	8001718 <HAL_RCC_GetPCLK1Freq>
 800326e:	6867      	ldr	r7, [r4, #4]
 8003270:	2519      	movs	r5, #25
 8003272:	4368      	muls	r0, r5
 8003274:	007f      	lsls	r7, r7, #1
 8003276:	fbb0 f7f7 	udiv	r7, r0, r7
 800327a:	f7fe fa4d 	bl	8001718 <HAL_RCC_GetPCLK1Freq>
 800327e:	6862      	ldr	r2, [r4, #4]
 8003280:	f04f 0864 	mov.w	r8, #100	; 0x64
 8003284:	4368      	muls	r0, r5
 8003286:	fbb7 f7f8 	udiv	r7, r7, r8
 800328a:	0052      	lsls	r2, r2, #1
 800328c:	013f      	lsls	r7, r7, #4
 800328e:	fbb0 f9f2 	udiv	r9, r0, r2
 8003292:	f7fe fa41 	bl	8001718 <HAL_RCC_GetPCLK1Freq>
 8003296:	4345      	muls	r5, r0
 8003298:	6860      	ldr	r0, [r4, #4]
 800329a:	0040      	lsls	r0, r0, #1
 800329c:	fbb5 f0f0 	udiv	r0, r5, r0
 80032a0:	fbb0 f0f8 	udiv	r0, r0, r8
 80032a4:	fb08 9210 	mls	r2, r8, r0, r9
 80032a8:	0112      	lsls	r2, r2, #4
 80032aa:	3232      	adds	r2, #50	; 0x32
 80032ac:	fbb2 f3f8 	udiv	r3, r2, r8
 80032b0:	f003 030f 	and.w	r3, r3, #15
 80032b4:	433b      	orrs	r3, r7
 80032b6:	60b3      	str	r3, [r6, #8]
  USART_SetConfig(husart);

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 80032b8:	6823      	ldr	r3, [r4, #0]
 80032ba:	691a      	ldr	r2, [r3, #16]
 80032bc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80032c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032c2:	695a      	ldr	r2, [r3, #20]
 80032c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032c8:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80032ca:	68da      	ldr	r2, [r3, #12]
 80032cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032d0:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 80032d2:	2000      	movs	r0, #0
  husart->State= HAL_USART_STATE_READY;
 80032d4:	2301      	movs	r3, #1

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 80032d6:	6420      	str	r0, [r4, #64]	; 0x40
  husart->State= HAL_USART_STATE_READY;
 80032d8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  return HAL_OK;
 80032dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
  /* Check the USART handle allocation */
  if(husart == NULL)
  {
    return HAL_ERROR;
 80032e0:	2001      	movs	r0, #1
  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
  husart->State= HAL_USART_STATE_READY;

  return HAL_OK;
}
 80032e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032e6:	bf00      	nop
 80032e8:	40011000 	.word	0x40011000

080032ec <SDMMC_GetCmdResp2>:
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80032ec:	4b12      	ldr	r3, [pc, #72]	; (8003338 <SDMMC_GetCmdResp2+0x4c>)
 80032ee:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	fbb3 f1f1 	udiv	r1, r3, r1
 80032f8:	f241 3388 	movw	r3, #5000	; 0x1388
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80032fc:	4602      	mov	r2, r0
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80032fe:	434b      	muls	r3, r1
  
  do
  {
    if (count-- == 0U)
 8003300:	f113 33ff 	adds.w	r3, r3, #4294967295
 8003304:	d314      	bcc.n	8003330 <SDMMC_GetCmdResp2+0x44>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8003306:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8003308:	f011 0f45 	tst.w	r1, #69	; 0x45
 800330c:	d0f8      	beq.n	8003300 <SDMMC_GetCmdResp2+0x14>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800330e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003310:	075b      	lsls	r3, r3, #29
 8003312:	d501      	bpl.n	8003318 <SDMMC_GetCmdResp2+0x2c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003314:	2304      	movs	r3, #4
 8003316:	e004      	b.n	8003322 <SDMMC_GetCmdResp2+0x36>
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003318:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800331a:	f013 0001 	ands.w	r0, r3, #1
 800331e:	d003      	beq.n	8003328 <SDMMC_GetCmdResp2+0x3c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003320:	2301      	movs	r3, #1
 8003322:	6393      	str	r3, [r2, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003324:	4618      	mov	r0, r3
 8003326:	4770      	bx	lr
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8003328:	f240 53ff 	movw	r3, #1535	; 0x5ff
 800332c:	6393      	str	r3, [r2, #56]	; 0x38
 800332e:	4770      	bx	lr
  
  do
  {
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
 8003330:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
  }

  return SDMMC_ERROR_NONE;
}
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	20000110 	.word	0x20000110

0800333c <SDMMC_GetCmdResp3>:
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800333c:	4b0f      	ldr	r3, [pc, #60]	; (800337c <SDMMC_GetCmdResp3+0x40>)
 800333e:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	fbb3 f1f1 	udiv	r1, r3, r1
 8003348:	f241 3388 	movw	r3, #5000	; 0x1388
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800334c:	4602      	mov	r2, r0
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800334e:	434b      	muls	r3, r1
  
  do
  {
    if (count-- == 0U)
 8003350:	f113 33ff 	adds.w	r3, r3, #4294967295
 8003354:	d30f      	bcc.n	8003376 <SDMMC_GetCmdResp3+0x3a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8003356:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8003358:	f011 0f45 	tst.w	r1, #69	; 0x45
 800335c:	d0f8      	beq.n	8003350 <SDMMC_GetCmdResp3+0x14>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800335e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003360:	f013 0004 	ands.w	r0, r3, #4
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003364:	bf17      	itett	ne
 8003366:	2304      	movne	r3, #4
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8003368:	f240 53ff 	movweq	r3, #1535	; 0x5ff
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800336c:	4618      	movne	r0, r3
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800336e:	6393      	strne	r3, [r2, #56]	; 0x38
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8003370:	bf08      	it	eq
 8003372:	6393      	streq	r3, [r2, #56]	; 0x38
 8003374:	4770      	bx	lr
  
  do
  {
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
 8003376:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
  }
  
  return SDMMC_ERROR_NONE;
}
 800337a:	4770      	bx	lr
 800337c:	20000110 	.word	0x20000110

08003380 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8003380:	b084      	sub	sp, #16
 8003382:	b510      	push	{r4, lr}
 8003384:	ac03      	add	r4, sp, #12
 8003386:	e884 000e 	stmia.w	r4, {r1, r2, r3}
             Init.HardwareFlowControl |\
             Init.ClockDiv
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800338a:	9b04      	ldr	r3, [sp, #16]
 800338c:	6842      	ldr	r2, [r0, #4]
 800338e:	4319      	orrs	r1, r3
 8003390:	9b05      	ldr	r3, [sp, #20]
 8003392:	4319      	orrs	r1, r3
 8003394:	9b06      	ldr	r3, [sp, #24]
 8003396:	4319      	orrs	r1, r3
 8003398:	9b07      	ldr	r3, [sp, #28]
 800339a:	4319      	orrs	r1, r3
 800339c:	9b08      	ldr	r3, [sp, #32]

  return HAL_OK;
}
 800339e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
             Init.HardwareFlowControl |\
             Init.ClockDiv
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80033a2:	4319      	orrs	r1, r3
 80033a4:	f422 43fd 	bic.w	r3, r2, #32384	; 0x7e80
 80033a8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80033ac:	430b      	orrs	r3, r1
 80033ae:	6043      	str	r3, [r0, #4]

  return HAL_OK;
}
 80033b0:	b004      	add	sp, #16
 80033b2:	2000      	movs	r0, #0
 80033b4:	4770      	bx	lr

080033b6 <SDIO_ReadFIFO>:
 80033b6:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 80033ba:	4770      	bx	lr

080033bc <SDIO_WriteFIFO>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80033bc:	680b      	ldr	r3, [r1, #0]
 80033be:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80

  return HAL_OK;
}
 80033c2:	2000      	movs	r0, #0
 80033c4:	4770      	bx	lr

080033c6 <SDIO_PowerState_ON>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80033c6:	2303      	movs	r3, #3
 80033c8:	6003      	str	r3, [r0, #0]
  
  return HAL_OK;
}
 80033ca:	2000      	movs	r0, #0
 80033cc:	4770      	bx	lr

080033ce <SDIO_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80033ce:	6800      	ldr	r0, [r0, #0]
}
 80033d0:	f000 0003 	and.w	r0, r0, #3
 80033d4:	4770      	bx	lr

080033d6 <SDIO_SendCommand>:
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80033d6:	680b      	ldr	r3, [r1, #0]
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80033d8:	b510      	push	{r4, lr}
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80033da:	6083      	str	r3, [r0, #8]
                       Command->Response         |\
                       Command->WaitForInterrupt |\
                       Command->CPSM);
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80033dc:	684c      	ldr	r4, [r1, #4]
 80033de:	688b      	ldr	r3, [r1, #8]
 80033e0:	68c2      	ldr	r2, [r0, #12]
 80033e2:	431c      	orrs	r4, r3
 80033e4:	68cb      	ldr	r3, [r1, #12]
 80033e6:	6909      	ldr	r1, [r1, #16]
 80033e8:	4323      	orrs	r3, r4
 80033ea:	4319      	orrs	r1, r3
 80033ec:	f422 637f 	bic.w	r3, r2, #4080	; 0xff0
 80033f0:	f023 030f 	bic.w	r3, r3, #15
 80033f4:	430b      	orrs	r3, r1
 80033f6:	60c3      	str	r3, [r0, #12]
  
  return HAL_OK;  
}
 80033f8:	2000      	movs	r0, #0
 80033fa:	bd10      	pop	{r4, pc}

080033fc <SDIO_GetResponse>:
  *            @arg SDIO_RESP1: Response Register 3
  *            @arg SDIO_RESP1: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80033fc:	b082      	sub	sp, #8

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 80033fe:	3014      	adds	r0, #20
 8003400:	4401      	add	r1, r0
  *            @arg SDIO_RESP1: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
  __IO uint32_t tmp = 0U;
 8003402:	2300      	movs	r3, #0
 8003404:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 8003406:	9101      	str	r1, [sp, #4]
  
  return (*(__IO uint32_t *) tmp);
 8003408:	9b01      	ldr	r3, [sp, #4]
 800340a:	6818      	ldr	r0, [r3, #0]
}  
 800340c:	b002      	add	sp, #8
 800340e:	4770      	bx	lr

08003410 <SDMMC_GetCmdResp1>:
{
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003410:	4b45      	ldr	r3, [pc, #276]	; (8003528 <SDMMC_GetCmdResp1+0x118>)
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8003412:	b510      	push	{r4, lr}
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 800341a:	fbb3 f3f4 	udiv	r3, r3, r4
 800341e:	435a      	muls	r2, r3
  
  do
  {
    if (count-- == 0U)
 8003420:	2a00      	cmp	r2, #0
 8003422:	d04b      	beq.n	80034bc <SDMMC_GetCmdResp1+0xac>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8003424:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003426:	f013 0f45 	tst.w	r3, #69	; 0x45
 800342a:	f102 32ff 	add.w	r2, r2, #4294967295
 800342e:	d0f7      	beq.n	8003420 <SDMMC_GetCmdResp1+0x10>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003430:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003432:	075c      	lsls	r4, r3, #29
 8003434:	d501      	bpl.n	800343a <SDMMC_GetCmdResp1+0x2a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003436:	2304      	movs	r3, #4
 8003438:	e004      	b.n	8003444 <SDMMC_GetCmdResp1+0x34>
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800343a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800343c:	f013 0301 	ands.w	r3, r3, #1
 8003440:	d003      	beq.n	800344a <SDMMC_GetCmdResp1+0x3a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003442:	2301      	movs	r3, #1
 8003444:	6383      	str	r3, [r0, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003446:	4618      	mov	r0, r3
 8003448:	bd10      	pop	{r4, pc}
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
  return (uint8_t)(SDIOx->RESPCMD);
 800344a:	6902      	ldr	r2, [r0, #16]
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800344c:	b2d2      	uxtb	r2, r2
 800344e:	4291      	cmp	r1, r2
 8003450:	d137      	bne.n	80034c2 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8003452:	f240 52ff 	movw	r2, #1535	; 0x5ff
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003456:	4619      	mov	r1, r3
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8003458:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800345a:	f7ff ffcf 	bl	80033fc <SDIO_GetResponse>
 800345e:	4603      	mov	r3, r0
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003460:	4832      	ldr	r0, [pc, #200]	; (800352c <SDMMC_GetCmdResp1+0x11c>)
 8003462:	4018      	ands	r0, r3
 8003464:	2800      	cmp	r0, #0
 8003466:	d05e      	beq.n	8003526 <SDMMC_GetCmdResp1+0x116>
  {
    return SDMMC_ERROR_NONE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8003468:	2b00      	cmp	r3, #0
 800346a:	db2c      	blt.n	80034c6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800346c:	005a      	lsls	r2, r3, #1
 800346e:	d42d      	bmi.n	80034cc <SDMMC_GetCmdResp1+0xbc>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003470:	009c      	lsls	r4, r3, #2
 8003472:	d42d      	bmi.n	80034d0 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8003474:	00d9      	lsls	r1, r3, #3
 8003476:	d42d      	bmi.n	80034d4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8003478:	011a      	lsls	r2, r3, #4
 800347a:	d42e      	bmi.n	80034da <SDMMC_GetCmdResp1+0xca>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800347c:	015c      	lsls	r4, r3, #5
 800347e:	d42f      	bmi.n	80034e0 <SDMMC_GetCmdResp1+0xd0>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003480:	01d9      	lsls	r1, r3, #7
 8003482:	d430      	bmi.n	80034e6 <SDMMC_GetCmdResp1+0xd6>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8003484:	021a      	lsls	r2, r3, #8
 8003486:	d431      	bmi.n	80034ec <SDMMC_GetCmdResp1+0xdc>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8003488:	025c      	lsls	r4, r3, #9
 800348a:	d432      	bmi.n	80034f2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800348c:	0299      	lsls	r1, r3, #10
 800348e:	d433      	bmi.n	80034f8 <SDMMC_GetCmdResp1+0xe8>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003490:	02da      	lsls	r2, r3, #11
 8003492:	d434      	bmi.n	80034fe <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8003494:	035c      	lsls	r4, r3, #13
 8003496:	d435      	bmi.n	8003504 <SDMMC_GetCmdResp1+0xf4>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8003498:	0399      	lsls	r1, r3, #14
 800349a:	d436      	bmi.n	800350a <SDMMC_GetCmdResp1+0xfa>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800349c:	03da      	lsls	r2, r3, #15
 800349e:	d437      	bmi.n	8003510 <SDMMC_GetCmdResp1+0x100>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80034a0:	041c      	lsls	r4, r3, #16
 80034a2:	d438      	bmi.n	8003516 <SDMMC_GetCmdResp1+0x106>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80034a4:	0459      	lsls	r1, r3, #17
 80034a6:	d439      	bmi.n	800351c <SDMMC_GetCmdResp1+0x10c>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80034a8:	049a      	lsls	r2, r3, #18
 80034aa:	d43a      	bmi.n	8003522 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80034ac:	f013 0f08 	tst.w	r3, #8
 80034b0:	bf14      	ite	ne
 80034b2:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 80034b6:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80034ba:	bd10      	pop	{r4, pc}
  
  do
  {
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
 80034bc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80034c0:	bd10      	pop	{r4, pc}
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80034c2:	2001      	movs	r0, #1
 80034c4:	bd10      	pop	{r4, pc}
  {
    return SDMMC_ERROR_NONE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80034c6:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80034ca:	bd10      	pop	{r4, pc}
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80034cc:	2040      	movs	r0, #64	; 0x40
 80034ce:	bd10      	pop	{r4, pc}
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80034d0:	2080      	movs	r0, #128	; 0x80
 80034d2:	bd10      	pop	{r4, pc}
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80034d4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80034d8:	bd10      	pop	{r4, pc}
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80034da:	f44f 7000 	mov.w	r0, #512	; 0x200
 80034de:	bd10      	pop	{r4, pc}
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80034e0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80034e4:	bd10      	pop	{r4, pc}
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80034e6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80034ea:	bd10      	pop	{r4, pc}
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80034ec:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80034f0:	bd10      	pop	{r4, pc}
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80034f2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80034f6:	bd10      	pop	{r4, pc}
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80034f8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80034fc:	bd10      	pop	{r4, pc}
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
  {
    return SDMMC_ERROR_CC_ERR;
 80034fe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003502:	bd10      	pop	{r4, pc}
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8003504:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003508:	bd10      	pop	{r4, pc}
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800350a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800350e:	bd10      	pop	{r4, pc}
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8003510:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003514:	bd10      	pop	{r4, pc}
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003516:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800351a:	bd10      	pop	{r4, pc}
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800351c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003520:	bd10      	pop	{r4, pc}
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
  {
    return SDMMC_ERROR_ERASE_RESET;
 8003522:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
  }
}
 8003526:	bd10      	pop	{r4, pc}
 8003528:	20000110 	.word	0x20000110
 800352c:	fdffe008 	.word	0xfdffe008

08003530 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8003530:	b510      	push	{r4, lr}
                       Data->TransferDir   |\
                       Data->TransferMode  |\
                       Data->DPSM);
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003532:	68ca      	ldr	r2, [r1, #12]
 8003534:	688c      	ldr	r4, [r1, #8]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8003536:	680b      	ldr	r3, [r1, #0]
 8003538:	6243      	str	r3, [r0, #36]	; 0x24
                       Data->TransferDir   |\
                       Data->TransferMode  |\
                       Data->DPSM);
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800353a:	4314      	orrs	r4, r2

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800353c:	684b      	ldr	r3, [r1, #4]
                       Data->TransferDir   |\
                       Data->TransferMode  |\
                       Data->DPSM);
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800353e:	690a      	ldr	r2, [r1, #16]

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8003540:	6283      	str	r3, [r0, #40]	; 0x28
                       Data->TransferDir   |\
                       Data->TransferMode  |\
                       Data->DPSM);
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003542:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003544:	4314      	orrs	r4, r2
 8003546:	694a      	ldr	r2, [r1, #20]
 8003548:	f023 03f7 	bic.w	r3, r3, #247	; 0xf7
 800354c:	4322      	orrs	r2, r4
 800354e:	4313      	orrs	r3, r2
 8003550:	62c3      	str	r3, [r0, #44]	; 0x2c

  return HAL_OK;

}
 8003552:	2000      	movs	r0, #0
 8003554:	bd10      	pop	{r4, pc}

08003556 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8003556:	b530      	push	{r4, r5, lr}
 8003558:	b087      	sub	sp, #28
  uint32_t errorstate = SDMMC_ERROR_NONE;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800355a:	2340      	movs	r3, #64	; 0x40
 800355c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800355e:	2300      	movs	r3, #0
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8003560:	4605      	mov	r5, r0
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8003562:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8003564:	2410      	movs	r4, #16
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003566:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003568:	a901      	add	r1, sp, #4
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800356a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800356e:	9305      	str	r3, [sp, #20]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8003570:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003572:	f7ff ff30 	bl	80033d6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8003576:	f241 3288 	movw	r2, #5000	; 0x1388
 800357a:	4621      	mov	r1, r4
 800357c:	4628      	mov	r0, r5
 800357e:	f7ff ff47 	bl	8003410 <SDMMC_GetCmdResp1>

  return errorstate;
}
 8003582:	b007      	add	sp, #28
 8003584:	bd30      	pop	{r4, r5, pc}

08003586 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003586:	b530      	push	{r4, r5, lr}
 8003588:	b087      	sub	sp, #28
  uint32_t errorstate = SDMMC_ERROR_NONE;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800358a:	2340      	movs	r3, #64	; 0x40
 800358c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800358e:	2300      	movs	r3, #0
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003590:	4605      	mov	r5, r0
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003592:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8003594:	2411      	movs	r4, #17
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003596:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003598:	a901      	add	r1, sp, #4
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800359a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800359e:	9305      	str	r3, [sp, #20]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80035a0:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80035a2:	f7ff ff18 	bl	80033d6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80035a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035aa:	4621      	mov	r1, r4
 80035ac:	4628      	mov	r0, r5
 80035ae:	f7ff ff2f 	bl	8003410 <SDMMC_GetCmdResp1>

  return errorstate;
}
 80035b2:	b007      	add	sp, #28
 80035b4:	bd30      	pop	{r4, r5, pc}

080035b6 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80035b6:	b530      	push	{r4, r5, lr}
 80035b8:	b087      	sub	sp, #28
  uint32_t errorstate = SDMMC_ERROR_NONE;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80035ba:	2340      	movs	r3, #64	; 0x40
 80035bc:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80035be:	2300      	movs	r3, #0
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80035c0:	4605      	mov	r5, r0
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80035c2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80035c4:	2412      	movs	r4, #18
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80035c6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80035c8:	a901      	add	r1, sp, #4
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80035ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035ce:	9305      	str	r3, [sp, #20]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80035d0:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80035d2:	f7ff ff00 	bl	80033d6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80035d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035da:	4621      	mov	r1, r4
 80035dc:	4628      	mov	r0, r5
 80035de:	f7ff ff17 	bl	8003410 <SDMMC_GetCmdResp1>

  return errorstate;
}
 80035e2:	b007      	add	sp, #28
 80035e4:	bd30      	pop	{r4, r5, pc}

080035e6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80035e6:	b530      	push	{r4, r5, lr}
 80035e8:	b087      	sub	sp, #28
  uint32_t errorstate = SDMMC_ERROR_NONE;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80035ea:	2340      	movs	r3, #64	; 0x40
 80035ec:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80035ee:	2300      	movs	r3, #0
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80035f0:	4605      	mov	r5, r0
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80035f2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80035f4:	2418      	movs	r4, #24
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80035f6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80035f8:	a901      	add	r1, sp, #4
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80035fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035fe:	9305      	str	r3, [sp, #20]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8003600:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003602:	f7ff fee8 	bl	80033d6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003606:	f241 3288 	movw	r2, #5000	; 0x1388
 800360a:	4621      	mov	r1, r4
 800360c:	4628      	mov	r0, r5
 800360e:	f7ff feff 	bl	8003410 <SDMMC_GetCmdResp1>

  return errorstate;
}
 8003612:	b007      	add	sp, #28
 8003614:	bd30      	pop	{r4, r5, pc}

08003616 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003616:	b530      	push	{r4, r5, lr}
 8003618:	b087      	sub	sp, #28
  uint32_t errorstate = SDMMC_ERROR_NONE;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800361a:	2340      	movs	r3, #64	; 0x40
 800361c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800361e:	2300      	movs	r3, #0
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003620:	4605      	mov	r5, r0
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003622:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8003624:	2419      	movs	r4, #25
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003626:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003628:	a901      	add	r1, sp, #4
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800362a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800362e:	9305      	str	r3, [sp, #20]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8003630:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003632:	f7ff fed0 	bl	80033d6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003636:	f241 3288 	movw	r2, #5000	; 0x1388
 800363a:	4621      	mov	r1, r4
 800363c:	4628      	mov	r0, r5
 800363e:	f7ff fee7 	bl	8003410 <SDMMC_GetCmdResp1>

  return errorstate;
}
 8003642:	b007      	add	sp, #28
 8003644:	bd30      	pop	{r4, r5, pc}
	...

08003648 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8003648:	b530      	push	{r4, r5, lr}
 800364a:	b087      	sub	sp, #28
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800364c:	2300      	movs	r3, #0
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800364e:	4605      	mov	r5, r0
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8003650:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003652:	240c      	movs	r4, #12
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003654:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003656:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003658:	a901      	add	r1, sp, #4
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800365a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  uint32_t errorstate = SDMMC_ERROR_NONE;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800365e:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003660:	9305      	str	r3, [sp, #20]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003662:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003664:	f7ff feb7 	bl	80033d6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 8003668:	4a03      	ldr	r2, [pc, #12]	; (8003678 <SDMMC_CmdStopTransfer+0x30>)
 800366a:	4621      	mov	r1, r4
 800366c:	4628      	mov	r0, r5
 800366e:	f7ff fecf 	bl	8003410 <SDMMC_GetCmdResp1>

  return errorstate;
}
 8003672:	b007      	add	sp, #28
 8003674:	bd30      	pop	{r4, r5, pc}
 8003676:	bf00      	nop
 8003678:	05f5e100 	.word	0x05f5e100

0800367c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800367c:	b530      	push	{r4, r5, lr}
 800367e:	b087      	sub	sp, #28
  uint32_t errorstate = SDMMC_ERROR_NONE;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003680:	2340      	movs	r3, #64	; 0x40
 8003682:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003684:	2300      	movs	r3, #0
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8003686:	4605      	mov	r5, r0
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8003688:	2407      	movs	r4, #7
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800368a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800368c:	a901      	add	r1, sp, #4
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800368e:	f44f 6380 	mov.w	r3, #1024	; 0x400
{
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8003692:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003694:	9305      	str	r3, [sp, #20]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8003696:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003698:	f7ff fe9d 	bl	80033d6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800369c:	f241 3288 	movw	r2, #5000	; 0x1388
 80036a0:	4621      	mov	r1, r4
 80036a2:	4628      	mov	r0, r5
 80036a4:	f7ff feb4 	bl	8003410 <SDMMC_GetCmdResp1>

  return errorstate;
}
 80036a8:	b007      	add	sp, #28
 80036aa:	bd30      	pop	{r4, r5, pc}

080036ac <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80036ac:	b510      	push	{r4, lr}
 80036ae:	b086      	sub	sp, #24
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
  
  sdmmc_cmdinit.Argument         = 0U;
 80036b0:	2300      	movs	r3, #0
 80036b2:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80036b4:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80036b6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80036b8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80036ba:	a901      	add	r1, sp, #4
  
  sdmmc_cmdinit.Argument         = 0U;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80036bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036c0:	9305      	str	r3, [sp, #20]
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80036c2:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80036c4:	f7ff fe87 	bl	80033d6 <SDIO_SendCommand>
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80036c8:	4b0b      	ldr	r3, [pc, #44]	; (80036f8 <SDMMC_CmdGoIdleState+0x4c>)
 80036ca:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	fbb3 f2f2 	udiv	r2, r3, r2
 80036d4:	f241 3388 	movw	r3, #5000	; 0x1388
 80036d8:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 80036da:	f113 33ff 	adds.w	r3, r3, #4294967295
 80036de:	d307      	bcc.n	80036f0 <SDMMC_CmdGoIdleState+0x44>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80036e0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80036e2:	0612      	lsls	r2, r2, #24
 80036e4:	d5f9      	bpl.n	80036da <SDMMC_CmdGoIdleState+0x2e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80036e6:	f240 53ff 	movw	r3, #1535	; 0x5ff
 80036ea:	63a3      	str	r3, [r4, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80036ec:	2000      	movs	r0, #0
 80036ee:	e001      	b.n	80036f4 <SDMMC_CmdGoIdleState+0x48>
  
  do
  {
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
 80036f0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);

  return errorstate;
}
 80036f4:	b006      	add	sp, #24
 80036f6:	bd10      	pop	{r4, pc}
 80036f8:	20000110 	.word	0x20000110

080036fc <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80036fc:	b510      	push	{r4, lr}
 80036fe:	b086      	sub	sp, #24
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8003700:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8003704:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8003706:	2308      	movs	r3, #8
 8003708:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800370a:	2340      	movs	r3, #64	; 0x40
 800370c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800370e:	2300      	movs	r3, #0
 8003710:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003712:	a901      	add	r1, sp, #4
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003714:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003718:	9305      	str	r3, [sp, #20]
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800371a:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800371c:	f7ff fe5b 	bl	80033d6 <SDIO_SendCommand>
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003720:	4b11      	ldr	r3, [pc, #68]	; (8003768 <SDMMC_CmdOperCond+0x6c>)
 8003722:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	fbb3 f2f2 	udiv	r2, r3, r2
 800372c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003730:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8003732:	f113 33ff 	adds.w	r3, r3, #4294967295
 8003736:	d313      	bcc.n	8003760 <SDMMC_CmdOperCond+0x64>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8003738:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800373a:	f012 0f45 	tst.w	r2, #69	; 0x45
 800373e:	d0f8      	beq.n	8003732 <SDMMC_CmdOperCond+0x36>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003740:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003742:	f013 0304 	ands.w	r3, r3, #4
 8003746:	d003      	beq.n	8003750 <SDMMC_CmdOperCond+0x54>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8003748:	2340      	movs	r3, #64	; 0x40
 800374a:	63a3      	str	r3, [r4, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800374c:	2004      	movs	r0, #4
 800374e:	e009      	b.n	8003764 <SDMMC_CmdOperCond+0x68>
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8003750:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003752:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8003756:	d005      	beq.n	8003764 <SDMMC_CmdOperCond+0x68>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8003758:	2240      	movs	r2, #64	; 0x40
 800375a:	63a2      	str	r2, [r4, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800375c:	4618      	mov	r0, r3
 800375e:	e001      	b.n	8003764 <SDMMC_CmdOperCond+0x68>
  
  do
  {
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
 8003760:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);

  return errorstate;
}
 8003764:	b006      	add	sp, #24
 8003766:	bd10      	pop	{r4, pc}
 8003768:	20000110 	.word	0x20000110

0800376c <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800376c:	b530      	push	{r4, r5, lr}
 800376e:	b087      	sub	sp, #28
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003770:	2340      	movs	r3, #64	; 0x40
 8003772:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003774:	2300      	movs	r3, #0
  *         and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003776:	4605      	mov	r5, r0
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003778:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800377a:	2437      	movs	r4, #55	; 0x37
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800377c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800377e:	a901      	add	r1, sp, #4
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003780:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003784:	9305      	str	r3, [sp, #20]
{
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8003786:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003788:	f7ff fe25 	bl	80033d6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800378c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003790:	4621      	mov	r1, r4
 8003792:	4628      	mov	r0, r5
 8003794:	f7ff fe3c 	bl	8003410 <SDMMC_GetCmdResp1>

  return errorstate;
}
 8003798:	b007      	add	sp, #28
 800379a:	bd30      	pop	{r4, r5, pc}

0800379c <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t SdType)
{
 800379c:	b510      	push	{r4, lr}
 800379e:	b086      	sub	sp, #24
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80037a0:	2329      	movs	r3, #41	; 0x29
 80037a2:	9302      	str	r3, [sp, #8]
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t SdType)
{
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 80037a4:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80037a8:	2340      	movs	r3, #64	; 0x40
 80037aa:	9303      	str	r3, [sp, #12]
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t SdType)
{
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 80037ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80037b0:	2300      	movs	r3, #0
  *         condition register (OCR)
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t SdType)
{
 80037b2:	4604      	mov	r4, r0
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 80037b4:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80037b6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80037b8:	a901      	add	r1, sp, #4
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80037ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037be:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80037c0:	f7ff fe09 	bl	80033d6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80037c4:	4620      	mov	r0, r4
 80037c6:	f7ff fdb9 	bl	800333c <SDMMC_GetCmdResp3>

  return errorstate;
}
 80037ca:	b006      	add	sp, #24
 80037cc:	bd10      	pop	{r4, pc}

080037ce <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80037ce:	b530      	push	{r4, r5, lr}
 80037d0:	b087      	sub	sp, #28
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80037d2:	2300      	movs	r3, #0
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80037d4:	4605      	mov	r5, r0
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80037d6:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80037d8:	2433      	movs	r4, #51	; 0x33
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80037da:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80037dc:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80037de:	a901      	add	r1, sp, #4
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80037e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  uint32_t errorstate = SDMMC_ERROR_NONE;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80037e4:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80037e6:	9305      	str	r3, [sp, #20]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80037e8:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80037ea:	f7ff fdf4 	bl	80033d6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80037ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f2:	4621      	mov	r1, r4
 80037f4:	4628      	mov	r0, r5
 80037f6:	f7ff fe0b 	bl	8003410 <SDMMC_GetCmdResp1>

  return errorstate;
}
 80037fa:	b007      	add	sp, #28
 80037fc:	bd30      	pop	{r4, r5, pc}

080037fe <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80037fe:	b510      	push	{r4, lr}
 8003800:	b086      	sub	sp, #24
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8003802:	2300      	movs	r3, #0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8003804:	2202      	movs	r2, #2
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8003806:	4604      	mov	r4, r0
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8003808:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800380a:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800380c:	9304      	str	r3, [sp, #16]
  uint32_t errorstate = SDMMC_ERROR_NONE;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800380e:	22c0      	movs	r2, #192	; 0xc0
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003810:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003814:	a901      	add	r1, sp, #4
  uint32_t errorstate = SDMMC_ERROR_NONE;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003816:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003818:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800381a:	f7ff fddc 	bl	80033d6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800381e:	4620      	mov	r0, r4
 8003820:	f7ff fd64 	bl	80032ec <SDMMC_GetCmdResp2>

  return errorstate;
}
 8003824:	b006      	add	sp, #24
 8003826:	bd10      	pop	{r4, pc}

08003828 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003828:	b510      	push	{r4, lr}
 800382a:	b086      	sub	sp, #24
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800382c:	2309      	movs	r3, #9
 800382e:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003830:	23c0      	movs	r3, #192	; 0xc0
 8003832:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003834:	2300      	movs	r3, #0
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003836:	4604      	mov	r4, r0
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003838:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800383a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800383c:	a901      	add	r1, sp, #4
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800383e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003842:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003844:	f7ff fdc7 	bl	80033d6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003848:	4620      	mov	r0, r4
 800384a:	f7ff fd4f 	bl	80032ec <SDMMC_GetCmdResp2>

  return errorstate;
}
 800384e:	b006      	add	sp, #24
 8003850:	bd10      	pop	{r4, pc}
	...

08003854 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8003854:	b530      	push	{r4, r5, lr}
 8003856:	b087      	sub	sp, #28
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8003858:	2300      	movs	r3, #0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800385a:	2203      	movs	r2, #3
{
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800385c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800385e:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003860:	9304      	str	r3, [sp, #16]
  uint32_t errorstate = SDMMC_ERROR_NONE;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003862:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003864:	f44f 6380 	mov.w	r3, #1024	; 0x400
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8003868:	460d      	mov	r5, r1
  sdmmc_cmdinit.Argument         = 0U;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800386a:	a901      	add	r1, sp, #4
  uint32_t errorstate = SDMMC_ERROR_NONE;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800386c:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800386e:	9305      	str	r3, [sp, #20]
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8003870:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003872:	f7ff fdb0 	bl	80033d6 <SDIO_SendCommand>
{
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003876:	4b20      	ldr	r3, [pc, #128]	; (80038f8 <SDMMC_CmdSetRelAdd+0xa4>)
 8003878:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003882:	f241 3388 	movw	r3, #5000	; 0x1388
 8003886:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8003888:	f113 33ff 	adds.w	r3, r3, #4294967295
 800388c:	d329      	bcc.n	80038e2 <SDMMC_CmdSetRelAdd+0x8e>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800388e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003890:	f012 0f45 	tst.w	r2, #69	; 0x45
 8003894:	d0f8      	beq.n	8003888 <SDMMC_CmdSetRelAdd+0x34>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003896:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003898:	0759      	lsls	r1, r3, #29
 800389a:	d501      	bpl.n	80038a0 <SDMMC_CmdSetRelAdd+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800389c:	2304      	movs	r3, #4
 800389e:	e004      	b.n	80038aa <SDMMC_CmdSetRelAdd+0x56>
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80038a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80038a2:	f011 0101 	ands.w	r1, r1, #1
 80038a6:	d002      	beq.n	80038ae <SDMMC_CmdSetRelAdd+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80038a8:	2301      	movs	r3, #1
 80038aa:	63a3      	str	r3, [r4, #56]	; 0x38
 80038ac:	e020      	b.n	80038f0 <SDMMC_CmdSetRelAdd+0x9c>
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
  return (uint8_t)(SDIOx->RESPCMD);
 80038ae:	6923      	ldr	r3, [r4, #16]
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b03      	cmp	r3, #3
 80038b4:	d118      	bne.n	80038e8 <SDMMC_CmdSetRelAdd+0x94>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80038b6:	f240 53ff 	movw	r3, #1535	; 0x5ff
 80038ba:	63a3      	str	r3, [r4, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80038bc:	4620      	mov	r0, r4
 80038be:	f7ff fd9d 	bl	80033fc <SDIO_GetResponse>
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80038c2:	f410 4360 	ands.w	r3, r0, #57344	; 0xe000
 80038c6:	d102      	bne.n	80038ce <SDMMC_CmdSetRelAdd+0x7a>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80038c8:	0c00      	lsrs	r0, r0, #16
 80038ca:	8028      	strh	r0, [r5, #0]
 80038cc:	e010      	b.n	80038f0 <SDMMC_CmdSetRelAdd+0x9c>
    
    return SDMMC_ERROR_NONE;
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80038ce:	0442      	lsls	r2, r0, #17
 80038d0:	d40c      	bmi.n	80038ec <SDMMC_CmdSetRelAdd+0x98>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80038d2:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80038d6:	bf14      	ite	ne
 80038d8:	f44f 5380 	movne.w	r3, #4096	; 0x1000
 80038dc:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80038e0:	e006      	b.n	80038f0 <SDMMC_CmdSetRelAdd+0x9c>
  
  do
  {
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
 80038e2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80038e6:	e003      	b.n	80038f0 <SDMMC_CmdSetRelAdd+0x9c>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e001      	b.n	80038f0 <SDMMC_CmdSetRelAdd+0x9c>
    
    return SDMMC_ERROR_NONE;
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80038ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);

  return errorstate;
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	b007      	add	sp, #28
 80038f4:	bd30      	pop	{r4, r5, pc}
 80038f6:	bf00      	nop
 80038f8:	20000110 	.word	0x20000110

080038fc <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80038fc:	b530      	push	{r4, r5, lr}
 80038fe:	b087      	sub	sp, #28
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003900:	2340      	movs	r3, #64	; 0x40
 8003902:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003904:	2300      	movs	r3, #0
  * @brief  Send the Status command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003906:	4605      	mov	r5, r0
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003908:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800390a:	240d      	movs	r4, #13
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800390c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800390e:	a901      	add	r1, sp, #4
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003910:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003914:	9305      	str	r3, [sp, #20]
{
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8003916:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003918:	f7ff fd5d 	bl	80033d6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800391c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003920:	4621      	mov	r1, r4
 8003922:	4628      	mov	r0, r5
 8003924:	f7ff fd74 	bl	8003410 <SDMMC_GetCmdResp1>

  return errorstate;
}
 8003928:	b007      	add	sp, #28
 800392a:	bd30      	pop	{r4, r5, pc}

0800392c <SDMMC_CmdSwitch>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdSwitch(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800392c:	b530      	push	{r4, r5, lr}
 800392e:	b087      	sub	sp, #28
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
  
  sdmmc_cmdinit.Argument         = Argument;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003930:	2340      	movs	r3, #64	; 0x40
 8003932:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003934:	2300      	movs	r3, #0
  * @param  SDIOx: Pointer to SDIO register base 
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdSwitch(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003936:	4605      	mov	r5, r0
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
  
  sdmmc_cmdinit.Argument         = Argument;
 8003938:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 800393a:	2406      	movs	r4, #6
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800393c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800393e:	a901      	add	r1, sp, #4
  
  sdmmc_cmdinit.Argument         = Argument;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003940:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003944:	9305      	str	r3, [sp, #20]
{
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
  
  sdmmc_cmdinit.Argument         = Argument;
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 8003946:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003948:	f7ff fd45 	bl	80033d6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_HS_SWITCH, SDIO_CMDTIMEOUT);
 800394c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003950:	4621      	mov	r1, r4
 8003952:	4628      	mov	r0, r5
 8003954:	f7ff fd5c 	bl	8003410 <SDMMC_GetCmdResp1>

  return errorstate;
}
 8003958:	b007      	add	sp, #28
 800395a:	bd30      	pop	{r4, r5, pc}

0800395c <SDMMC_CmdBusWidth>:
 800395c:	f7ff bfe6 	b.w	800392c <SDMMC_CmdSwitch>

08003960 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003960:	b084      	sub	sp, #16
 8003962:	b538      	push	{r3, r4, r5, lr}
 8003964:	ad05      	add	r5, sp, #20
 8003966:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800396a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800396c:	2b01      	cmp	r3, #1
  * @param  cfg : pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800396e:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003970:	d117      	bne.n	80039a2 <USB_CoreInit+0x42>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003972:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003974:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003978:	6383      	str	r3, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800397a:	68c3      	ldr	r3, [r0, #12]
 800397c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003980:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003984:	60c3      	str	r3, [r0, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003986:	68c3      	ldr	r3, [r0, #12]
 8003988:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800398c:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1U)
 800398e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003990:	2b01      	cmp	r3, #1
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003992:	bf02      	ittt	eq
 8003994:	68c3      	ldreq	r3, [r0, #12]
 8003996:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 800399a:	60c3      	streq	r3, [r0, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 800399c:	f000 fc9c 	bl	80042d8 <USB_CoreReset>
 80039a0:	e008      	b.n	80039b4 <USB_CoreInit+0x54>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80039a2:	68c3      	ldr	r3, [r0, #12]
 80039a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039a8:	60c3      	str	r3, [r0, #12]
    
    /* Reset after a PHY select and set Host mode */
    USB_CoreReset(USBx);
 80039aa:	f000 fc95 	bl	80042d8 <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 80039ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80039b2:	63a3      	str	r3, [r4, #56]	; 0x38
  }
 
  if(cfg.dma_enable == ENABLE)
 80039b4:	9b08      	ldr	r3, [sp, #32]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d107      	bne.n	80039ca <USB_CoreInit+0x6a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80039ba:	68a3      	ldr	r3, [r4, #8]
 80039bc:	f043 0306 	orr.w	r3, r3, #6
 80039c0:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80039c2:	68a3      	ldr	r3, [r4, #8]
 80039c4:	f043 0320 	orr.w	r3, r3, #32
 80039c8:	60a3      	str	r3, [r4, #8]
  }  

  return HAL_OK;
}
 80039ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80039ce:	2000      	movs	r0, #0
 80039d0:	b004      	add	sp, #16
 80039d2:	4770      	bx	lr

080039d4 <USB_EnableGlobalInt>:
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80039d4:	6883      	ldr	r3, [r0, #8]
 80039d6:	f043 0301 	orr.w	r3, r3, #1
 80039da:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 80039dc:	2000      	movs	r0, #0
 80039de:	4770      	bx	lr

080039e0 <USB_DisableGlobalInt>:
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80039e0:	6883      	ldr	r3, [r0, #8]
 80039e2:	f023 0301 	bic.w	r3, r3, #1
 80039e6:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 80039e8:	2000      	movs	r0, #0
 80039ea:	4770      	bx	lr

080039ec <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 80039ec:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 80039ee:	68c3      	ldr	r3, [r0, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 80039f0:	2901      	cmp	r1, #1
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 80039f2:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80039f6:	60c3      	str	r3, [r0, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 80039f8:	d104      	bne.n	8003a04 <USB_SetCurrentMode+0x18>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 80039fa:	68c3      	ldr	r3, [r0, #12]
 80039fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a00:	60c3      	str	r3, [r0, #12]
 8003a02:	e004      	b.n	8003a0e <USB_SetCurrentMode+0x22>
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
 8003a04:	b919      	cbnz	r1, 8003a0e <USB_SetCurrentMode+0x22>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 8003a06:	68c3      	ldr	r3, [r0, #12]
 8003a08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a0c:	60c3      	str	r3, [r0, #12]
  }
  HAL_Delay(50U);
 8003a0e:	2032      	movs	r0, #50	; 0x32
 8003a10:	f7fc fc16 	bl	8000240 <HAL_Delay>
  
  return HAL_OK;
}
 8003a14:	2000      	movs	r0, #0
 8003a16:	bd08      	pop	{r3, pc}

08003a18 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a18:	b084      	sub	sp, #16
 8003a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a1e:	4604      	mov	r4, r0
 8003a20:	a807      	add	r0, sp, #28
 8003a22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8003a26:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8003a28:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
  }
#else
  if (cfg.vbus_sensing_enable == 0U)
  {
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003a2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003a2c:	4688      	mov	r8, r1
    /* B-peripheral session valid override enable*/ 
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
  }
#else
  if (cfg.vbus_sensing_enable == 0U)
 8003a2e:	b91e      	cbnz	r6, 8003a38 <USB_DevInit+0x20>
  {
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003a30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003a34:	63a3      	str	r3, [r4, #56]	; 0x38
 8003a36:	e002      	b.n	8003a3e <USB_DevInit+0x26>
  }
  else
  {
    /* Enable VBUS */
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003a38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a3c:	63a3      	str	r3, [r4, #56]	; 0x38
  }
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx || STM32F413xx || STM32F423xx  */
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  
  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003a44:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8003a48:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 8003a4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003a4e:	2b01      	cmp	r3, #1
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
  
  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003a50:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 8003a54:	d106      	bne.n	8003a64 <USB_DevInit+0x4c>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 8003a56:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003a58:	b129      	cbz	r1, 8003a66 <USB_DevInit+0x4e>
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH);
    }
    else 
    {
      /* set High speed phy in Full speed mode */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	4620      	mov	r0, r4
 8003a5e:	f000 f897 	bl	8003b90 <USB_SetDevSpeed>
 8003a62:	e003      	b.n	8003a6c <USB_DevInit+0x54>
    }
  }
  else
  {
    /* Set Full speed phy */
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 8003a64:	2103      	movs	r1, #3
 8003a66:	4620      	mov	r0, r4
 8003a68:	f000 f892 	bl	8003b90 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10U); /* all Tx FIFOs */
 8003a6c:	2110      	movs	r1, #16
 8003a6e:	4620      	mov	r0, r4
 8003a70:	f000 f86c 	bl	8003b4c <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8003a74:	4620      	mov	r0, r4
 8003a76:	f000 f87b 	bl	8003b70 <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003a7a:	2300      	movs	r3, #0
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8003a7c:	f04f 32ff 	mov.w	r2, #4294967295
  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10U); /* all Tx FIFOs */
  USB_FlushRxFifo(USBx);
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003a80:	612b      	str	r3, [r5, #16]
 8003a82:	4619      	mov	r1, r3
  USBx_DEVICE->DOEPMSK = 0U;
 8003a84:	616b      	str	r3, [r5, #20]
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8003a86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  USB_FlushRxFifo(USBx);
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8003a8a:	61aa      	str	r2, [r5, #24]
    {
      USBx_INEP(i)->DIEPCTL = 0U;
    }
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 8003a8c:	f04f 0eff 	mov.w	lr, #255	; 0xff
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
  USBx_DEVICE->DAINTMSK = 0U;
 8003a90:	61eb      	str	r3, [r5, #28]
 8003a92:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a96:	4543      	cmp	r3, r8
 8003a98:	d00c      	beq.n	8003ab4 <USB_DevInit+0x9c>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a9a:	f8d2 c000 	ldr.w	ip, [r2]
 8003a9e:	f1bc 0f00 	cmp.w	ip, #0
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8003aa2:	bfb4      	ite	lt
 8003aa4:	6010      	strlt	r0, [r2, #0]
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003aa6:	6011      	strge	r1, [r2, #0]
  USBx_DEVICE->DIEPMSK = 0U;
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
  USBx_DEVICE->DAINTMSK = 0U;
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003aa8:	3301      	adds	r3, #1
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
    }
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003aaa:	6111      	str	r1, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 8003aac:	f8c2 e008 	str.w	lr, [r2, #8]
 8003ab0:	3220      	adds	r2, #32
 8003ab2:	e7f0      	b.n	8003a96 <USB_DevInit+0x7e>
  USBx_DEVICE->DIEPMSK = 0U;
  USBx_DEVICE->DOEPMSK = 0U;
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
  USBx_DEVICE->DAINTMSK = 0U;
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 8003aba:	4611      	mov	r1, r2
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8003abc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
    }
    
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 8003ac0:	f04f 0eff 	mov.w	lr, #255	; 0xff
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
    USBx_INEP(i)->DIEPINT  = 0xFFU;
  }
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ac4:	4542      	cmp	r2, r8
 8003ac6:	d00c      	beq.n	8003ae2 <USB_DevInit+0xca>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ac8:	f8d3 c000 	ldr.w	ip, [r3]
 8003acc:	f1bc 0f00 	cmp.w	ip, #0
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8003ad0:	bfb4      	ite	lt
 8003ad2:	6018      	strlt	r0, [r3, #0]
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003ad4:	6019      	strge	r1, [r3, #0]
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
    USBx_INEP(i)->DIEPINT  = 0xFFU;
  }
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ad6:	3201      	adds	r2, #1
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
    }
    
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003ad8:	6119      	str	r1, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 8003ada:	f8c3 e008 	str.w	lr, [r3, #8]
 8003ade:	3320      	adds	r3, #32
 8003ae0:	e7f0      	b.n	8003ac4 <USB_DevInit+0xac>
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003ae2:	692b      	ldr	r3, [r5, #16]
  
  if (cfg.dma_enable == 1U)
 8003ae4:	2f01      	cmp	r7, #1
    
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003ae6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003aea:	612b      	str	r3, [r5, #16]
  
  if (cfg.dma_enable == 1U)
 8003aec:	d108      	bne.n	8003b00 <USB_DevInit+0xe8>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 8003aee:	4b15      	ldr	r3, [pc, #84]	; (8003b44 <USB_DevInit+0x12c>)
 8003af0:	632b      	str	r3, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 8003af2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003af8:	f043 0303 	orr.w	r3, r3, #3
 8003afc:	632b      	str	r3, [r5, #48]	; 0x30
    
    i= USBx_DEVICE->DTHRCTL;
 8003afe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	61a3      	str	r3, [r4, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003b04:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8003b08:	6163      	str	r3, [r4, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 8003b0a:	b91f      	cbnz	r7, 8003b14 <USB_DevInit+0xfc>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 8003b0c:	69a3      	ldr	r3, [r4, #24]
 8003b0e:	f043 0310 	orr.w	r3, r3, #16
 8003b12:	61a3      	str	r3, [r4, #24]
  }
  
  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 8003b14:	69a2      	ldr	r2, [r4, #24]
 8003b16:	4b0c      	ldr	r3, [pc, #48]	; (8003b48 <USB_DevInit+0x130>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);
  
  if(cfg.Sof_enable)
 8003b1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b1e:	b11b      	cbz	r3, 8003b28 <USB_DevInit+0x110>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003b20:	69a3      	ldr	r3, [r4, #24]
 8003b22:	f043 0308 	orr.w	r3, r3, #8
 8003b26:	61a3      	str	r3, [r4, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 8003b28:	2e01      	cmp	r6, #1
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 8003b2a:	bf01      	itttt	eq
 8003b2c:	69a3      	ldreq	r3, [r4, #24]
 8003b2e:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8003b32:	f043 0304 	orreq.w	r3, r3, #4
 8003b36:	61a3      	streq	r3, [r4, #24]
  }
  
  return HAL_OK;
}
 8003b38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b3c:	2000      	movs	r0, #0
 8003b3e:	b004      	add	sp, #16
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	00800100 	.word	0x00800100
 8003b48:	803c3800 	.word	0x803c3800

08003b4c <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 8003b4c:	0189      	lsls	r1, r1, #6
 8003b4e:	f041 0120 	orr.w	r1, r1, #32
 8003b52:	4a06      	ldr	r2, [pc, #24]	; (8003b6c <USB_FlushTxFifo+0x20>)
 8003b54:	6101      	str	r1, [r0, #16]
  
  do
  {
    if (++count > 200000)
 8003b56:	3a01      	subs	r2, #1
 8003b58:	d005      	beq.n	8003b66 <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003b5a:	6903      	ldr	r3, [r0, #16]
 8003b5c:	f013 0320 	ands.w	r3, r3, #32
 8003b60:	d1f9      	bne.n	8003b56 <USB_FlushTxFifo+0xa>
  
  return HAL_OK;
 8003b62:	4618      	mov	r0, r3
 8003b64:	4770      	bx	lr
  
  do
  {
    if (++count > 200000)
    {
      return HAL_TIMEOUT;
 8003b66:	2003      	movs	r0, #3
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
  
  return HAL_OK;
}
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	00030d41 	.word	0x00030d41

08003b70 <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003b70:	2310      	movs	r3, #16
 8003b72:	4a06      	ldr	r2, [pc, #24]	; (8003b8c <USB_FlushRxFifo+0x1c>)
 8003b74:	6103      	str	r3, [r0, #16]
  
  do
  {
    if (++count > 200000)
 8003b76:	3a01      	subs	r2, #1
 8003b78:	d005      	beq.n	8003b86 <USB_FlushRxFifo+0x16>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003b7a:	6903      	ldr	r3, [r0, #16]
 8003b7c:	f013 0310 	ands.w	r3, r3, #16
 8003b80:	d1f9      	bne.n	8003b76 <USB_FlushRxFifo+0x6>
  
  return HAL_OK;
 8003b82:	4618      	mov	r0, r3
 8003b84:	4770      	bx	lr
  
  do
  {
    if (++count > 200000)
    {
      return HAL_TIMEOUT;
 8003b86:	2003      	movs	r0, #3
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
  
  return HAL_OK;
}
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	00030d41 	.word	0x00030d41

08003b90 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
  USBx_DEVICE->DCFG |= speed;
 8003b90:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8003b94:	4319      	orrs	r1, r3
 8003b96:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  return HAL_OK;
}
 8003b9a:	2000      	movs	r0, #0
 8003b9c:	4770      	bx	lr

08003b9e <USB_GetDevSpeed>:
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
  uint8_t speed = 0U;
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003b9e:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8003ba2:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 8003ba6:	f013 0006 	ands.w	r0, r3, #6
 8003baa:	d012      	beq.n	8003bd2 <USB_GetDevSpeed+0x34>
  {
    speed = USB_OTG_SPEED_HIGH;
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8003bac:	6893      	ldr	r3, [r2, #8]
 8003bae:	f003 0306 	and.w	r3, r3, #6
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d00c      	beq.n	8003bd0 <USB_GetDevSpeed+0x32>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 8003bb6:	6893      	ldr	r3, [r2, #8]
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
  {
    speed = USB_OTG_SPEED_HIGH;
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8003bb8:	f003 0306 	and.w	r3, r3, #6
 8003bbc:	2b06      	cmp	r3, #6
 8003bbe:	d007      	beq.n	8003bd0 <USB_GetDevSpeed+0x32>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USB_OTG_SPEED_FULL;
  }
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8003bc0:	6893      	ldr	r3, [r2, #8]
 8003bc2:	f003 0306 	and.w	r3, r3, #6
 8003bc6:	2b04      	cmp	r3, #4
  {
    speed = USB_OTG_SPEED_LOW;
 8003bc8:	bf14      	ite	ne
 8003bca:	2000      	movne	r0, #0
 8003bcc:	2002      	moveq	r0, #2
 8003bce:	4770      	bx	lr
    speed = USB_OTG_SPEED_HIGH;
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USB_OTG_SPEED_FULL;
 8003bd0:	2003      	movs	r0, #3
  {
    speed = USB_OTG_SPEED_LOW;
  }
  
  return speed;
}
 8003bd2:	4770      	bx	lr

08003bd4 <USB_ActivateEndpoint>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 8003bd4:	784b      	ldrb	r3, [r1, #1]
 8003bd6:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 8003bda:	2b01      	cmp	r3, #1
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003bdc:	b570      	push	{r4, r5, r6, lr}
 8003bde:	780e      	ldrb	r6, [r1, #0]
  if (ep->is_in == 1U)
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 8003be0:	69d4      	ldr	r4, [r2, #28]
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 8003be2:	d11b      	bne.n	8003c1c <USB_ActivateEndpoint+0x48>
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 8003be4:	40b3      	lsls	r3, r6
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	4323      	orrs	r3, r4
 8003bea:	61d3      	str	r3, [r2, #28]
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003bec:	780e      	ldrb	r6, [r1, #0]
 8003bee:	f44f 6510 	mov.w	r5, #2304	; 0x900
 8003bf2:	eb05 1546 	add.w	r5, r5, r6, lsl #5
 8003bf6:	582b      	ldr	r3, [r5, r0]
 8003bf8:	041a      	lsls	r2, r3, #16
 8003bfa:	d42a      	bmi.n	8003c52 <USB_ActivateEndpoint+0x7e>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8003bfc:	582c      	ldr	r4, [r5, r0]
 8003bfe:	688a      	ldr	r2, [r1, #8]
 8003c00:	f044 5380 	orr.w	r3, r4, #268435456	; 0x10000000
 8003c04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c08:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8003c0c:	431a      	orrs	r2, r3
 8003c0e:	78cb      	ldrb	r3, [r1, #3]
 8003c10:	ea42 4383 	orr.w	r3, r2, r3, lsl #18
 8003c14:	ea43 5386 	orr.w	r3, r3, r6, lsl #22
 8003c18:	502b      	str	r3, [r5, r0]
 8003c1a:	e01a      	b.n	8003c52 <USB_ActivateEndpoint+0x7e>
        ((ep->num) << 22U) | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM) | (USB_OTG_DIEPCTL_USBAEP)); 
    } 
  }
  else
  {
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 8003c1c:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8003c20:	fa05 f306 	lsl.w	r3, r5, r6
 8003c24:	4323      	orrs	r3, r4
 8003c26:	61d3      	str	r3, [r2, #28]
     
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003c28:	780c      	ldrb	r4, [r1, #0]
 8003c2a:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8003c2e:	eb03 1444 	add.w	r4, r3, r4, lsl #5
 8003c32:	5823      	ldr	r3, [r4, r0]
 8003c34:	041b      	lsls	r3, r3, #16
 8003c36:	d40c      	bmi.n	8003c52 <USB_ActivateEndpoint+0x7e>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 8003c38:	5822      	ldr	r2, [r4, r0]
 8003c3a:	688b      	ldr	r3, [r1, #8]
 8003c3c:	f3c3 050a 	ubfx	r5, r3, #0, #11
 8003c40:	f042 5380 	orr.w	r3, r2, #268435456	; 0x10000000
 8003c44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c48:	78ca      	ldrb	r2, [r1, #3]
 8003c4a:	432b      	orrs	r3, r5
 8003c4c:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8003c50:	5023      	str	r3, [r4, r0]
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
}
 8003c52:	2000      	movs	r0, #0
 8003c54:	bd70      	pop	{r4, r5, r6, pc}

08003c56 <USB_DeactivateEndpoint>:
 8003c56:	f000 b801 	b.w	8003c5c <USB_DeactivateDedicatedEndpoint>
	...

08003c5c <USB_DeactivateDedicatedEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateDedicatedEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t count = 0U;
  
  /* Disable the IN endpoint */
  if (ep->is_in == 1U)
 8003c5e:	784b      	ldrb	r3, [r1, #1]
 8003c60:	780a      	ldrb	r2, [r1, #0]
 8003c62:	2b01      	cmp	r3, #1
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateDedicatedEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c64:	4604      	mov	r4, r0
 8003c66:	460e      	mov	r6, r1
 8003c68:	f04f 0320 	mov.w	r3, #32
  uint32_t count = 0U;
  
  /* Disable the IN endpoint */
  if (ep->is_in == 1U)
 8003c6c:	d131      	bne.n	8003cd2 <USB_DeactivateDedicatedEndpoint+0x76>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_USBAEP;  
 8003c6e:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8003c72:	fb13 1202 	smlabb	r2, r3, r2, r1
    
    /* sets the NAK bit for the IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
    
    /* Disable IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS;
 8003c76:	4f2f      	ldr	r7, [pc, #188]	; (8003d34 <USB_DeactivateDedicatedEndpoint+0xd8>)
  uint32_t count = 0U;
  
  /* Disable the IN endpoint */
  if (ep->is_in == 1U)
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_USBAEP;  
 8003c78:	5810      	ldr	r0, [r2, r0]
 8003c7a:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 8003c7e:	5110      	str	r0, [r2, r4]
    
    /* sets the NAK bit for the IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003c80:	7832      	ldrb	r2, [r6, #0]
 8003c82:	fb13 1202 	smlabb	r2, r3, r2, r1
 8003c86:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8003c8a:	5110      	str	r0, [r2, r4]
    
    /* Disable IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS;
 8003c8c:	7832      	ldrb	r2, [r6, #0]
 8003c8e:	fb13 1202 	smlabb	r2, r3, r2, r1
 8003c92:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003c96:	5110      	str	r0, [r2, r4]
    
    do
    {
      if (++count > 200000U)
 8003c98:	3f01      	subs	r7, #1
 8003c9a:	d101      	bne.n	8003ca0 <USB_DeactivateDedicatedEndpoint+0x44>
      {
        return HAL_TIMEOUT;
 8003c9c:	2003      	movs	r0, #3
 8003c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      }
    }
    
    /*Wait for  EPDISD endpoint disabled interrupt*/ 
    while ((USBx_INEP(ep->num)->DIEPINT & USB_OTG_DIEPCTL_EPDIS) == USB_OTG_DIEPCTL_EPDIS);
 8003ca0:	7832      	ldrb	r2, [r6, #0]
 8003ca2:	fb13 1202 	smlabb	r2, r3, r2, r1
 8003ca6:	4422      	add	r2, r4
 8003ca8:	6890      	ldr	r0, [r2, #8]
 8003caa:	f010 4580 	ands.w	r5, r0, #1073741824	; 0x40000000
 8003cae:	d1f3      	bne.n	8003c98 <USB_DeactivateDedicatedEndpoint+0x3c>
    
    
    /* Flush any data remaining in the TxFIFO */
    USB_FlushTxFifo(USBx , 0x10U);
 8003cb0:	2110      	movs	r1, #16
 8003cb2:	4620      	mov	r0, r4
 8003cb4:	f7ff ff4a 	bl	8003b4c <USB_FlushTxFifo>
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));   
 8003cb8:	7833      	ldrb	r3, [r6, #0]
 8003cba:	f8d4 181c 	ldr.w	r1, [r4, #2076]	; 0x81c
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	ea21 0303 	bic.w	r3, r1, r3
 8003cca:	f8c4 381c 	str.w	r3, [r4, #2076]	; 0x81c
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));         
  }
  return HAL_OK;
 8003cce:	4628      	mov	r0, r5
 8003cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  
  }
  else /* Disable the OUT endpoint */
  {
    
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;  
 8003cd2:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8003cd6:	fb13 1202 	smlabb	r2, r3, r2, r1
    
    /* sets the NAK bit for the OUT endpoint */
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
    
    /* Disable OUT endpoint */
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS;
 8003cda:	4d16      	ldr	r5, [pc, #88]	; (8003d34 <USB_DeactivateDedicatedEndpoint+0xd8>)
  
  }
  else /* Disable the OUT endpoint */
  {
    
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;  
 8003cdc:	5880      	ldr	r0, [r0, r2]
 8003cde:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 8003ce2:	50a0      	str	r0, [r4, r2]
    
    /* sets the NAK bit for the OUT endpoint */
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003ce4:	7832      	ldrb	r2, [r6, #0]
 8003ce6:	fb13 1202 	smlabb	r2, r3, r2, r1
 8003cea:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8003cee:	50a0      	str	r0, [r4, r2]
    
    /* Disable OUT endpoint */
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS;
 8003cf0:	7832      	ldrb	r2, [r6, #0]
 8003cf2:	fb13 1202 	smlabb	r2, r3, r2, r1
 8003cf6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003cfa:	50a0      	str	r0, [r4, r2]
    
    do
    {
      if (++count > 200000U)
 8003cfc:	3d01      	subs	r5, #1
 8003cfe:	d0cd      	beq.n	8003c9c <USB_DeactivateDedicatedEndpoint+0x40>
        return HAL_TIMEOUT;
      }
    }
    
    /*Wait for  EPDISD endpoint disabled interrupt*/ 
    while ((USBx_OUTEP(ep->num)->DOEPINT & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS);
 8003d00:	7832      	ldrb	r2, [r6, #0]
 8003d02:	fb13 1202 	smlabb	r2, r3, r2, r1
 8003d06:	4422      	add	r2, r4
 8003d08:	6890      	ldr	r0, [r2, #8]
 8003d0a:	f010 0010 	ands.w	r0, r0, #16
 8003d0e:	d1f5      	bne.n	8003cfc <USB_DeactivateDedicatedEndpoint+0xa0>
    
    /* Set the "Clear the Global OUT NAK bit" to disable global OUT NAK mode */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003d10:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 8003d14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d18:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));         
 8003d1c:	7831      	ldrb	r1, [r6, #0]
 8003d1e:	f8d4 281c 	ldr.w	r2, [r4, #2076]	; 0x81c
 8003d22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d26:	408b      	lsls	r3, r1
 8003d28:	ea22 0303 	bic.w	r3, r2, r3
 8003d2c:	f8c4 381c 	str.w	r3, [r4, #2076]	; 0x81c
  }
  return HAL_OK;

}
 8003d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d32:	bf00      	nop
 8003d34:	00030d41 	.word	0x00030d41

08003d38 <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003d38:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint16_t pktcnt = 0U;
  
  /* IN endpoint */
  if (ep->is_in == 1U)
 8003d3c:	784b      	ldrb	r3, [r1, #1]
 8003d3e:	780c      	ldrb	r4, [r1, #0]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	f04f 0520 	mov.w	r5, #32
 8003d46:	694b      	ldr	r3, [r1, #20]
 8003d48:	f040 809b 	bne.w	8003e82 <USB_EPStartXfer+0x14a>
 8003d4c:	f44f 6610 	mov.w	r6, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003d50:	fb15 6404 	smlabb	r4, r5, r4, r6
 8003d54:	4404      	add	r4, r0
 8003d56:	6927      	ldr	r7, [r4, #16]
  
  /* IN endpoint */
  if (ep->is_in == 1U)
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003d58:	b9ab      	cbnz	r3, 8003d86 <USB_EPStartXfer+0x4e>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003d5a:	f027 57ff 	bic.w	r7, r7, #534773760	; 0x1fe00000
 8003d5e:	f427 17c0 	bic.w	r7, r7, #1572864	; 0x180000
 8003d62:	6127      	str	r7, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8003d64:	780c      	ldrb	r4, [r1, #0]
 8003d66:	fb15 6404 	smlabb	r4, r5, r4, r6
 8003d6a:	4404      	add	r4, r0
 8003d6c:	6927      	ldr	r7, [r4, #16]
 8003d6e:	f447 2700 	orr.w	r7, r7, #524288	; 0x80000
 8003d72:	6127      	str	r7, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8003d74:	780c      	ldrb	r4, [r1, #0]
 8003d76:	fb15 6504 	smlabb	r5, r5, r4, r6
 8003d7a:	4405      	add	r5, r0
 8003d7c:	692c      	ldr	r4, [r5, #16]
 8003d7e:	0ce4      	lsrs	r4, r4, #19
 8003d80:	04e4      	lsls	r4, r4, #19
 8003d82:	612c      	str	r4, [r5, #16]
 8003d84:	e03f      	b.n	8003e06 <USB_EPStartXfer+0xce>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003d86:	0cff      	lsrs	r7, r7, #19
 8003d88:	04ff      	lsls	r7, r7, #19
 8003d8a:	6127      	str	r7, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003d8c:	780c      	ldrb	r4, [r1, #0]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 8003d8e:	f8d1 c008 	ldr.w	ip, [r1, #8]
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003d92:	fb15 6404 	smlabb	r4, r5, r4, r6
 8003d96:	4404      	add	r4, r0
 8003d98:	6927      	ldr	r7, [r4, #16]
 8003d9a:	f027 57ff 	bic.w	r7, r7, #534773760	; 0x1fe00000
 8003d9e:	f427 17c0 	bic.w	r7, r7, #1572864	; 0x180000
 8003da2:	6127      	str	r7, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 8003da4:	780f      	ldrb	r7, [r1, #0]
 8003da6:	fb15 6707 	smlabb	r7, r5, r7, r6
 8003daa:	4407      	add	r7, r0
 8003dac:	eb03 040c 	add.w	r4, r3, ip
 8003db0:	3c01      	subs	r4, #1
 8003db2:	fbb4 f4fc 	udiv	r4, r4, ip
 8003db6:	f8df c1b4 	ldr.w	ip, [pc, #436]	; 8003f6c <USB_EPStartXfer+0x234>
 8003dba:	f8d7 e010 	ldr.w	lr, [r7, #16]
 8003dbe:	04e4      	lsls	r4, r4, #19
 8003dc0:	ea04 0c0c 	and.w	ip, r4, ip
 8003dc4:	ea4c 040e 	orr.w	r4, ip, lr
 8003dc8:	613c      	str	r4, [r7, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8003dca:	780c      	ldrb	r4, [r1, #0]
 8003dcc:	fb15 6404 	smlabb	r4, r5, r4, r6
 8003dd0:	4404      	add	r4, r0
 8003dd2:	f3c3 0e12 	ubfx	lr, r3, #0, #19
 8003dd6:	6927      	ldr	r7, [r4, #16]
 8003dd8:	ea4e 0707 	orr.w	r7, lr, r7
 8003ddc:	6127      	str	r7, [r4, #16]
      
      if (ep->type == EP_TYPE_ISOC)
 8003dde:	78cc      	ldrb	r4, [r1, #3]
 8003de0:	2c01      	cmp	r4, #1
 8003de2:	f040 80ba 	bne.w	8003f5a <USB_EPStartXfer+0x222>
      {
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 8003de6:	780c      	ldrb	r4, [r1, #0]
 8003de8:	fb15 6404 	smlabb	r4, r5, r4, r6
 8003dec:	4404      	add	r4, r0
 8003dee:	6927      	ldr	r7, [r4, #16]
 8003df0:	f027 47c0 	bic.w	r7, r7, #1610612736	; 0x60000000
 8003df4:	6127      	str	r7, [r4, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
 8003df6:	780c      	ldrb	r4, [r1, #0]
 8003df8:	fb15 6504 	smlabb	r5, r5, r4, r6
 8003dfc:	4405      	add	r5, r0
 8003dfe:	692c      	ldr	r4, [r5, #16]
 8003e00:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 8003e04:	612c      	str	r4, [r5, #16]
      }       
    }

    if (dma == 1U)
 8003e06:	2a01      	cmp	r2, #1
 8003e08:	d106      	bne.n	8003e18 <USB_EPStartXfer+0xe0>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003e0a:	780c      	ldrb	r4, [r1, #0]
 8003e0c:	690d      	ldr	r5, [r1, #16]
 8003e0e:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8003e12:	f8c4 5914 	str.w	r5, [r4, #2324]	; 0x914
 8003e16:	e00b      	b.n	8003e30 <USB_EPStartXfer+0xf8>
    }
    else
    {
      if (ep->type != EP_TYPE_ISOC)
 8003e18:	78cc      	ldrb	r4, [r1, #3]
 8003e1a:	2c01      	cmp	r4, #1
 8003e1c:	d00b      	beq.n	8003e36 <USB_EPStartXfer+0xfe>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003e1e:	b13b      	cbz	r3, 8003e30 <USB_EPStartXfer+0xf8>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
 8003e20:	780f      	ldrb	r7, [r1, #0]
 8003e22:	f8d0 5834 	ldr.w	r5, [r0, #2100]	; 0x834
 8003e26:	2401      	movs	r4, #1
 8003e28:	40bc      	lsls	r4, r7
 8003e2a:	432c      	orrs	r4, r5
 8003e2c:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
        }
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003e30:	78cc      	ldrb	r4, [r1, #3]
 8003e32:	2c01      	cmp	r4, #1
 8003e34:	d111      	bne.n	8003e5a <USB_EPStartXfer+0x122>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 8003e36:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 8003e3a:	f414 7f80 	tst.w	r4, #256	; 0x100
 8003e3e:	780c      	ldrb	r4, [r1, #0]
 8003e40:	f04f 0520 	mov.w	r5, #32
 8003e44:	f44f 6610 	mov.w	r6, #2304	; 0x900
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003e48:	fb15 6404 	smlabb	r4, r5, r4, r6
 8003e4c:	5825      	ldr	r5, [r4, r0]
 8003e4e:	bf0c      	ite	eq
 8003e50:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
      }
      else
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003e54:	f045 5580 	orrne.w	r5, r5, #268435456	; 0x10000000
 8003e58:	5025      	str	r5, [r4, r0]
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003e5a:	780d      	ldrb	r5, [r1, #0]
 8003e5c:	f44f 6410 	mov.w	r4, #2304	; 0x900
 8003e60:	eb04 1445 	add.w	r4, r4, r5, lsl #5
 8003e64:	5905      	ldr	r5, [r0, r4]
 8003e66:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 8003e6a:	5105      	str	r5, [r0, r4]
    
    if (ep->type == EP_TYPE_ISOC)
 8003e6c:	78cc      	ldrb	r4, [r1, #3]
 8003e6e:	2c01      	cmp	r4, #1
 8003e70:	d177      	bne.n	8003f62 <USB_EPStartXfer+0x22a>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 8003e72:	780c      	ldrb	r4, [r1, #0]
 8003e74:	9200      	str	r2, [sp, #0]
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	4622      	mov	r2, r4
 8003e7a:	68c9      	ldr	r1, [r1, #12]
 8003e7c:	f000 f921 	bl	80040c2 <USB_WritePacket>
 8003e80:	e06f      	b.n	8003f62 <USB_EPStartXfer+0x22a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */  
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8003e82:	f44f 6630 	mov.w	r6, #2816	; 0xb00
 8003e86:	fb15 6404 	smlabb	r4, r5, r4, r6
 8003e8a:	4404      	add	r4, r0
 8003e8c:	6927      	ldr	r7, [r4, #16]
 8003e8e:	0cff      	lsrs	r7, r7, #19
 8003e90:	04ff      	lsls	r7, r7, #19
 8003e92:	6127      	str	r7, [r4, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8003e94:	780c      	ldrb	r4, [r1, #0]
 8003e96:	fb15 6404 	smlabb	r4, r5, r4, r6
 8003e9a:	4404      	add	r4, r0
 8003e9c:	6927      	ldr	r7, [r4, #16]
 8003e9e:	f027 57ff 	bic.w	r7, r7, #534773760	; 0x1fe00000
 8003ea2:	f427 17c0 	bic.w	r7, r7, #1572864	; 0x180000
 8003ea6:	6127      	str	r7, [r4, #16]
 8003ea8:	780c      	ldrb	r4, [r1, #0]
 8003eaa:	688f      	ldr	r7, [r1, #8]

    if (ep->xfer_len == 0U)
 8003eac:	b983      	cbnz	r3, 8003ed0 <USB_EPStartXfer+0x198>
    {
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003eae:	fb15 6404 	smlabb	r4, r5, r4, r6
 8003eb2:	4404      	add	r4, r0
 8003eb4:	f3c7 0712 	ubfx	r7, r7, #0, #19
 8003eb8:	6923      	ldr	r3, [r4, #16]
 8003eba:	431f      	orrs	r7, r3
 8003ebc:	6127      	str	r7, [r4, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8003ebe:	780b      	ldrb	r3, [r1, #0]
 8003ec0:	fb15 6503 	smlabb	r5, r5, r3, r6
 8003ec4:	4405      	add	r5, r0
 8003ec6:	692b      	ldr	r3, [r5, #16]
 8003ec8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ecc:	612b      	str	r3, [r5, #16]
 8003ece:	e01d      	b.n	8003f0c <USB_EPStartXfer+0x1d4>
    }
    else
    {
      pktcnt = (ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket; 
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 8003ed0:	fb15 6404 	smlabb	r4, r5, r4, r6
 8003ed4:	4404      	add	r4, r0
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
    }
    else
    {
      pktcnt = (ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket; 
 8003ed6:	443b      	add	r3, r7
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 8003ed8:	f8df c090 	ldr.w	ip, [pc, #144]	; 8003f6c <USB_EPStartXfer+0x234>
 8003edc:	f8d4 e010 	ldr.w	lr, [r4, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
    }
    else
    {
      pktcnt = (ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket; 
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	fbb3 f3f7 	udiv	r3, r3, r7
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 8003ee6:	ea4f 48c3 	mov.w	r8, r3, lsl #19
 8003eea:	ea08 0c0c 	and.w	ip, r8, ip
 8003eee:	ea4c 0e0e 	orr.w	lr, ip, lr
 8003ef2:	f8c4 e010 	str.w	lr, [r4, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 8003ef6:	780c      	ldrb	r4, [r1, #0]
 8003ef8:	fb15 6504 	smlabb	r5, r5, r4, r6
 8003efc:	4405      	add	r5, r0
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	692c      	ldr	r4, [r5, #16]
 8003f02:	435f      	muls	r7, r3
 8003f04:	f3c7 0712 	ubfx	r7, r7, #0, #19
 8003f08:	4327      	orrs	r7, r4
 8003f0a:	612f      	str	r7, [r5, #16]
    }

    if (dma == 1U)
 8003f0c:	2a01      	cmp	r2, #1
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
 8003f0e:	bf01      	itttt	eq
 8003f10:	780b      	ldrbeq	r3, [r1, #0]
 8003f12:	68ca      	ldreq	r2, [r1, #12]
 8003f14:	eb00 1343 	addeq.w	r3, r0, r3, lsl #5
 8003f18:	f8c3 2b14 	streq.w	r2, [r3, #2836]	; 0xb14
    }
    
    if (ep->type == EP_TYPE_ISOC)
 8003f1c:	78cb      	ldrb	r3, [r1, #3]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d111      	bne.n	8003f46 <USB_EPStartXfer+0x20e>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 8003f22:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8003f26:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003f2a:	780b      	ldrb	r3, [r1, #0]
 8003f2c:	f04f 0220 	mov.w	r2, #32
 8003f30:	f44f 6430 	mov.w	r4, #2816	; 0xb00
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003f34:	fb12 4303 	smlabb	r3, r2, r3, r4
 8003f38:	58c2      	ldr	r2, [r0, r3]
 8003f3a:	bf0c      	ite	eq
 8003f3c:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
      }
      else
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003f40:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 8003f44:	50c2      	str	r2, [r0, r3]
      }
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003f46:	780a      	ldrb	r2, [r1, #0]
 8003f48:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8003f4c:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8003f50:	58c2      	ldr	r2, [r0, r3]
 8003f52:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8003f56:	50c2      	str	r2, [r0, r3]
  }
  return HAL_OK;
 8003f58:	e003      	b.n	8003f62 <USB_EPStartXfer+0x22a>
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
      }       
    }

    if (dma == 1U)
 8003f5a:	2a01      	cmp	r2, #1
 8003f5c:	f47f af5f 	bne.w	8003e1e <USB_EPStartXfer+0xe6>
 8003f60:	e753      	b.n	8003e0a <USB_EPStartXfer+0xd2>
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
  }
  return HAL_OK;
}
 8003f62:	2000      	movs	r0, #0
 8003f64:	b002      	add	sp, #8
 8003f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f6a:	bf00      	nop
 8003f6c:	1ff80000 	.word	0x1ff80000

08003f70 <USB_EP0StartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003f70:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* IN endpoint */
  if (ep->is_in == 1U)
 8003f72:	784b      	ldrb	r3, [r1, #1]
 8003f74:	694d      	ldr	r5, [r1, #20]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	f04f 0420 	mov.w	r4, #32
 8003f7c:	780b      	ldrb	r3, [r1, #0]
 8003f7e:	d162      	bne.n	8004046 <USB_EP0StartXfer+0xd6>
 8003f80:	f44f 6610 	mov.w	r6, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003f84:	fb14 6303 	smlabb	r3, r4, r3, r6
 8003f88:	4403      	add	r3, r0
{
  /* IN endpoint */
  if (ep->is_in == 1U)
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003f8a:	b9b5      	cbnz	r5, 8003fba <USB_EP0StartXfer+0x4a>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003f8c:	691d      	ldr	r5, [r3, #16]
 8003f8e:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8003f92:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8003f96:	611d      	str	r5, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8003f98:	780b      	ldrb	r3, [r1, #0]
 8003f9a:	fb14 6303 	smlabb	r3, r4, r3, r6
 8003f9e:	4403      	add	r3, r0
 8003fa0:	691d      	ldr	r5, [r3, #16]
 8003fa2:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8003fa6:	611d      	str	r5, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8003fa8:	780b      	ldrb	r3, [r1, #0]
 8003faa:	fb14 6403 	smlabb	r4, r4, r3, r6
 8003fae:	4404      	add	r4, r0
 8003fb0:	6923      	ldr	r3, [r4, #16]
 8003fb2:	0cdb      	lsrs	r3, r3, #19
 8003fb4:	04db      	lsls	r3, r3, #19
 8003fb6:	6123      	str	r3, [r4, #16]
 8003fb8:	e026      	b.n	8004008 <USB_EP0StartXfer+0x98>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003fba:	691f      	ldr	r7, [r3, #16]
 8003fbc:	0cff      	lsrs	r7, r7, #19
 8003fbe:	04ff      	lsls	r7, r7, #19
 8003fc0:	611f      	str	r7, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003fc2:	780b      	ldrb	r3, [r1, #0]
 8003fc4:	fb14 6403 	smlabb	r4, r4, r3, r6
 8003fc8:	4404      	add	r4, r0
 8003fca:	6923      	ldr	r3, [r4, #16]
 8003fcc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003fd0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003fd4:	6123      	str	r3, [r4, #16]
      
      if(ep->xfer_len > ep->maxpacket)
 8003fd6:	688b      	ldr	r3, [r1, #8]
 8003fd8:	429d      	cmp	r5, r3
      {
        ep->xfer_len = ep->maxpacket;
      }
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8003fda:	780d      	ldrb	r5, [r1, #0]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
      
      if(ep->xfer_len > ep->maxpacket)
      {
        ep->xfer_len = ep->maxpacket;
 8003fdc:	bf88      	it	hi
 8003fde:	614b      	strhi	r3, [r1, #20]
      }
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8003fe0:	2420      	movs	r4, #32
 8003fe2:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8003fe6:	fb14 3505 	smlabb	r5, r4, r5, r3
 8003fea:	4405      	add	r5, r0
 8003fec:	692e      	ldr	r6, [r5, #16]
 8003fee:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 8003ff2:	612e      	str	r6, [r5, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8003ff4:	780d      	ldrb	r5, [r1, #0]
 8003ff6:	fb14 3305 	smlabb	r3, r4, r5, r3
 8003ffa:	4403      	add	r3, r0
 8003ffc:	694c      	ldr	r4, [r1, #20]
 8003ffe:	691d      	ldr	r5, [r3, #16]
 8004000:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8004004:	432c      	orrs	r4, r5
 8004006:	611c      	str	r4, [r3, #16]
    
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 8004008:	780c      	ldrb	r4, [r1, #0]
 800400a:	2320      	movs	r3, #32
 800400c:	f44f 6610 	mov.w	r6, #2304	; 0x900
 8004010:	fb13 6404 	smlabb	r4, r3, r4, r6
    
    if (dma == 1)
 8004014:	2a01      	cmp	r2, #1
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
    
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 8004016:	5825      	ldr	r5, [r4, r0]
 8004018:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 800401c:	5025      	str	r5, [r4, r0]
    
    if (dma == 1)
 800401e:	d106      	bne.n	800402e <USB_EP0StartXfer+0xbe>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004020:	780a      	ldrb	r2, [r1, #0]
 8004022:	fb13 6302 	smlabb	r3, r3, r2, r6
 8004026:	4418      	add	r0, r3
 8004028:	690b      	ldr	r3, [r1, #16]
 800402a:	6143      	str	r3, [r0, #20]
 800402c:	e047      	b.n	80040be <USB_EP0StartXfer+0x14e>
    }
    else
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800402e:	694b      	ldr	r3, [r1, #20]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d044      	beq.n	80040be <USB_EP0StartXfer+0x14e>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
 8004034:	7809      	ldrb	r1, [r1, #0]
 8004036:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 800403a:	2301      	movs	r3, #1
 800403c:	408b      	lsls	r3, r1
 800403e:	4313      	orrs	r3, r2
 8004040:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 8004044:	e03b      	b.n	80040be <USB_EP0StartXfer+0x14e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8004046:	f44f 6730 	mov.w	r7, #2816	; 0xb00
 800404a:	fb14 7303 	smlabb	r3, r4, r3, r7
 800404e:	4403      	add	r3, r0
 8004050:	691e      	ldr	r6, [r3, #16]
 8004052:	0cf6      	lsrs	r6, r6, #19
 8004054:	04f6      	lsls	r6, r6, #19
 8004056:	611e      	str	r6, [r3, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8004058:	780b      	ldrb	r3, [r1, #0]
 800405a:	fb14 7303 	smlabb	r3, r4, r3, r7
 800405e:	4403      	add	r3, r0
 8004060:	691e      	ldr	r6, [r3, #16]
 8004062:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 8004066:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 800406a:	611e      	str	r6, [r3, #16]
 800406c:	688e      	ldr	r6, [r1, #8]
      
    if (ep->xfer_len > 0U)
 800406e:	b105      	cbz	r5, 8004072 <USB_EP0StartXfer+0x102>
    {
      ep->xfer_len = ep->maxpacket;
 8004070:	614e      	str	r6, [r1, #20]
    }
    
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8004072:	780b      	ldrb	r3, [r1, #0]
 8004074:	f44f 6530 	mov.w	r5, #2816	; 0xb00
 8004078:	fb14 5303 	smlabb	r3, r4, r3, r5
 800407c:	4403      	add	r3, r0
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 800407e:	f3c6 0612 	ubfx	r6, r6, #0, #19
    if (ep->xfer_len > 0U)
    {
      ep->xfer_len = ep->maxpacket;
    }
    
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8004082:	691f      	ldr	r7, [r3, #16]
 8004084:	f447 2700 	orr.w	r7, r7, #524288	; 0x80000
 8004088:	611f      	str	r7, [r3, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 800408a:	780b      	ldrb	r3, [r1, #0]
 800408c:	fb14 5403 	smlabb	r4, r4, r3, r5
 8004090:	4404      	add	r4, r0
    

    if (dma == 1U)
 8004092:	2a01      	cmp	r2, #1
    {
      ep->xfer_len = ep->maxpacket;
    }
    
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 8004094:	6923      	ldr	r3, [r4, #16]
 8004096:	ea46 0603 	orr.w	r6, r6, r3
 800409a:	6126      	str	r6, [r4, #16]
    

    if (dma == 1U)
 800409c:	d106      	bne.n	80040ac <USB_EP0StartXfer+0x13c>
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800409e:	780b      	ldrb	r3, [r1, #0]
 80040a0:	2220      	movs	r2, #32
 80040a2:	fb12 5303 	smlabb	r3, r2, r3, r5
 80040a6:	4403      	add	r3, r0
 80040a8:	68ca      	ldr	r2, [r1, #12]
 80040aa:	615a      	str	r2, [r3, #20]
    }
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 80040ac:	780a      	ldrb	r2, [r1, #0]
 80040ae:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 80040b2:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80040b6:	58c2      	ldr	r2, [r0, r3]
 80040b8:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 80040bc:	50c2      	str	r2, [r0, r3]
  }
  return HAL_OK;
}
 80040be:	2000      	movs	r0, #0
 80040c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080040c2 <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80040c2:	b510      	push	{r4, lr}
  uint32_t count32b = 0U , i = 0U;
  
  if (dma == 0U)
 80040c4:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80040c8:	b96c      	cbnz	r4, 80040e6 <USB_WritePacket+0x24>
 80040ca:	3303      	adds	r3, #3
  {
    count32b =  (len + 3U) / 4U;
    for (i = 0U; i < count32b; i++, src += 4U)
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 80040cc:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 80040d0:	f023 0303 	bic.w	r3, r3, #3
 80040d4:	eb00 3202 	add.w	r2, r0, r2, lsl #12
 80040d8:	440b      	add	r3, r1
  uint32_t count32b = 0U , i = 0U;
  
  if (dma == 0U)
  {
    count32b =  (len + 3U) / 4U;
    for (i = 0U; i < count32b; i++, src += 4U)
 80040da:	4299      	cmp	r1, r3
 80040dc:	d003      	beq.n	80040e6 <USB_WritePacket+0x24>
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 80040de:	f851 0b04 	ldr.w	r0, [r1], #4
 80040e2:	6010      	str	r0, [r2, #0]
 80040e4:	e7f9      	b.n	80040da <USB_WritePacket+0x18>
    }
  }
  return HAL_OK;
}
 80040e6:	2000      	movs	r0, #0
 80040e8:	bd10      	pop	{r4, pc}

080040ea <USB_ReadPacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80040ea:	3203      	adds	r2, #3
 80040ec:	f022 0203 	bic.w	r2, r2, #3
 80040f0:	440a      	add	r2, r1
  uint32_t i=0U;
  uint32_t count32b = (len + 3U) / 4U;
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 80040f2:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
  uint32_t i=0U;
  uint32_t count32b = (len + 3U) / 4U;
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
 80040f6:	4291      	cmp	r1, r2
 80040f8:	d003      	beq.n	8004102 <USB_ReadPacket+0x18>
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 80040fa:	6803      	ldr	r3, [r0, #0]
 80040fc:	f841 3b04 	str.w	r3, [r1], #4
 8004100:	e7f9      	b.n	80040f6 <USB_ReadPacket+0xc>
    
  }
  return ((void *)dest);
}
 8004102:	4608      	mov	r0, r1
 8004104:	4770      	bx	lr

08004106 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 8004106:	784b      	ldrb	r3, [r1, #1]
 8004108:	2b01      	cmp	r3, #1
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
 800410a:	b510      	push	{r4, lr}
 800410c:	f04f 0220 	mov.w	r2, #32
 8004110:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8004112:	d114      	bne.n	800413e <USB_EPSetStall+0x38>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0U)
 8004114:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8004118:	fb12 3304 	smlabb	r3, r2, r4, r3
 800411c:	58c2      	ldr	r2, [r0, r3]
 800411e:	2a00      	cmp	r2, #0
    {
      USBx_INEP(ep->num)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS); 
 8004120:	bfa2      	ittt	ge
 8004122:	58c2      	ldrge	r2, [r0, r3]
 8004124:	f022 4280 	bicge.w	r2, r2, #1073741824	; 0x40000000
 8004128:	50c2      	strge	r2, [r0, r3]
    } 
    USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800412a:	780a      	ldrb	r2, [r1, #0]
 800412c:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8004130:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8004134:	58c2      	ldr	r2, [r0, r3]
 8004136:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800413a:	50c2      	str	r2, [r0, r3]
 800413c:	e013      	b.n	8004166 <USB_EPSetStall+0x60>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
 800413e:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8004142:	fb12 3304 	smlabb	r3, r2, r4, r3
 8004146:	58c2      	ldr	r2, [r0, r3]
 8004148:	2a00      	cmp	r2, #0
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 800414a:	bfa2      	ittt	ge
 800414c:	58c2      	ldrge	r2, [r0, r3]
 800414e:	f022 4280 	bicge.w	r2, r2, #1073741824	; 0x40000000
 8004152:	50c2      	strge	r2, [r0, r3]
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004154:	780a      	ldrb	r2, [r1, #0]
 8004156:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 800415a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800415e:	58c2      	ldr	r2, [r0, r3]
 8004160:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8004164:	50c2      	str	r2, [r0, r3]
  }
  return HAL_OK;
}
 8004166:	2000      	movs	r0, #0
 8004168:	bd10      	pop	{r4, pc}

0800416a <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1U)
 800416a:	784b      	ldrb	r3, [r1, #1]
 800416c:	2b01      	cmp	r3, #1
 800416e:	780b      	ldrb	r3, [r1, #0]
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004170:	b530      	push	{r4, r5, lr}
 8004172:	f04f 0220 	mov.w	r2, #32
  if (ep->is_in == 1U)
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004176:	bf0c      	ite	eq
 8004178:	f44f 6510 	moveq.w	r5, #2304	; 0x900
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800417c:	f44f 6530 	movne.w	r5, #2816	; 0xb00
 8004180:	fb12 5303 	smlabb	r3, r2, r3, r5
 8004184:	581c      	ldr	r4, [r3, r0]
 8004186:	f424 1400 	bic.w	r4, r4, #2097152	; 0x200000
 800418a:	501c      	str	r4, [r3, r0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 800418c:	78cb      	ldrb	r3, [r1, #3]
 800418e:	3b02      	subs	r3, #2
 8004190:	2b01      	cmp	r3, #1
 8004192:	d806      	bhi.n	80041a2 <USB_EPClearStall+0x38>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004194:	780b      	ldrb	r3, [r1, #0]
 8004196:	fb12 5203 	smlabb	r2, r2, r3, r5
 800419a:	5813      	ldr	r3, [r2, r0]
 800419c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041a0:	5013      	str	r3, [r2, r0]
    }    
  }
  return HAL_OK;
}
 80041a2:	2000      	movs	r0, #0
 80041a4:	bd30      	pop	{r4, r5, pc}

080041a6 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 80041a6:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80041aa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80041ae:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= (address << 4U) & USB_OTG_DCFG_DAD ;
 80041b2:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80041b6:	0109      	lsls	r1, r1, #4
 80041b8:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 80041bc:	430b      	orrs	r3, r1
 80041be:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  
  return HAL_OK;  
}
 80041c2:	2000      	movs	r0, #0
 80041c4:	4770      	bx	lr

080041c6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 80041c6:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 80041c8:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80041cc:	f023 0302 	bic.w	r3, r3, #2
 80041d0:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 80041d4:	2003      	movs	r0, #3
 80041d6:	f7fc f833 	bl	8000240 <HAL_Delay>
  
  return HAL_OK;  
}
 80041da:	2000      	movs	r0, #0
 80041dc:	bd08      	pop	{r3, pc}

080041de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 80041de:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 80041e0:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80041e4:	f043 0302 	orr.w	r3, r3, #2
 80041e8:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 80041ec:	2003      	movs	r0, #3
 80041ee:	f7fc f827 	bl	8000240 <HAL_Delay>
  
  return HAL_OK;  
}
 80041f2:	2000      	movs	r0, #0
 80041f4:	bd08      	pop	{r3, pc}

080041f6 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v = 0U;
  
  v = USBx->GINTSTS;
 80041f6:	6942      	ldr	r2, [r0, #20]
  v &= USBx->GINTMSK;
 80041f8:	6980      	ldr	r0, [r0, #24]
  return v;  
}
 80041fa:	4010      	ands	r0, r2
 80041fc:	4770      	bx	lr

080041fe <USB_ReadDevAllOutEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 80041fe:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8004202:	f8d0 0818 	ldr.w	r0, [r0, #2072]	; 0x818
  v &= USBx_DEVICE->DAINTMSK;
 8004206:	69db      	ldr	r3, [r3, #28]
  return ((v & 0xffff0000U) >> 16U);
 8004208:	4018      	ands	r0, r3
}
 800420a:	0c00      	lsrs	r0, r0, #16
 800420c:	4770      	bx	lr

0800420e <USB_ReadDevAllInEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 800420e:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8004212:	f8d0 0818 	ldr.w	r0, [r0, #2072]	; 0x818
  v &= USBx_DEVICE->DAINTMSK;
 8004216:	69db      	ldr	r3, [r3, #28]
  return ((v & 0xFFFFU));
 8004218:	4018      	ands	r0, r3
}
 800421a:	b280      	uxth	r0, r0
 800421c:	4770      	bx	lr

0800421e <USB_ReadDevOutEPInterrupt>:
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
  uint32_t v;
  v  = USBx_OUTEP(epnum)->DOEPINT;
 800421e:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8004222:	eb03 1141 	add.w	r1, r3, r1, lsl #5
  v &= USBx_DEVICE->DOEPMSK;
 8004226:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
  uint32_t v;
  v  = USBx_OUTEP(epnum)->DOEPINT;
 800422a:	688a      	ldr	r2, [r1, #8]
  v &= USBx_DEVICE->DOEPMSK;
 800422c:	6940      	ldr	r0, [r0, #20]
  return v;
}
 800422e:	4010      	ands	r0, r2
 8004230:	4770      	bx	lr

08004232 <USB_ReadDevInEPInterrupt>:
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
  uint32_t v, msk, emp;
  
  msk = USBx_DEVICE->DIEPMSK;
 8004232:	f8d0 2810 	ldr.w	r2, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004236:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> epnum) & 0x1U) << 7U;
  v = USBx_INEP(epnum)->DIEPINT & msk;
 800423a:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 800423e:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  return v;
 8004242:	fa23 f101 	lsr.w	r1, r3, r1
 8004246:	01c9      	lsls	r1, r1, #7
  uint32_t v, msk, emp;
  
  msk = USBx_DEVICE->DIEPMSK;
  emp = USBx_DEVICE->DIEPEMPMSK;
  msk |= ((emp >> epnum) & 0x1U) << 7U;
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8004248:	6880      	ldr	r0, [r0, #8]
  return v;
 800424a:	b2c9      	uxtb	r1, r1
 800424c:	4311      	orrs	r1, r2
}
 800424e:	4008      	ands	r0, r1
 8004250:	4770      	bx	lr

08004252 <USB_GetMode>:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS ) & 0x1U);
 8004252:	6940      	ldr	r0, [r0, #20]
}
 8004254:	f000 0001 	and.w	r0, r0, #1
 8004258:	4770      	bx	lr

0800425a <USB_ActivateSetup>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800425a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800425e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004262:	f023 0307 	bic.w	r3, r3, #7
 8004266:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800426a:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	f002 0206 	and.w	r2, r2, #6
 8004274:	2a04      	cmp	r2, #4
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8004276:	bf02      	ittt	eq
 8004278:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 800427c:	f042 0203 	orreq.w	r2, r2, #3
 8004280:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004284:	685a      	ldr	r2, [r3, #4]
 8004286:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800428a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
}
 800428c:	2000      	movs	r0, #0
 800428e:	4770      	bx	lr

08004290 <USB_EP0_OutStart>:
  *           1 : DMA feature used  
  * @param  psetup : pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004290:	b510      	push	{r4, lr}
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004292:	2400      	movs	r4, #0
 8004294:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U)) ;
 8004298:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 800429c:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 80042a0:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80042a4:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 80042a8:	f044 0418 	orr.w	r4, r4, #24
 80042ac:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 80042b0:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
  
  if (dma == 1U)
 80042b4:	2901      	cmp	r1, #1
  * @param  psetup : pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80042b6:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U)) ;
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 80042ba:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
  
  if (dma == 1U)
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 80042be:	bf08      	it	eq
 80042c0:	f04f 2380 	moveq.w	r3, #2147516416	; 0x80008000
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U)) ;
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 80042c4:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  
  if (dma == 1U)
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80042c8:	bf04      	itt	eq
 80042ca:	f8c0 2b14 	streq.w	r2, [r0, #2836]	; 0xb14
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 80042ce:	f8c0 3b00 	streq.w	r3, [r0, #2816]	; 0xb00
  }
  
  return HAL_OK;  
}
 80042d2:	2000      	movs	r0, #0
 80042d4:	bd10      	pop	{r4, pc}
	...

080042d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx : Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80042d8:	4b0a      	ldr	r3, [pc, #40]	; (8004304 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80042da:	3b01      	subs	r3, #1
 80042dc:	d101      	bne.n	80042e2 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 80042de:	2003      	movs	r0, #3
 80042e0:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80042e2:	6902      	ldr	r2, [r0, #16]
 80042e4:	2a00      	cmp	r2, #0
 80042e6:	daf8      	bge.n	80042da <USB_CoreReset+0x2>
  
  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80042e8:	6903      	ldr	r3, [r0, #16]
 80042ea:	4a06      	ldr	r2, [pc, #24]	; (8004304 <USB_CoreReset+0x2c>)
 80042ec:	f043 0301 	orr.w	r3, r3, #1
 80042f0:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 80042f2:	3a01      	subs	r2, #1
 80042f4:	d0f3      	beq.n	80042de <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80042f6:	6903      	ldr	r3, [r0, #16]
 80042f8:	f013 0301 	ands.w	r3, r3, #1
 80042fc:	d1f9      	bne.n	80042f2 <USB_CoreReset+0x1a>
  
  return HAL_OK;
 80042fe:	4618      	mov	r0, r3
}
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	00030d41 	.word	0x00030d41

08004308 <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004308:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 800430c:	b11b      	cbz	r3, 8004316 <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 800430e:	2000      	movs	r0, #0
 8004310:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 8004314:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 8004316:	2002      	movs	r0, #2
  }
}
 8004318:	4770      	bx	lr

0800431a <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800431a:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 800431e:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004320:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8004324:	b15b      	cbz	r3, 800433e <USBD_CDC_EP0_RxReady+0x24>
 8004326:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800432a:	28ff      	cmp	r0, #255	; 0xff
 800432c:	d007      	beq.n	800433e <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8004334:	4621      	mov	r1, r4
 8004336:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 8004338:	23ff      	movs	r3, #255	; 0xff
 800433a:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 800433e:	2000      	movs	r0, #0
 8004340:	bd10      	pop	{r4, pc}
	...

08004344 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8004344:	2343      	movs	r3, #67	; 0x43
 8004346:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8004348:	4800      	ldr	r0, [pc, #0]	; (800434c <USBD_CDC_GetFSCfgDesc+0x8>)
 800434a:	4770      	bx	lr
 800434c:	20000000 	.word	0x20000000

08004350 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8004350:	2343      	movs	r3, #67	; 0x43
 8004352:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8004354:	4800      	ldr	r0, [pc, #0]	; (8004358 <USBD_CDC_GetHSCfgDesc+0x8>)
 8004356:	4770      	bx	lr
 8004358:	200000cc 	.word	0x200000cc

0800435c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800435c:	2343      	movs	r3, #67	; 0x43
 800435e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8004360:	4800      	ldr	r0, [pc, #0]	; (8004364 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8004362:	4770      	bx	lr
 8004364:	20000088 	.word	0x20000088

08004368 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8004368:	230a      	movs	r3, #10
 800436a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 800436c:	4800      	ldr	r0, [pc, #0]	; (8004370 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800436e:	4770      	bx	lr
 8004370:	2000007c 	.word	0x2000007c

08004374 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 8004374:	b538      	push	{r3, r4, r5, lr}
 8004376:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004378:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800437c:	f001 fbc0 	bl	8005b00 <USBD_LL_GetRxDataSize>
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8004380:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8004384:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8004388:	b14b      	cbz	r3, 800439e <USBD_CDC_DataOut+0x2a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800438a:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 800438e:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8004398:	4798      	blx	r3

    return USBD_OK;
 800439a:	2000      	movs	r0, #0
 800439c:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    return USBD_FAIL;
 800439e:	2002      	movs	r0, #2
  }
}
 80043a0:	bd38      	pop	{r3, r4, r5, pc}
	...

080043a4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 80043a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80043a6:	780f      	ldrb	r7, [r1, #0]
 80043a8:	f017 0360 	ands.w	r3, r7, #96	; 0x60
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 80043ac:	4606      	mov	r6, r0
 80043ae:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80043b0:	d022      	beq.n	80043f8 <USBD_CDC_Setup+0x54>
 80043b2:	2b20      	cmp	r3, #32
 80043b4:	d127      	bne.n	8004406 <USBD_CDC_Setup+0x62>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 80043b6:	88ca      	ldrh	r2, [r1, #6]
 80043b8:	784b      	ldrb	r3, [r1, #1]
 80043ba:	b1ba      	cbz	r2, 80043ec <USBD_CDC_Setup+0x48>
    {
      if (req->bmRequest & 0x80)
 80043bc:	0639      	lsls	r1, r7, #24
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80043be:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
    {
      if (req->bmRequest & 0x80)
 80043c2:	d509      	bpl.n	80043d8 <USBD_CDC_Setup+0x34>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80043c4:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 80043c8:	4618      	mov	r0, r3
 80043ca:	688f      	ldr	r7, [r1, #8]
 80043cc:	4629      	mov	r1, r5
 80043ce:	47b8      	blx	r7
                                                          (uint8_t *)hcdc->data,
                                                          req->wLength);
          USBD_CtlSendData (pdev, 
 80043d0:	88e2      	ldrh	r2, [r4, #6]
 80043d2:	4629      	mov	r1, r5
 80043d4:	4630      	mov	r0, r6
 80043d6:	e014      	b.n	8004402 <USBD_CDC_Setup+0x5e>
                            (uint8_t *)hcdc->data,
                            req->wLength);
      }
      else
      {
        hcdc->CmdOpCode = req->bRequest;
 80043d8:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 80043dc:	88e3      	ldrh	r3, [r4, #6]
 80043de:	f885 3201 	strb.w	r3, [r5, #513]	; 0x201
        
        USBD_CtlPrepareRx (pdev, 
 80043e2:	88e2      	ldrh	r2, [r4, #6]
 80043e4:	4629      	mov	r1, r5
 80043e6:	f000 fba1 	bl	8004b2c <USBD_CtlPrepareRx>
 80043ea:	e00c      	b.n	8004406 <USBD_CDC_Setup+0x62>
      }
      
    }
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80043ec:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 80043f0:	6884      	ldr	r4, [r0, #8]
 80043f2:	4618      	mov	r0, r3
 80043f4:	47a0      	blx	r4
 80043f6:	e006      	b.n	8004406 <USBD_CDC_Setup+0x62>
                                                        0);
    }
    break;

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80043f8:	784b      	ldrb	r3, [r1, #1]
 80043fa:	2b0a      	cmp	r3, #10
 80043fc:	d103      	bne.n	8004406 <USBD_CDC_Setup+0x62>
    {      
    case USB_REQ_GET_INTERFACE :
      USBD_CtlSendData (pdev,
 80043fe:	4903      	ldr	r1, [pc, #12]	; (800440c <USBD_CDC_Setup+0x68>)
 8004400:	2201      	movs	r2, #1
 8004402:	f000 fb7e 	bl	8004b02 <USBD_CtlSendData>
 
  default: 
    break;
  }
  return USBD_OK;
}
 8004406:	2000      	movs	r0, #0
 8004408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800440a:	bf00      	nop
 800440c:	200001d8 	.word	0x200001d8

08004410 <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8004410:	b510      	push	{r4, lr}
  uint8_t ret = 0;
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 8004412:	2181      	movs	r1, #129	; 0x81
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8004414:	4604      	mov	r4, r0
  uint8_t ret = 0;
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 8004416:	f001 fb0b 	bl	8005a30 <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 800441a:	2101      	movs	r1, #1
 800441c:	4620      	mov	r0, r4
 800441e:	f001 fb07 	bl	8005a30 <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 8004422:	2182      	movs	r1, #130	; 0x82
 8004424:	4620      	mov	r0, r4
 8004426:	f001 fb03 	bl	8005a30 <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800442a:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 800442e:	b153      	cbz	r3, 8004446 <USBD_CDC_DeInit+0x36>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004430:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004438:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 800443c:	f001 fc10 	bl	8005c60 <free>
    pdev->pClassData = NULL;
 8004440:	2300      	movs	r3, #0
 8004442:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
  }
  
  return ret;
}
 8004446:	2000      	movs	r0, #0
 8004448:	bd10      	pop	{r4, pc}

0800444a <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 800444a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t ret = 0;
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800444c:	7c03      	ldrb	r3, [r0, #16]
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 800444e:	4604      	mov	r4, r0
  uint8_t ret = 0;
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004450:	b943      	cbnz	r3, 8004464 <USBD_CDC_Init+0x1a>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8004452:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004456:	2202      	movs	r2, #2
 8004458:	2181      	movs	r1, #129	; 0x81
 800445a:	f001 fad9 	bl	8005a10 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 800445e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004462:	e005      	b.n	8004470 <USBD_CDC_Init+0x26>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8004464:	2340      	movs	r3, #64	; 0x40
 8004466:	2202      	movs	r2, #2
 8004468:	2181      	movs	r1, #129	; 0x81
 800446a:	f001 fad1 	bl	8005a10 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 800446e:	2340      	movs	r3, #64	; 0x40
 8004470:	2202      	movs	r2, #2
 8004472:	2101      	movs	r1, #1
 8004474:	4620      	mov	r0, r4
 8004476:	f001 facb 	bl	8005a10 <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 800447a:	2308      	movs	r3, #8
 800447c:	2203      	movs	r2, #3
 800447e:	2182      	movs	r1, #130	; 0x82
 8004480:	4620      	mov	r0, r4
 8004482:	f001 fac5 	bl	8005a10 <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8004486:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800448a:	f001 fbe1 	bl	8005c50 <malloc>
 800448e:	4606      	mov	r6, r0
 8004490:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 8004494:	b1e8      	cbz	r0, 80044d2 <USBD_CDC_Init+0x88>
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004496:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
    hcdc->RxState =0;
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800449e:	7c27      	ldrb	r7, [r4, #16]
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
    
    /* Init Xfer states */
    hcdc->TxState =0;
 80044a0:	2500      	movs	r5, #0
 80044a2:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
 80044a6:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80044aa:	b94f      	cbnz	r7, 80044c0 <USBD_CDC_Init+0x76>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80044ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044b0:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80044b4:	2101      	movs	r1, #1
 80044b6:	4620      	mov	r0, r4
 80044b8:	f001 fb14 	bl	8005ae4 <USBD_LL_PrepareReceive>
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
  uint8_t ret = 0;
 80044bc:	4638      	mov	r0, r7
 80044be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80044c0:	2340      	movs	r3, #64	; 0x40
 80044c2:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80044c6:	2101      	movs	r1, #1
 80044c8:	4620      	mov	r0, r4
 80044ca:	f001 fb0b 	bl	8005ae4 <USBD_LL_PrepareReceive>
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
  uint8_t ret = 0;
 80044ce:	4628      	mov	r0, r5
 80044d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
  
  if(pdev->pClassData == NULL)
  {
    ret = 1; 
 80044d2:	2001      	movs	r0, #1
    }
    
    
  }
  return ret;
}
 80044d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080044d6 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 80044d6:	b119      	cbz	r1, 80044e0 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 80044d8:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 80044dc:	2000      	movs	r0, #0
 80044de:	4770      	bx	lr
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
 80044e0:	2002      	movs	r0, #2
    pdev->pUserData= fops;
    ret = USBD_OK;    
  }
  
  return ret;
}
 80044e2:	4770      	bx	lr

080044e4 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80044e4:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 80044e8:	2000      	movs	r0, #0
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  hcdc->TxBuffer = pbuff;
 80044ea:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 80044ee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
}
 80044f2:	4770      	bx	lr

080044f4 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 80044f4:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 80044f8:	2000      	movs	r0, #0
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 80044fa:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
  
  return USBD_OK;
}
 80044fe:	4770      	bx	lr

08004500 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004500:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 8004504:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8004506:	b162      	cbz	r2, 8004522 <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004508:	7c04      	ldrb	r4, [r0, #16]
 800450a:	b914      	cbnz	r4, 8004512 <USBD_CDC_ReceivePacket+0x12>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800450c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004510:	e000      	b.n	8004514 <USBD_CDC_ReceivePacket+0x14>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004512:	2340      	movs	r3, #64	; 0x40
 8004514:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8004518:	2101      	movs	r1, #1
 800451a:	f001 fae3 	bl	8005ae4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800451e:	2000      	movs	r0, #0
 8004520:	bd10      	pop	{r4, pc}
  }
  else
  {
    return USBD_FAIL;
 8004522:	2002      	movs	r0, #2
  }
}
 8004524:	bd10      	pop	{r4, pc}

08004526 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004526:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8004528:	b180      	cbz	r0, 800454c <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800452a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800452e:	b113      	cbz	r3, 8004536 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8004530:	2300      	movs	r3, #0
 8004532:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8004536:	b109      	cbz	r1, 800453c <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8004538:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800453c:	2301      	movs	r3, #1
 800453e:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 8004542:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004544:	f001 fa26 	bl	8005994 <USBD_LL_Init>
  
  return USBD_OK; 
 8004548:	2000      	movs	r0, #0
 800454a:	bd08      	pop	{r3, pc}
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 800454c:	2002      	movs	r0, #2
  pdev->id = id;
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
  
  return USBD_OK; 
}
 800454e:	bd08      	pop	{r3, pc}

08004550 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8004550:	b119      	cbz	r1, 800455a <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004552:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8004556:	2000      	movs	r0, #0
 8004558:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 800455a:	2002      	movs	r0, #2
  }
  
  return status;
}
 800455c:	4770      	bx	lr

0800455e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800455e:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8004560:	f001 fa48 	bl	80059f4 <USBD_LL_Start>
  
  return USBD_OK;  
}
 8004564:	2000      	movs	r0, #0
 8004566:	bd08      	pop	{r3, pc}

08004568 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004568:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 800456a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800456e:	b90b      	cbnz	r3, 8004574 <USBD_SetClassConfig+0xc>
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8004570:	2002      	movs	r0, #2
 8004572:	bd08      	pop	{r3, pc}
  
  if(pdev->pClass != NULL)
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4798      	blx	r3
 8004578:	2800      	cmp	r0, #0
 800457a:	d1f9      	bne.n	8004570 <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 800457c:	bd08      	pop	{r3, pc}

0800457e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800457e:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8004580:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	4798      	blx	r3
  return USBD_OK;
}
 8004588:	2000      	movs	r0, #0
 800458a:	bd08      	pop	{r3, pc}

0800458c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800458c:	b538      	push	{r3, r4, r5, lr}
 800458e:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004590:	f500 7502 	add.w	r5, r0, #520	; 0x208
 8004594:	4628      	mov	r0, r5
 8004596:	f000 f8f3 	bl	8004780 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 800459a:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 800459c:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{

  USBD_ParseSetupRequest(&pdev->request, psetup);
  
  pdev->ep0_state = USBD_EP0_SETUP;
 80045a0:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 80045a4:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 80045a8:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 80045ac:	f001 031f 	and.w	r3, r1, #31
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d00c      	beq.n	80045ce <USBD_LL_SetupStage+0x42>
 80045b4:	d306      	bcc.n	80045c4 <USBD_LL_SetupStage+0x38>
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d10e      	bne.n	80045d8 <USBD_LL_SetupStage+0x4c>
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
    break;
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 80045ba:	4629      	mov	r1, r5
 80045bc:	4620      	mov	r0, r4
 80045be:	f000 fa21 	bl	8004a04 <USBD_StdEPReq>
    break;
 80045c2:	e00e      	b.n	80045e2 <USBD_LL_SetupStage+0x56>
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 80045c4:	4629      	mov	r1, r5
 80045c6:	4620      	mov	r0, r4
 80045c8:	f000 f8fa 	bl	80047c0 <USBD_StdDevReq>
    break;
 80045cc:	e009      	b.n	80045e2 <USBD_LL_SetupStage+0x56>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 80045ce:	4629      	mov	r1, r5
 80045d0:	4620      	mov	r0, r4
 80045d2:	f000 f9ff 	bl	80049d4 <USBD_StdItfReq>
    break;
 80045d6:	e004      	b.n	80045e2 <USBD_LL_SetupStage+0x56>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 80045d8:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80045dc:	4620      	mov	r0, r4
 80045de:	f001 fa35 	bl	8005a4c <USBD_LL_StallEP>
    break;
  }  
  return USBD_OK;  
}
 80045e2:	2000      	movs	r0, #0
 80045e4:	bd38      	pop	{r3, r4, r5, pc}

080045e6 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 80045e6:	b538      	push	{r3, r4, r5, lr}
 80045e8:	4604      	mov	r4, r0
 80045ea:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 80045ec:	bb09      	cbnz	r1, 8004632 <USBD_LL_DataOutStage+0x4c>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80045ee:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 80045f2:	2b03      	cmp	r3, #3
 80045f4:	d126      	bne.n	8004644 <USBD_LL_DataOutStage+0x5e>
    {
      if(pep->rem_length > pep->maxpacket)
 80045f6:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 80045fa:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 80045fe:	4291      	cmp	r1, r2
 8004600:	d90a      	bls.n	8004618 <USBD_LL_DataOutStage+0x32>
      {
        pep->rem_length -=  pep->maxpacket;
 8004602:	1a8b      	subs	r3, r1, r2
       
        USBD_CtlContinueRx (pdev, 
 8004604:	429a      	cmp	r2, r3
 8004606:	bf28      	it	cs
 8004608:	461a      	movcs	r2, r3
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
 800460a:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
       
        USBD_CtlContinueRx (pdev, 
 800460e:	b292      	uxth	r2, r2
 8004610:	4629      	mov	r1, r5
 8004612:	f000 fa9a 	bl	8004b4a <USBD_CtlContinueRx>
 8004616:	e015      	b.n	8004644 <USBD_LL_DataOutStage+0x5e>
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8004618:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	b123      	cbz	r3, 800462a <USBD_LL_DataOutStage+0x44>
 8004620:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8004624:	2a03      	cmp	r2, #3
 8004626:	d100      	bne.n	800462a <USBD_LL_DataOutStage+0x44>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
        {
          pdev->pClass->EP0_RxReady(pdev); 
 8004628:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800462a:	4620      	mov	r0, r4
 800462c:	f000 fa95 	bl	8004b5a <USBD_CtlSendStatus>
 8004630:	e008      	b.n	8004644 <USBD_LL_DataOutStage+0x5e>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8004632:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	b123      	cbz	r3, 8004644 <USBD_LL_DataOutStage+0x5e>
 800463a:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800463e:	2a03      	cmp	r2, #3
 8004640:	d100      	bne.n	8004644 <USBD_LL_DataOutStage+0x5e>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
 8004642:	4798      	blx	r3
  }  
  return USBD_OK;
}
 8004644:	2000      	movs	r0, #0
 8004646:	bd38      	pop	{r3, r4, r5, pc}

08004648 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8004648:	b570      	push	{r4, r5, r6, lr}
 800464a:	4613      	mov	r3, r2
 800464c:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 800464e:	460e      	mov	r6, r1
 8004650:	2900      	cmp	r1, #0
 8004652:	d13c      	bne.n	80046ce <USBD_LL_DataInStage+0x86>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8004654:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8004658:	2a02      	cmp	r2, #2
 800465a:	d130      	bne.n	80046be <USBD_LL_DataInStage+0x76>
    {
      if(pep->rem_length > pep->maxpacket)
 800465c:	69c5      	ldr	r5, [r0, #28]
 800465e:	6a02      	ldr	r2, [r0, #32]
 8004660:	4295      	cmp	r5, r2
 8004662:	d907      	bls.n	8004674 <USBD_LL_DataInStage+0x2c>
      {
        pep->rem_length -=  pep->maxpacket;
 8004664:	1aaa      	subs	r2, r5, r2
 8004666:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 8004668:	4619      	mov	r1, r3
 800466a:	b292      	uxth	r2, r2
 800466c:	f000 fa56 	bl	8004b1c <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8004670:	4633      	mov	r3, r6
 8004672:	e011      	b.n	8004698 <USBD_LL_DataInStage+0x50>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8004674:	6983      	ldr	r3, [r0, #24]
 8004676:	fbb3 f5f2 	udiv	r5, r3, r2
 800467a:	fb02 3515 	mls	r5, r2, r5, r3
 800467e:	b98d      	cbnz	r5, 80046a4 <USBD_LL_DataInStage+0x5c>
 8004680:	429a      	cmp	r2, r3
 8004682:	d80f      	bhi.n	80046a4 <USBD_LL_DataInStage+0x5c>
           (pep->total_length >= pep->maxpacket) &&
 8004684:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 8004688:	4293      	cmp	r3, r2
 800468a:	d20b      	bcs.n	80046a4 <USBD_LL_DataInStage+0x5c>
             (pep->total_length < pdev->ep0_data_len ))
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 800468c:	462a      	mov	r2, r5
 800468e:	f000 fa45 	bl	8004b1c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8004692:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8004696:	462b      	mov	r3, r5
 8004698:	461a      	mov	r2, r3
 800469a:	4619      	mov	r1, r3
 800469c:	4620      	mov	r0, r4
 800469e:	f001 fa21 	bl	8005ae4 <USBD_LL_PrepareReceive>
 80046a2:	e00c      	b.n	80046be <USBD_LL_DataInStage+0x76>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80046a4:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	b12b      	cbz	r3, 80046b8 <USBD_LL_DataInStage+0x70>
 80046ac:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 80046b0:	2a03      	cmp	r2, #3
 80046b2:	d101      	bne.n	80046b8 <USBD_LL_DataInStage+0x70>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
          {
            pdev->pClass->EP0_TxSent(pdev); 
 80046b4:	4620      	mov	r0, r4
 80046b6:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 80046b8:	4620      	mov	r0, r4
 80046ba:	f000 fa59 	bl	8004b70 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 80046be:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d10c      	bne.n	80046e0 <USBD_LL_DataInStage+0x98>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 80046c6:	2300      	movs	r3, #0
 80046c8:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
 80046cc:	e008      	b.n	80046e0 <USBD_LL_DataInStage+0x98>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 80046ce:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80046d2:	695b      	ldr	r3, [r3, #20]
 80046d4:	b123      	cbz	r3, 80046e0 <USBD_LL_DataInStage+0x98>
 80046d6:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80046da:	2a03      	cmp	r2, #3
 80046dc:	d100      	bne.n	80046e0 <USBD_LL_DataInStage+0x98>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
 80046de:	4798      	blx	r3
  }  
  return USBD_OK;
}
 80046e0:	2000      	movs	r0, #0
 80046e2:	bd70      	pop	{r4, r5, r6, pc}

080046e4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80046e4:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 80046e6:	2200      	movs	r2, #0
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80046e8:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 80046ea:	4611      	mov	r1, r2
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80046ec:	2540      	movs	r5, #64	; 0x40
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 80046ee:	2340      	movs	r3, #64	; 0x40
 80046f0:	f001 f98e 	bl	8005a10 <USBD_LL_OpenEP>
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 80046f4:	462b      	mov	r3, r5
  USBD_LL_OpenEP(pdev,
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80046f6:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 80046fa:	2200      	movs	r2, #0
 80046fc:	2180      	movs	r1, #128	; 0x80
 80046fe:	4620      	mov	r0, r4
 8004700:	f001 f986 	bl	8005a10 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004704:	2301      	movs	r3, #1
 8004706:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 800470a:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  USBD_LL_OpenEP(pdev,
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800470e:	6225      	str	r5, [r4, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  
  if (pdev->pClassData) 
 8004710:	b12b      	cbz	r3, 800471e <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8004712:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8004716:	7921      	ldrb	r1, [r4, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	4620      	mov	r0, r4
 800471c:	4798      	blx	r3
 
  
  return USBD_OK;
}
 800471e:	2000      	movs	r0, #0
 8004720:	bd38      	pop	{r3, r4, r5, pc}

08004722 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8004722:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8004724:	2000      	movs	r0, #0
 8004726:	4770      	bx	lr

08004728 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8004728:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800472c:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004730:	2304      	movs	r3, #4
 8004732:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8004736:	2000      	movs	r0, #0
 8004738:	4770      	bx	lr

0800473a <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 800473a:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 800473e:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8004742:	2000      	movs	r0, #0
 8004744:	4770      	bx	lr

08004746 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8004746:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8004748:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800474c:	2a03      	cmp	r2, #3
 800474e:	d104      	bne.n	800475a <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8004750:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004754:	69db      	ldr	r3, [r3, #28]
 8004756:	b103      	cbz	r3, 800475a <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8004758:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 800475a:	2000      	movs	r0, #0
 800475c:	bd08      	pop	{r3, pc}

0800475e <USBD_LL_IsoINIncomplete>:
 800475e:	2000      	movs	r0, #0
 8004760:	4770      	bx	lr

08004762 <USBD_LL_IsoOUTIncomplete>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
  return USBD_OK;
}
 8004762:	2000      	movs	r0, #0
 8004764:	4770      	bx	lr

08004766 <USBD_LL_DevConnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
  return USBD_OK;
}
 8004766:	2000      	movs	r0, #0
 8004768:	4770      	bx	lr

0800476a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800476a:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800476c:	2201      	movs	r2, #1
 800476e:	f880 21fc 	strb.w	r2, [r0, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8004772:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
 8004776:	7901      	ldrb	r1, [r0, #4]
 8004778:	6852      	ldr	r2, [r2, #4]
 800477a:	4790      	blx	r2
   
  return USBD_OK;
}
 800477c:	2000      	movs	r0, #0
 800477e:	bd08      	pop	{r3, pc}

08004780 <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  req->bmRequest     = *(uint8_t *)  (pdata);
 8004780:	780b      	ldrb	r3, [r1, #0]
 8004782:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8004784:	784b      	ldrb	r3, [r1, #1]
 8004786:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8004788:	78ca      	ldrb	r2, [r1, #3]
 800478a:	788b      	ldrb	r3, [r1, #2]
 800478c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004790:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8004792:	794a      	ldrb	r2, [r1, #5]
 8004794:	790b      	ldrb	r3, [r1, #4]
 8004796:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800479a:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800479c:	79ca      	ldrb	r2, [r1, #7]
 800479e:	798b      	ldrb	r3, [r1, #6]
 80047a0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80047a4:	80c3      	strh	r3, [r0, #6]
 80047a6:	4770      	bx	lr

080047a8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80047a8:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80);
 80047aa:	2180      	movs	r1, #128	; 0x80
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80047ac:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 80047ae:	f001 f94d 	bl	8005a4c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 80047b2:	4620      	mov	r0, r4
 80047b4:	2100      	movs	r1, #0
}
 80047b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
  USBD_LL_StallEP(pdev , 0);
 80047ba:	f001 b947 	b.w	8005a4c <USBD_LL_StallEP>
	...

080047c0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80047c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  USBD_StatusTypeDef ret = USBD_OK;  
  
  switch (req->bRequest) 
 80047c2:	784b      	ldrb	r3, [r1, #1]
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80047c4:	4604      	mov	r4, r0
 80047c6:	460d      	mov	r5, r1
  USBD_StatusTypeDef ret = USBD_OK;  
  
  switch (req->bRequest) 
 80047c8:	2b09      	cmp	r3, #9
 80047ca:	f200 80f9 	bhi.w	80049c0 <USBD_StdDevReq+0x200>
 80047ce:	e8df f013 	tbh	[pc, r3, lsl #1]
 80047d2:	00cb      	.short	0x00cb
 80047d4:	00f700e2 	.word	0x00f700e2
 80047d8:	00f700de 	.word	0x00f700de
 80047dc:	000a0075 	.word	0x000a0075
 80047e0:	00bb00f7 	.word	0x00bb00f7
 80047e4:	0091      	.short	0x0091
{
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 80047e6:	884b      	ldrh	r3, [r1, #2]
 80047e8:	0a1a      	lsrs	r2, r3, #8
 80047ea:	3a01      	subs	r2, #1
 80047ec:	2a06      	cmp	r2, #6
 80047ee:	f200 80e7 	bhi.w	80049c0 <USBD_StdDevReq+0x200>
 80047f2:	e8df f012 	tbh	[pc, r2, lsl #1]
 80047f6:	0007      	.short	0x0007
 80047f8:	0017000b 	.word	0x0017000b
 80047fc:	00e500e5 	.word	0x00e500e5
 8004800:	0047003c 	.word	0x0047003c
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004804:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	e017      	b.n	800483c <USBD_StdDevReq+0x7c>
    break;
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 800480c:	7c02      	ldrb	r2, [r0, #16]
 800480e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004812:	b90a      	cbnz	r2, 8004818 <USBD_StdDevReq+0x58>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8004814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004816:	e000      	b.n	800481a <USBD_StdDevReq+0x5a>
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481a:	f10d 0006 	add.w	r0, sp, #6
 800481e:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004820:	2302      	movs	r3, #2
 8004822:	e03a      	b.n	800489a <USBD_StdDevReq+0xda>
    }
    break;
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b05      	cmp	r3, #5
 8004828:	f200 80ca 	bhi.w	80049c0 <USBD_StdDevReq+0x200>
 800482c:	e8df f003 	tbb	[pc, r3]
 8004830:	130f0b03 	.word	0x130f0b03
 8004834:	1b17      	.short	0x1b17
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8004836:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	7c20      	ldrb	r0, [r4, #16]
 800483e:	f10d 0106 	add.w	r1, sp, #6
 8004842:	4798      	blx	r3
 8004844:	e02a      	b.n	800489c <USBD_StdDevReq+0xdc>
      break;
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004846:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	e7f6      	b.n	800483c <USBD_StdDevReq+0x7c>
      break;
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800484e:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	e7f2      	b.n	800483c <USBD_StdDevReq+0x7c>
      break;
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004856:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	e7ee      	b.n	800483c <USBD_StdDevReq+0x7c>
      break;
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800485e:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8004862:	695b      	ldr	r3, [r3, #20]
 8004864:	e7ea      	b.n	800483c <USBD_StdDevReq+0x7c>
      break;
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004866:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	e7e6      	b.n	800483c <USBD_StdDevReq+0x7c>
#endif   
    }
    break;
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800486e:	7c03      	ldrb	r3, [r0, #16]
 8004870:	2b00      	cmp	r3, #0
 8004872:	f040 80a5 	bne.w	80049c0 <USBD_StdDevReq+0x200>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004876:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800487a:	f10d 0006 	add.w	r0, sp, #6
 800487e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004880:	4798      	blx	r3
 8004882:	e00b      	b.n	800489c <USBD_StdDevReq+0xdc>
      USBD_CtlError(pdev , req);
      return;
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8004884:	7c03      	ldrb	r3, [r0, #16]
 8004886:	2b00      	cmp	r3, #0
 8004888:	f040 809a 	bne.w	80049c0 <USBD_StdDevReq+0x200>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800488c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004890:	f10d 0006 	add.w	r0, sp, #6
 8004894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004896:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004898:	2307      	movs	r3, #7
 800489a:	7043      	strb	r3, [r0, #1]
  default: 
     USBD_CtlError(pdev , req);
    return;
  }
  
  if((len != 0)&& (req->wLength != 0))
 800489c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80048a0:	2a00      	cmp	r2, #0
 80048a2:	f000 8091 	beq.w	80049c8 <USBD_StdDevReq+0x208>
 80048a6:	88eb      	ldrh	r3, [r5, #6]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	f000 808d 	beq.w	80049c8 <USBD_StdDevReq+0x208>
  {
    
    len = MIN(len , req->wLength);
 80048ae:	429a      	cmp	r2, r3
 80048b0:	bf28      	it	cs
 80048b2:	461a      	movcs	r2, r3
 80048b4:	f8ad 2006 	strh.w	r2, [sp, #6]
    
    USBD_CtlSendData (pdev, 
 80048b8:	4601      	mov	r1, r0
 80048ba:	e064      	b.n	8004986 <USBD_StdDevReq+0x1c6>
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 80048bc:	888b      	ldrh	r3, [r1, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d17e      	bne.n	80049c0 <USBD_StdDevReq+0x200>
 80048c2:	88cb      	ldrh	r3, [r1, #6]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d17b      	bne.n	80049c0 <USBD_StdDevReq+0x200>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80048c8:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80048cc:	788e      	ldrb	r6, [r1, #2]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80048ce:	2b03      	cmp	r3, #3
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80048d0:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80048d4:	d074      	beq.n	80049c0 <USBD_StdDevReq+0x200>
    {
      USBD_CtlError(pdev , req);
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 80048d6:	f880 61fe 	strb.w	r6, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 80048da:	4631      	mov	r1, r6
 80048dc:	f001 f8e6 	bl	8005aac <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 80048e0:	4620      	mov	r0, r4
 80048e2:	f000 f93a 	bl	8004b5a <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 80048e6:	b10e      	cbz	r6, 80048ec <USBD_StdDevReq+0x12c>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 80048e8:	2302      	movs	r3, #2
 80048ea:	e000      	b.n	80048ee <USBD_StdDevReq+0x12e>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80048ec:	2301      	movs	r3, #1
 80048ee:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 80048f2:	e069      	b.n	80049c8 <USBD_StdDevReq+0x208>
                           USBD_SetupReqTypedef *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 80048f4:	7889      	ldrb	r1, [r1, #2]
 80048f6:	4e36      	ldr	r6, [pc, #216]	; (80049d0 <USBD_StdDevReq+0x210>)
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80048f8:	2901      	cmp	r1, #1
                           USBD_SetupReqTypedef *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 80048fa:	7031      	strb	r1, [r6, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80048fc:	d860      	bhi.n	80049c0 <USBD_StdDevReq+0x200>
  {            
     USBD_CtlError(pdev , req);                              
  } 
  else 
  {
    switch (pdev->dev_state) 
 80048fe:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8004902:	2b02      	cmp	r3, #2
 8004904:	d002      	beq.n	800490c <USBD_StdDevReq+0x14c>
 8004906:	2b03      	cmp	r3, #3
 8004908:	d008      	beq.n	800491c <USBD_StdDevReq+0x15c>
 800490a:	e059      	b.n	80049c0 <USBD_StdDevReq+0x200>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 800490c:	2900      	cmp	r1, #0
 800490e:	d053      	beq.n	80049b8 <USBD_StdDevReq+0x1f8>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8004910:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8004912:	2303      	movs	r3, #3
    switch (pdev->dev_state) 
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8004914:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8004916:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
 800491a:	e00f      	b.n	800493c <USBD_StdDevReq+0x17c>
         USBD_CtlSendStatus(pdev);
      }
      break;
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 800491c:	b931      	cbnz	r1, 800492c <USBD_StdDevReq+0x16c>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800491e:	2302      	movs	r3, #2
 8004920:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8004924:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8004926:	f7ff fe2a 	bl	800457e <USBD_ClrClassConfig>
 800492a:	e045      	b.n	80049b8 <USBD_StdDevReq+0x1f8>
        USBD_CtlSendStatus(pdev);
        
      } 
      else  if (cfgidx != pdev->dev_config) 
 800492c:	6841      	ldr	r1, [r0, #4]
 800492e:	2901      	cmp	r1, #1
 8004930:	d042      	beq.n	80049b8 <USBD_StdDevReq+0x1f8>
      {
        /* Clear old configuration */
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8004932:	b2c9      	uxtb	r1, r1
 8004934:	f7ff fe23 	bl	800457e <USBD_ClrClassConfig>
        
        /* set new configuration */
        pdev->dev_config = cfgidx;
 8004938:	7831      	ldrb	r1, [r6, #0]
 800493a:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800493c:	4620      	mov	r0, r4
 800493e:	f7ff fe13 	bl	8004568 <USBD_SetClassConfig>
 8004942:	2802      	cmp	r0, #2
 8004944:	d138      	bne.n	80049b8 <USBD_StdDevReq+0x1f8>
 8004946:	e03b      	b.n	80049c0 <USBD_StdDevReq+0x200>
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{

  if (req->wLength != 1) 
 8004948:	88ca      	ldrh	r2, [r1, #6]
 800494a:	2a01      	cmp	r2, #1
 800494c:	d138      	bne.n	80049c0 <USBD_StdDevReq+0x200>
  {                   
     USBD_CtlError(pdev , req);
  }
  else 
  {
    switch (pdev->dev_state )  
 800494e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8004952:	2b02      	cmp	r3, #2
 8004954:	d003      	beq.n	800495e <USBD_StdDevReq+0x19e>
 8004956:	2b03      	cmp	r3, #3
 8004958:	d132      	bne.n	80049c0 <USBD_StdDevReq+0x200>
                        1);
      break;
      
    case USBD_STATE_CONFIGURED:   
      
      USBD_CtlSendData (pdev, 
 800495a:	1d01      	adds	r1, r0, #4
 800495c:	e013      	b.n	8004986 <USBD_StdDevReq+0x1c6>
  else 
  {
    switch (pdev->dev_state )  
    {
    case USBD_STATE_ADDRESSED:                     
      pdev->dev_default_config = 0;
 800495e:	4601      	mov	r1, r0
 8004960:	2300      	movs	r3, #0
 8004962:	f841 3f08 	str.w	r3, [r1, #8]!
 8004966:	e00e      	b.n	8004986 <USBD_StdDevReq+0x1c6>
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
  
    
  switch (pdev->dev_state) 
 8004968:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800496c:	3b02      	subs	r3, #2
 800496e:	2b01      	cmp	r3, #1
 8004970:	d826      	bhi.n	80049c0 <USBD_StdDevReq+0x200>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8004972:	2301      	movs	r3, #1
 8004974:	60c3      	str	r3, [r0, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 8004976:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 800497a:	b10b      	cbz	r3, 8004980 <USBD_StdDevReq+0x1c0>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 800497c:	2303      	movs	r3, #3
 800497e:	60c3      	str	r3, [r0, #12]
    }
    
    USBD_CtlSendData (pdev, 
 8004980:	2202      	movs	r2, #2
 8004982:	f104 010c 	add.w	r1, r4, #12
 8004986:	4620      	mov	r0, r4
 8004988:	f000 f8bb 	bl	8004b02 <USBD_CtlSendData>
 800498c:	e01c      	b.n	80049c8 <USBD_StdDevReq+0x208>
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800498e:	884b      	ldrh	r3, [r1, #2]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d119      	bne.n	80049c8 <USBD_StdDevReq+0x208>
 8004994:	e008      	b.n	80049a8 <USBD_StdDevReq+0x1e8>
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
  switch (pdev->dev_state)
 8004996:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800499a:	3b02      	subs	r3, #2
 800499c:	2b01      	cmp	r3, #1
 800499e:	d80f      	bhi.n	80049c0 <USBD_StdDevReq+0x200>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 80049a0:	884b      	ldrh	r3, [r1, #2]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d110      	bne.n	80049c8 <USBD_StdDevReq+0x208>
    {
      pdev->dev_remote_wakeup = 0; 
 80049a6:	2300      	movs	r3, #0
 80049a8:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 80049ac:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80049b0:	4629      	mov	r1, r5
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	4620      	mov	r0, r4
 80049b6:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80049b8:	4620      	mov	r0, r4
 80049ba:	f000 f8ce 	bl	8004b5a <USBD_CtlSendStatus>
 80049be:	e003      	b.n	80049c8 <USBD_StdDevReq+0x208>
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
    break;
    
  default:  
    USBD_CtlError(pdev , req);
 80049c0:	4629      	mov	r1, r5
 80049c2:	4620      	mov	r0, r4
 80049c4:	f7ff fef0 	bl	80047a8 <USBD_CtlError>
    break;
  }
  
  return ret;
}
 80049c8:	2000      	movs	r0, #0
 80049ca:	b002      	add	sp, #8
 80049cc:	bd70      	pop	{r4, r5, r6, pc}
 80049ce:	bf00      	nop
 80049d0:	200001d9 	.word	0x200001d9

080049d4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80049d4:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret = USBD_OK; 
  
  switch (pdev->dev_state) 
 80049d6:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80049da:	2b03      	cmp	r3, #3
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80049dc:	4604      	mov	r4, r0
 80049de:	460d      	mov	r5, r1
  USBD_StatusTypeDef ret = USBD_OK; 
  
  switch (pdev->dev_state) 
 80049e0:	d10c      	bne.n	80049fc <USBD_StdItfReq+0x28>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 80049e2:	790b      	ldrb	r3, [r1, #4]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d809      	bhi.n	80049fc <USBD_StdItfReq+0x28>
    {
      pdev->pClass->Setup (pdev, req); 
 80049e8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 80049f0:	88eb      	ldrh	r3, [r5, #6]
 80049f2:	b92b      	cbnz	r3, 8004a00 <USBD_StdItfReq+0x2c>
      {
         USBD_CtlSendStatus(pdev);
 80049f4:	4620      	mov	r0, r4
 80049f6:	f000 f8b0 	bl	8004b5a <USBD_CtlSendStatus>
 80049fa:	e001      	b.n	8004a00 <USBD_StdItfReq+0x2c>
       USBD_CtlError(pdev , req);
    }
    break;
    
  default:
     USBD_CtlError(pdev , req);
 80049fc:	f7ff fed4 	bl	80047a8 <USBD_CtlError>
    break;
  }
  return USBD_OK;
}
 8004a00:	2000      	movs	r0, #0
 8004a02:	bd38      	pop	{r3, r4, r5, pc}

08004a04 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004a04:	b570      	push	{r4, r5, r6, lr}
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 8004a06:	780a      	ldrb	r2, [r1, #0]
{
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8004a08:	888e      	ldrh	r6, [r1, #4]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 8004a0a:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8004a0e:	2a20      	cmp	r2, #32
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004a10:	4604      	mov	r4, r0
 8004a12:	460d      	mov	r5, r1
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8004a14:	b2f3      	uxtb	r3, r6
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 8004a16:	d104      	bne.n	8004a22 <USBD_StdEPReq+0x1e>
  {
    pdev->pClass->Setup (pdev, req);
 8004a18:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	4798      	blx	r3
    
    return USBD_OK;
 8004a20:	e051      	b.n	8004ac6 <USBD_StdEPReq+0xc2>
  }
  
  switch (req->bRequest) 
 8004a22:	784a      	ldrb	r2, [r1, #1]
 8004a24:	2a01      	cmp	r2, #1
 8004a26:	d010      	beq.n	8004a4a <USBD_StdEPReq+0x46>
 8004a28:	d326      	bcc.n	8004a78 <USBD_StdEPReq+0x74>
 8004a2a:	2a03      	cmp	r2, #3
 8004a2c:	d14b      	bne.n	8004ac6 <USBD_StdEPReq+0xc2>
  {
    
  case USB_REQ_SET_FEATURE :
    
    switch (pdev->dev_state) 
 8004a2e:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8004a32:	2a02      	cmp	r2, #2
 8004a34:	d027      	beq.n	8004a86 <USBD_StdEPReq+0x82>
 8004a36:	2a03      	cmp	r2, #3
 8004a38:	d143      	bne.n	8004ac2 <USBD_StdEPReq+0xbe>
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 8004a3a:	884a      	ldrh	r2, [r1, #2]
 8004a3c:	b992      	cbnz	r2, 8004a64 <USBD_StdEPReq+0x60>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8004a3e:	065e      	lsls	r6, r3, #25
 8004a40:	d010      	beq.n	8004a64 <USBD_StdEPReq+0x60>
        { 
          USBD_LL_StallEP(pdev , ep_addr);
 8004a42:	4619      	mov	r1, r3
 8004a44:	f001 f802 	bl	8005a4c <USBD_LL_StallEP>
 8004a48:	e00c      	b.n	8004a64 <USBD_StdEPReq+0x60>
    }
    break;
    
  case USB_REQ_CLEAR_FEATURE :
    
    switch (pdev->dev_state) 
 8004a4a:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8004a4e:	2a02      	cmp	r2, #2
 8004a50:	d019      	beq.n	8004a86 <USBD_StdEPReq+0x82>
 8004a52:	2a03      	cmp	r2, #3
 8004a54:	d135      	bne.n	8004ac2 <USBD_StdEPReq+0xbe>
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 8004a56:	884a      	ldrh	r2, [r1, #2]
 8004a58:	bbaa      	cbnz	r2, 8004ac6 <USBD_StdEPReq+0xc2>
      {
        if ((ep_addr & 0x7F) != 0x00) 
 8004a5a:	0659      	lsls	r1, r3, #25
 8004a5c:	d008      	beq.n	8004a70 <USBD_StdEPReq+0x6c>
        {        
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8004a5e:	4619      	mov	r1, r3
 8004a60:	f001 f802 	bl	8005a68 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8004a64:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8004a68:	4629      	mov	r1, r5
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	4620      	mov	r0, r4
 8004a6e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004a70:	4620      	mov	r0, r4
 8004a72:	f000 f872 	bl	8004b5a <USBD_CtlSendStatus>
 8004a76:	e026      	b.n	8004ac6 <USBD_StdEPReq+0xc2>
      break;    
    }
    break;
    
  case USB_REQ_GET_STATUS:                  
    switch (pdev->dev_state) 
 8004a78:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8004a7c:	2a02      	cmp	r2, #2
 8004a7e:	d002      	beq.n	8004a86 <USBD_StdEPReq+0x82>
 8004a80:	2a03      	cmp	r2, #3
 8004a82:	d006      	beq.n	8004a92 <USBD_StdEPReq+0x8e>
 8004a84:	e01d      	b.n	8004ac2 <USBD_StdEPReq+0xbe>
    {
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr & 0x7F) != 0x00) 
 8004a86:	065a      	lsls	r2, r3, #25
 8004a88:	d01d      	beq.n	8004ac6 <USBD_StdEPReq+0xc2>
      {
        USBD_LL_StallEP(pdev , ep_addr);
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	f000 ffde 	bl	8005a4c <USBD_LL_StallEP>
 8004a90:	e019      	b.n	8004ac6 <USBD_StdEPReq+0xc2>
 8004a92:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8004a96:	f016 0f80 	tst.w	r6, #128	; 0x80
 8004a9a:	eb00 1505 	add.w	r5, r0, r5, lsl #4
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8004a9e:	4619      	mov	r1, r3
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8004aa0:	bf14      	ite	ne
 8004aa2:	3514      	addne	r5, #20
 8004aa4:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8004aa8:	f000 ffec 	bl	8005a84 <USBD_LL_IsStallEP>
 8004aac:	b110      	cbz	r0, 8004ab4 <USBD_StdEPReq+0xb0>
      {
        pep->status = 0x0001;     
 8004aae:	2301      	movs	r3, #1
 8004ab0:	602b      	str	r3, [r5, #0]
 8004ab2:	e000      	b.n	8004ab6 <USBD_StdEPReq+0xb2>
      }
      else
      {
        pep->status = 0x0000;  
 8004ab4:	6028      	str	r0, [r5, #0]
      }
      
      USBD_CtlSendData (pdev,
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	4629      	mov	r1, r5
 8004aba:	4620      	mov	r0, r4
 8004abc:	f000 f821 	bl	8004b02 <USBD_CtlSendData>
                        (uint8_t *)&pep->status,
                        2);
      break;
 8004ac0:	e001      	b.n	8004ac6 <USBD_StdEPReq+0xc2>
      
    default:                         
      USBD_CtlError(pdev , req);
 8004ac2:	f7ff fe71 	bl	80047a8 <USBD_CtlError>
    
  default:
    break;
  }
  return ret;
}
 8004ac6:	2000      	movs	r0, #0
 8004ac8:	bd70      	pop	{r4, r5, r6, pc}

08004aca <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8004aca:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8004acc:	b1c0      	cbz	r0, 8004b00 <USBD_GetString+0x36>
 8004ace:	4605      	mov	r5, r0
 8004ad0:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 8004ad2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	2c00      	cmp	r4, #0
 8004ada:	d1f9      	bne.n	8004ad0 <USBD_GetString+0x6>
{
  uint8_t idx = 0;
  
  if (desc != NULL) 
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8004adc:	005b      	lsls	r3, r3, #1
 8004ade:	3302      	adds	r3, #2
 8004ae0:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 8004ae2:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	704b      	strb	r3, [r1, #1]
 8004ae8:	3801      	subs	r0, #1
 8004aea:	2302      	movs	r3, #2
    
    while (*desc != '\0') 
 8004aec:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004af0:	b135      	cbz	r5, 8004b00 <USBD_GetString+0x36>
    {
      unicode[idx++] = *desc++;
 8004af2:	1c5a      	adds	r2, r3, #1
 8004af4:	b2d2      	uxtb	r2, r2
 8004af6:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0x00;
 8004af8:	3302      	adds	r3, #2
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	548c      	strb	r4, [r1, r2]
 8004afe:	e7f5      	b.n	8004aec <USBD_GetString+0x22>
 8004b00:	bd30      	pop	{r4, r5, pc}

08004b02 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8004b02:	b510      	push	{r4, lr}
 8004b04:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8004b06:	2202      	movs	r2, #2
 8004b08:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8004b0c:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8004b0e:	460a      	mov	r2, r1
                               uint16_t len)
{
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 8004b10:	61c3      	str	r3, [r0, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8004b12:	2100      	movs	r1, #0
 8004b14:	f000 ffd8 	bl	8005ac8 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8004b18:	2000      	movs	r0, #0
 8004b1a:	bd10      	pop	{r4, pc}

08004b1c <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8004b1c:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8004b1e:	4613      	mov	r3, r2
 8004b20:	460a      	mov	r2, r1
 8004b22:	2100      	movs	r1, #0
 8004b24:	f000 ffd0 	bl	8005ac8 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8004b28:	2000      	movs	r0, #0
 8004b2a:	bd08      	pop	{r3, pc}

08004b2c <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8004b2c:	b510      	push	{r4, lr}
 8004b2e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8004b30:	2203      	movs	r2, #3
 8004b32:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8004b36:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8004b3a:	460a      	mov	r2, r1
                                  uint16_t len)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 8004b3c:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8004b40:	2100      	movs	r1, #0
 8004b42:	f000 ffcf 	bl	8005ae4 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 8004b46:	2000      	movs	r0, #0
 8004b48:	bd10      	pop	{r4, pc}

08004b4a <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8004b4a:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	460a      	mov	r2, r1
 8004b50:	2100      	movs	r1, #0
 8004b52:	f000 ffc7 	bl	8005ae4 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8004b56:	2000      	movs	r0, #0
 8004b58:	bd08      	pop	{r3, pc}

08004b5a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8004b5a:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004b5c:	2304      	movs	r3, #4
 8004b5e:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8004b62:	2300      	movs	r3, #0
 8004b64:	461a      	mov	r2, r3
 8004b66:	4619      	mov	r1, r3
 8004b68:	f000 ffae 	bl	8005ac8 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8004b6c:	2000      	movs	r0, #0
 8004b6e:	bd08      	pop	{r3, pc}

08004b70 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8004b70:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8004b72:	2305      	movs	r3, #5
 8004b74:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8004b78:	2300      	movs	r3, #0
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	f000 ffb1 	bl	8005ae4 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8004b82:	2000      	movs	r0, #0
 8004b84:	bd08      	pop	{r3, pc}
	...

08004b88 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8004b88:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8004b8a:	4c06      	ldr	r4, [pc, #24]	; (8004ba4 <SD_initialize+0x1c>)
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	7023      	strb	r3, [r4, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 8004b90:	f000 f894 	bl	8004cbc <BSP_SD_Init>
 8004b94:	4623      	mov	r3, r4
 8004b96:	b918      	cbnz	r0, 8004ba0 <SD_initialize+0x18>
  {
    Stat &= ~STA_NOINIT;
 8004b98:	7822      	ldrb	r2, [r4, #0]
 8004b9a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b9e:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 8004ba0:	7818      	ldrb	r0, [r3, #0]
}
 8004ba2:	bd10      	pop	{r4, pc}
 8004ba4:	2000010f 	.word	0x2000010f

08004ba8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8004ba8:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8004baa:	4c06      	ldr	r4, [pc, #24]	; (8004bc4 <SD_status+0x1c>)
 8004bac:	2301      	movs	r3, #1
 8004bae:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8004bb0:	f000 f8be 	bl	8004d30 <BSP_SD_GetCardState>
 8004bb4:	4623      	mov	r3, r4
 8004bb6:	b918      	cbnz	r0, 8004bc0 <SD_status+0x18>
  {
    Stat &= ~STA_NOINIT;
 8004bb8:	7822      	ldrb	r2, [r4, #0]
 8004bba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004bbe:	7022      	strb	r2, [r4, #0]
  }
  
  return Stat;
 8004bc0:	7818      	ldrb	r0, [r3, #0]
}
 8004bc2:	bd10      	pop	{r4, pc}
 8004bc4:	2000010f 	.word	0x2000010f

08004bc8 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8004bc8:	b510      	push	{r4, lr}
 8004bca:	4608      	mov	r0, r1
 8004bcc:	4611      	mov	r1, r2
 8004bce:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;
  uint32_t timeout = 100000;

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 8004bd0:	4b06      	ldr	r3, [pc, #24]	; (8004bec <SD_read+0x24>)
 8004bd2:	f000 f88d 	bl	8004cf0 <BSP_SD_ReadBlocks>
 8004bd6:	b108      	cbz	r0, 8004bdc <SD_read+0x14>
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
  DRESULT res = RES_ERROR;
 8004bd8:	2001      	movs	r0, #1
 8004bda:	bd10      	pop	{r4, pc}
 8004bdc:	4c04      	ldr	r4, [pc, #16]	; (8004bf0 <SD_read+0x28>)

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 8004bde:	f000 f8a7 	bl	8004d30 <BSP_SD_GetCardState>
 8004be2:	b110      	cbz	r0, 8004bea <SD_read+0x22>
    {
      if (timeout-- == 0)
 8004be4:	3c01      	subs	r4, #1
 8004be6:	d1fa      	bne.n	8004bde <SD_read+0x16>
 8004be8:	e7f6      	b.n	8004bd8 <SD_read+0x10>
    }
    res = RES_OK;
  }
  
  return res;
}
 8004bea:	bd10      	pop	{r4, pc}
 8004bec:	05f5e100 	.word	0x05f5e100
 8004bf0:	000186a1 	.word	0x000186a1

08004bf4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8004bf4:	b510      	push	{r4, lr}
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004bf6:	4b12      	ldr	r3, [pc, #72]	; (8004c40 <SD_ioctl+0x4c>)
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	07db      	lsls	r3, r3, #31
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8004bfc:	b088      	sub	sp, #32
 8004bfe:	4614      	mov	r4, r2
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004c00:	d418      	bmi.n	8004c34 <SD_ioctl+0x40>
  
  switch (cmd)
 8004c02:	2903      	cmp	r1, #3
 8004c04:	d803      	bhi.n	8004c0e <SD_ioctl+0x1a>
 8004c06:	e8df f001 	tbb	[pc, r1]
 8004c0a:	0417      	.short	0x0417
 8004c0c:	0f09      	.short	0x0f09
    *(DWORD*)buff = CardInfo.LogBlockSize;
    res = RES_OK;
    break;
  
  default:
    res = RES_PARERR;
 8004c0e:	2004      	movs	r0, #4
 8004c10:	e013      	b.n	8004c3a <SD_ioctl+0x46>
    res = RES_OK;
    break;
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8004c12:	4668      	mov	r0, sp
 8004c14:	f000 f896 	bl	8004d44 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8004c18:	9b06      	ldr	r3, [sp, #24]
 8004c1a:	e009      	b.n	8004c30 <SD_ioctl+0x3c>
    res = RES_OK;
    break;
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004c1c:	4668      	mov	r0, sp
 8004c1e:	f000 f891 	bl	8004d44 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8004c22:	9b07      	ldr	r3, [sp, #28]
 8004c24:	8023      	strh	r3, [r4, #0]
 8004c26:	e007      	b.n	8004c38 <SD_ioctl+0x44>
    res = RES_OK;
    break;
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004c28:	4668      	mov	r0, sp
 8004c2a:	f000 f88b 	bl	8004d44 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 8004c2e:	9b07      	ldr	r3, [sp, #28]
 8004c30:	6023      	str	r3, [r4, #0]
 8004c32:	e001      	b.n	8004c38 <SD_ioctl+0x44>
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004c34:	2003      	movs	r0, #3
 8004c36:	e000      	b.n	8004c3a <SD_ioctl+0x46>
  
  switch (cmd)
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8004c38:	2000      	movs	r0, #0
  default:
    res = RES_PARERR;
  }
  
  return res;
}
 8004c3a:	b008      	add	sp, #32
 8004c3c:	bd10      	pop	{r4, pc}
 8004c3e:	bf00      	nop
 8004c40:	2000010f 	.word	0x2000010f

08004c44 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8004c44:	b510      	push	{r4, lr}
 8004c46:	4608      	mov	r0, r1
 8004c48:	4611      	mov	r1, r2
 8004c4a:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;
  uint32_t timeout = 100000;

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 8004c4c:	4b06      	ldr	r3, [pc, #24]	; (8004c68 <SD_write+0x24>)
 8004c4e:	f000 f85f 	bl	8004d10 <BSP_SD_WriteBlocks>
 8004c52:	b108      	cbz	r0, 8004c58 <SD_write+0x14>
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
  DRESULT res = RES_ERROR;
 8004c54:	2001      	movs	r0, #1
 8004c56:	bd10      	pop	{r4, pc}
 8004c58:	4c04      	ldr	r4, [pc, #16]	; (8004c6c <SD_write+0x28>)

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 8004c5a:	f000 f869 	bl	8004d30 <BSP_SD_GetCardState>
 8004c5e:	b110      	cbz	r0, 8004c66 <SD_write+0x22>
    {
      if (timeout-- == 0)
 8004c60:	3c01      	subs	r4, #1
 8004c62:	d1fa      	bne.n	8004c5a <SD_write+0x16>
 8004c64:	e7f6      	b.n	8004c54 <SD_write+0x10>
    }    
    res = RES_OK;
  }
  
  return res;
}
 8004c66:	bd10      	pop	{r4, pc}
 8004c68:	05f5e100 	.word	0x05f5e100
 8004c6c:	000186a1 	.word	0x000186a1

08004c70 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004c70:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;
  
  if(disk.nbr <= _VOLUMES)
 8004c72:	4b0f      	ldr	r3, [pc, #60]	; (8004cb0 <FATFS_LinkDriverEx+0x40>)
 8004c74:	7a5c      	ldrb	r4, [r3, #9]
 8004c76:	2c01      	cmp	r4, #1
 8004c78:	d818      	bhi.n	8004cac <FATFS_LinkDriverEx+0x3c>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004c7a:	7a5d      	ldrb	r5, [r3, #9]
 8004c7c:	b2ed      	uxtb	r5, r5
 8004c7e:	2400      	movs	r4, #0
 8004c80:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;  
 8004c82:	7a5d      	ldrb	r5, [r3, #9]
 8004c84:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8004c88:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;  
 8004c8a:	7a58      	ldrb	r0, [r3, #9]
 8004c8c:	4418      	add	r0, r3
 8004c8e:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8004c90:	7a5a      	ldrb	r2, [r3, #9]
 8004c92:	b2d2      	uxtb	r2, r2
 8004c94:	1c50      	adds	r0, r2, #1
 8004c96:	b2c0      	uxtb	r0, r0
 8004c98:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8004c9a:	233a      	movs	r3, #58	; 0x3a
  {
    disk.is_initialized[disk.nbr] = 0;
    disk.drv[disk.nbr] = drv;  
    disk.lun[disk.nbr] = lun;  
    DiskNum = disk.nbr++;
    path[0] = DiskNum + '0';
 8004c9c:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8004c9e:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8004ca0:	232f      	movs	r3, #47	; 0x2f
  {
    disk.is_initialized[disk.nbr] = 0;
    disk.drv[disk.nbr] = drv;  
    disk.lun[disk.nbr] = lun;  
    DiskNum = disk.nbr++;
    path[0] = DiskNum + '0';
 8004ca2:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
    path[2] = '/';
 8004ca4:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8004ca6:	70cc      	strb	r4, [r1, #3]
 8004ca8:	4620      	mov	r0, r4
 8004caa:	bd30      	pop	{r4, r5, pc}
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
 8004cac:	2001      	movs	r0, #1
    path[3] = 0;
    ret = 0;
  }
  
  return ret;
}
 8004cae:	bd30      	pop	{r4, r5, pc}
 8004cb0:	200001dc 	.word	0x200001dc

08004cb4 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f7ff bfdb 	b.w	8004c70 <FATFS_LinkDriverEx>
	...

08004cbc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8004cbc:	b507      	push	{r0, r1, r2, lr}
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t status = SD_PRESENT;
 8004cbe:	2001      	movs	r0, #1
 8004cc0:	f88d 0007 	strb.w	r0, [sp, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 8004cc4:	f89d 3007 	ldrb.w	r3, [sp, #7]
  */
uint8_t BSP_SD_Init(void)
{
  uint8_t sd_state = MSD_OK;
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8004cc8:	4283      	cmp	r3, r0
 8004cca:	d10b      	bne.n	8004ce4 <BSP_SD_Init+0x28>
  {
    return MSD_ERROR;
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8004ccc:	4807      	ldr	r0, [pc, #28]	; (8004cec <BSP_SD_Init+0x30>)
 8004cce:	f7fd fbc7 	bl	8002460 <HAL_SD_Init>
#ifdef BUS_4BITS
  /* Configure SD Bus width */
  if (sd_state == MSD_OK)
 8004cd2:	b938      	cbnz	r0, 8004ce4 <BSP_SD_Init+0x28>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8004cd4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004cd8:	4804      	ldr	r0, [pc, #16]	; (8004cec <BSP_SD_Init+0x30>)
 8004cda:	f7fd fbed 	bl	80024b8 <HAL_SD_ConfigWideBusOperation>
{
  uint8_t sd_state = MSD_OK;
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
  {
    return MSD_ERROR;
 8004cde:	3000      	adds	r0, #0
 8004ce0:	bf18      	it	ne
 8004ce2:	2001      	movne	r0, #1
      sd_state = MSD_ERROR;
    }
  }
#endif
  return sd_state;
}
 8004ce4:	b003      	add	sp, #12
 8004ce6:	f85d fb04 	ldr.w	pc, [sp], #4
 8004cea:	bf00      	nop
 8004cec:	20000264 	.word	0x20000264

08004cf0 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004cf0:	b507      	push	{r0, r1, r2, lr}
  uint8_t sd_state = MSD_OK;
  
  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8004cf2:	9300      	str	r3, [sp, #0]
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	460a      	mov	r2, r1
 8004cf8:	4601      	mov	r1, r0
 8004cfa:	4804      	ldr	r0, [pc, #16]	; (8004d0c <BSP_SD_ReadBlocks+0x1c>)
 8004cfc:	f7fd f83d 	bl	8001d7a <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;  
}
 8004d00:	3000      	adds	r0, #0
 8004d02:	bf18      	it	ne
 8004d04:	2001      	movne	r0, #1
 8004d06:	b003      	add	sp, #12
 8004d08:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d0c:	20000264 	.word	0x20000264

08004d10 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004d10:	b507      	push	{r0, r1, r2, lr}
  uint8_t sd_state = MSD_OK;
  
  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 8004d12:	9300      	str	r3, [sp, #0]
 8004d14:	4613      	mov	r3, r2
 8004d16:	460a      	mov	r2, r1
 8004d18:	4601      	mov	r1, r0
 8004d1a:	4804      	ldr	r0, [pc, #16]	; (8004d2c <BSP_SD_WriteBlocks+0x1c>)
 8004d1c:	f7fd f90d 	bl	8001f3a <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;  
}
 8004d20:	3000      	adds	r0, #0
 8004d22:	bf18      	it	ne
 8004d24:	2001      	movne	r0, #1
 8004d26:	b003      	add	sp, #12
 8004d28:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d2c:	20000264 	.word	0x20000264

08004d30 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8004d30:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8004d32:	4803      	ldr	r0, [pc, #12]	; (8004d40 <BSP_SD_GetCardState+0x10>)
 8004d34:	f7fd fc3b 	bl	80025ae <HAL_SD_GetCardState>
}
 8004d38:	3804      	subs	r0, #4
 8004d3a:	bf18      	it	ne
 8004d3c:	2001      	movne	r0, #1
 8004d3e:	bd08      	pop	{r3, pc}
 8004d40:	20000264 	.word	0x20000264

08004d44 <BSP_SD_GetCardInfo>:
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8004d44:	4601      	mov	r1, r0
 8004d46:	4801      	ldr	r0, [pc, #4]	; (8004d4c <BSP_SD_GetCardInfo+0x8>)
 8004d48:	f7fd bba4 	b.w	8002494 <HAL_SD_GetCardInfo>
 8004d4c:	20000264 	.word	0x20000264

08004d50 <MX_CAN2_Init>:

CAN_HandleTypeDef hcan2;

/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8004d50:	b508      	push	{r3, lr}

  hcan2.Instance = CAN2;
 8004d52:	480e      	ldr	r0, [pc, #56]	; (8004d8c <MX_CAN2_Init+0x3c>)
  hcan2.Init.Prescaler = 21;
 8004d54:	4b0e      	ldr	r3, [pc, #56]	; (8004d90 <MX_CAN2_Init+0x40>)
  hcan2.Init.Mode = CAN_MODE_NORMAL;
  hcan2.Init.SJW = CAN_SJW_1TQ;
  hcan2.Init.BS1 = CAN_BS1_13TQ;
 8004d56:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
/* CAN2 init function */
void MX_CAN2_Init(void)
{

  hcan2.Instance = CAN2;
  hcan2.Init.Prescaler = 21;
 8004d5a:	f04f 0e15 	mov.w	lr, #21
 8004d5e:	e880 4008 	stmia.w	r0, {r3, lr}
  hcan2.Init.Mode = CAN_MODE_NORMAL;
  hcan2.Init.SJW = CAN_SJW_1TQ;
  hcan2.Init.BS1 = CAN_BS1_13TQ;
 8004d62:	6102      	str	r2, [r0, #16]
void MX_CAN2_Init(void)
{

  hcan2.Instance = CAN2;
  hcan2.Init.Prescaler = 21;
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8004d64:	2300      	movs	r3, #0
  hcan2.Init.SJW = CAN_SJW_1TQ;
  hcan2.Init.BS1 = CAN_BS1_13TQ;
  hcan2.Init.BS2 = CAN_BS2_2TQ;
 8004d66:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
void MX_CAN2_Init(void)
{

  hcan2.Instance = CAN2;
  hcan2.Init.Prescaler = 21;
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8004d6a:	6083      	str	r3, [r0, #8]
  hcan2.Init.SJW = CAN_SJW_1TQ;
 8004d6c:	60c3      	str	r3, [r0, #12]
  hcan2.Init.BS1 = CAN_BS1_13TQ;
  hcan2.Init.BS2 = CAN_BS2_2TQ;
 8004d6e:	6142      	str	r2, [r0, #20]
  hcan2.Init.TTCM = DISABLE;
 8004d70:	6183      	str	r3, [r0, #24]
  hcan2.Init.ABOM = DISABLE;
 8004d72:	61c3      	str	r3, [r0, #28]
  hcan2.Init.AWUM = DISABLE;
 8004d74:	6203      	str	r3, [r0, #32]
  hcan2.Init.NART = DISABLE;
 8004d76:	6243      	str	r3, [r0, #36]	; 0x24
  hcan2.Init.RFLM = DISABLE;
 8004d78:	6283      	str	r3, [r0, #40]	; 0x28
  hcan2.Init.TXFP = DISABLE;
 8004d7a:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8004d7c:	f7fb fa70 	bl	8000260 <HAL_CAN_Init>
 8004d80:	b118      	cbz	r0, 8004d8a <MX_CAN2_Init+0x3a>
  {
    Error_Handler();
  }

}
 8004d82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  hcan2.Init.NART = DISABLE;
  hcan2.Init.RFLM = DISABLE;
  hcan2.Init.TXFP = DISABLE;
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
  {
    Error_Handler();
 8004d86:	f000 b9f5 	b.w	8005174 <Error_Handler>
 8004d8a:	bd08      	pop	{r3, pc}
 8004d8c:	200001f8 	.word	0x200001f8
 8004d90:	40006800 	.word	0x40006800

08004d94 <HAL_CAN_MspInit>:
  }

}

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8004d94:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(canHandle->Instance==CAN2)
 8004d96:	6802      	ldr	r2, [r0, #0]
 8004d98:	4b1d      	ldr	r3, [pc, #116]	; (8004e10 <HAL_CAN_MspInit+0x7c>)
 8004d9a:	429a      	cmp	r2, r3
  }

}

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8004d9c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct;
  if(canHandle->Instance==CAN2)
 8004d9e:	d135      	bne.n	8004e0c <HAL_CAN_MspInit+0x78>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8004da0:	2400      	movs	r4, #0
 8004da2:	f503 33e8 	add.w	r3, r3, #118784	; 0x1d000
 8004da6:	9401      	str	r4, [sp, #4]
 8004da8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004daa:	481a      	ldr	r0, [pc, #104]	; (8004e14 <HAL_CAN_MspInit+0x80>)
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8004dac:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004db0:	641a      	str	r2, [r3, #64]	; 0x40
 8004db2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004db4:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8004db8:	9201      	str	r2, [sp, #4]
 8004dba:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004dbc:	9402      	str	r4, [sp, #8]
 8004dbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dc0:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004dc4:	641a      	str	r2, [r3, #64]	; 0x40
 8004dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dcc:	9302      	str	r3, [sp, #8]
 8004dce:	9b02      	ldr	r3, [sp, #8]
  
    /**CAN2 GPIO Configuration    
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004dd0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004dd4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dd6:	2302      	movs	r3, #2
 8004dd8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dde:	2303      	movs	r3, #3
 8004de0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004de2:	a903      	add	r1, sp, #12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8004de4:	2309      	movs	r3, #9
 8004de6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004de8:	f7fb fcde 	bl	80007a8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8004dec:	4622      	mov	r2, r4
 8004dee:	4621      	mov	r1, r4
 8004df0:	2040      	movs	r0, #64	; 0x40
 8004df2:	f7fb fc5f 	bl	80006b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8004df6:	2040      	movs	r0, #64	; 0x40
 8004df8:	f7fb fc90 	bl	800071c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8004dfc:	2041      	movs	r0, #65	; 0x41
 8004dfe:	4622      	mov	r2, r4
 8004e00:	4621      	mov	r1, r4
 8004e02:	f7fb fc57 	bl	80006b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8004e06:	2041      	movs	r0, #65	; 0x41
 8004e08:	f7fb fc88 	bl	800071c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8004e0c:	b008      	add	sp, #32
 8004e0e:	bd10      	pop	{r4, pc}
 8004e10:	40006800 	.word	0x40006800
 8004e14:	40020400 	.word	0x40020400

08004e18 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8004e18:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SD_Path);
 8004e1a:	4903      	ldr	r1, [pc, #12]	; (8004e28 <MX_FATFS_Init+0x10>)
 8004e1c:	4803      	ldr	r0, [pc, #12]	; (8004e2c <MX_FATFS_Init+0x14>)
 8004e1e:	f7ff ff49 	bl	8004cb4 <FATFS_LinkDriver>
 8004e22:	4b03      	ldr	r3, [pc, #12]	; (8004e30 <MX_FATFS_Init+0x18>)
 8004e24:	7018      	strb	r0, [r3, #0]
 8004e26:	bd08      	pop	{r3, pc}
 8004e28:	2000023d 	.word	0x2000023d
 8004e2c:	08005e20 	.word	0x08005e20
 8004e30:	2000023c 	.word	0x2000023c

08004e34 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e38:	b08f      	sub	sp, #60	; 0x3c

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004e3a:	2400      	movs	r4, #0
 8004e3c:	4b70      	ldr	r3, [pc, #448]	; (8005000 <MX_GPIO_Init+0x1cc>)
 8004e3e:	9403      	str	r4, [sp, #12]
 8004e40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, NOT_USED_PE2_Pin|NOT_USED_PE3_Pin|NOT_USED_PE4_Pin|NOT_USED_PE5_Pin 
 8004e42:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 8005008 <MX_GPIO_Init+0x1d4>
                          |NOT_USED_PE6_Pin|NOT_USED_PE7_Pin|MTi_RST_Pin|NOT_USED_PE9_Pin 
                          |NOT_USED_PE10_Pin|NOT_USED_PE12_Pin|NOT_USED_PE14_Pin|NOT_USED_PE15_Pin 
                          |NOT_USED_PE0_Pin|TRANS_OE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NOT_USED_PC13_Pin|NOT_USED_PC0_Pin|NOT_USED_PC1_Pin|NOT_USED_PC2_Pin 
 8004e46:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 800500c <MX_GPIO_Init+0x1d8>
                          |NOT_USED_PC3_Pin|MTi_SYNC_IN_Pin|NOT_USED_PC6_Pin|NOT_USED_PC7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NOT_USED_PA2_Pin|NOT_USED_PA3_Pin|MTi_CS_Pin, GPIO_PIN_RESET);
 8004e4a:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 8005010 <MX_GPIO_Init+0x1dc>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NOT_USED_PB2_Pin|NOT_USED_PB10_Pin|NOT_USED_PB14_Pin|NOT_USED_PB15_Pin 
 8004e4e:	4f6d      	ldr	r7, [pc, #436]	; (8005004 <MX_GPIO_Init+0x1d0>)
                          |NOT_USED_PB4_Pin|NOT_USED_PB5_Pin|NOT_USED_PB6_Pin|NOT_USED_PB7_Pin 
                          |NOT_USED_PB8_Pin|GPS_RESET_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8004e50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005014 <MX_GPIO_Init+0x1e0>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004e54:	f042 0210 	orr.w	r2, r2, #16
 8004e58:	631a      	str	r2, [r3, #48]	; 0x30
 8004e5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e5c:	f002 0210 	and.w	r2, r2, #16
 8004e60:	9203      	str	r2, [sp, #12]
 8004e62:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e64:	9404      	str	r4, [sp, #16]
 8004e66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e68:	f042 0204 	orr.w	r2, r2, #4
 8004e6c:	631a      	str	r2, [r3, #48]	; 0x30
 8004e6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e70:	f002 0204 	and.w	r2, r2, #4
 8004e74:	9204      	str	r2, [sp, #16]
 8004e76:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004e78:	9405      	str	r4, [sp, #20]
 8004e7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e7c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e80:	631a      	str	r2, [r3, #48]	; 0x30
 8004e82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e84:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8004e88:	9205      	str	r2, [sp, #20]
 8004e8a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e8c:	9406      	str	r4, [sp, #24]
 8004e8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e90:	f042 0201 	orr.w	r2, r2, #1
 8004e94:	631a      	str	r2, [r3, #48]	; 0x30
 8004e96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e98:	f002 0201 	and.w	r2, r2, #1
 8004e9c:	9206      	str	r2, [sp, #24]
 8004e9e:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ea0:	9407      	str	r4, [sp, #28]
 8004ea2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ea4:	f042 0202 	orr.w	r2, r2, #2
 8004ea8:	631a      	str	r2, [r3, #48]	; 0x30
 8004eaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eac:	f002 0202 	and.w	r2, r2, #2
 8004eb0:	9207      	str	r2, [sp, #28]
 8004eb2:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004eb4:	9408      	str	r4, [sp, #32]
 8004eb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eb8:	f042 0208 	orr.w	r2, r2, #8
 8004ebc:	631a      	str	r2, [r3, #48]	; 0x30
 8004ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec0:	f003 0308 	and.w	r3, r3, #8
 8004ec4:	9308      	str	r3, [sp, #32]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, NOT_USED_PE2_Pin|NOT_USED_PE3_Pin|NOT_USED_PE4_Pin|NOT_USED_PE5_Pin 
 8004ec6:	4622      	mov	r2, r4
 8004ec8:	4650      	mov	r0, sl
 8004eca:	f24d 71ff 	movw	r1, #55295	; 0xd7ff
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ece:	9b08      	ldr	r3, [sp, #32]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, NOT_USED_PE2_Pin|NOT_USED_PE3_Pin|NOT_USED_PE4_Pin|NOT_USED_PE5_Pin 
 8004ed0:	f7fb fd4a 	bl	8000968 <HAL_GPIO_WritePin>
                          |NOT_USED_PE6_Pin|NOT_USED_PE7_Pin|MTi_RST_Pin|NOT_USED_PE9_Pin 
                          |NOT_USED_PE10_Pin|NOT_USED_PE12_Pin|NOT_USED_PE14_Pin|NOT_USED_PE15_Pin 
                          |NOT_USED_PE0_Pin|TRANS_OE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NOT_USED_PC13_Pin|NOT_USED_PC0_Pin|NOT_USED_PC1_Pin|NOT_USED_PC2_Pin 
 8004ed4:	4622      	mov	r2, r4
 8004ed6:	4648      	mov	r0, r9
 8004ed8:	f242 01ef 	movw	r1, #8431	; 0x20ef
 8004edc:	f7fb fd44 	bl	8000968 <HAL_GPIO_WritePin>
                          |NOT_USED_PC3_Pin|MTi_SYNC_IN_Pin|NOT_USED_PC6_Pin|NOT_USED_PC7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NOT_USED_PA2_Pin|NOT_USED_PA3_Pin|MTi_CS_Pin, GPIO_PIN_RESET);
 8004ee0:	4622      	mov	r2, r4
 8004ee2:	4658      	mov	r0, fp
 8004ee4:	211c      	movs	r1, #28
 8004ee6:	f7fb fd3f 	bl	8000968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NOT_USED_PB2_Pin|NOT_USED_PB10_Pin|NOT_USED_PB14_Pin|NOT_USED_PB15_Pin 
 8004eea:	4622      	mov	r2, r4
 8004eec:	4638      	mov	r0, r7
 8004eee:	f24c 71f4 	movw	r1, #51188	; 0xc7f4
 8004ef2:	f7fb fd39 	bl	8000968 <HAL_GPIO_WritePin>
                          |NOT_USED_PB4_Pin|NOT_USED_PB5_Pin|NOT_USED_PB6_Pin|NOT_USED_PB7_Pin 
                          |NOT_USED_PB8_Pin|GPS_RESET_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8004ef6:	4622      	mov	r2, r4
 8004ef8:	4640      	mov	r0, r8
 8004efa:	f64f 7113 	movw	r1, #65299	; 0xff13
 8004efe:	f7fb fd33 	bl	8000968 <HAL_GPIO_WritePin>
                           PEPin PEPin PEPin PEPin 
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = NOT_USED_PE2_Pin|NOT_USED_PE3_Pin|NOT_USED_PE4_Pin|NOT_USED_PE5_Pin 
                          |NOT_USED_PE6_Pin|NOT_USED_PE7_Pin|NOT_USED_PE9_Pin|NOT_USED_PE10_Pin 
                          |NOT_USED_PE12_Pin|NOT_USED_PE14_Pin|NOT_USED_PE15_Pin|NOT_USED_PE0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f02:	2501      	movs	r5, #1
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004f04:	2602      	movs	r6, #2
                          |NOT_USED_PD0_Pin|NOT_USED_PD1_Pin|GPS_INT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin 
                           PEPin PEPin PEPin PEPin 
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = NOT_USED_PE2_Pin|NOT_USED_PE3_Pin|NOT_USED_PE4_Pin|NOT_USED_PE5_Pin 
 8004f06:	f24d 63fd 	movw	r3, #55037	; 0xd6fd
                          |NOT_USED_PE6_Pin|NOT_USED_PE7_Pin|NOT_USED_PE9_Pin|NOT_USED_PE10_Pin 
                          |NOT_USED_PE12_Pin|NOT_USED_PE14_Pin|NOT_USED_PE15_Pin|NOT_USED_PE0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004f0a:	a909      	add	r1, sp, #36	; 0x24
 8004f0c:	4650      	mov	r0, sl
                          |NOT_USED_PD0_Pin|NOT_USED_PD1_Pin|GPS_INT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin 
                           PEPin PEPin PEPin PEPin 
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = NOT_USED_PE2_Pin|NOT_USED_PE3_Pin|NOT_USED_PE4_Pin|NOT_USED_PE5_Pin 
 8004f0e:	9309      	str	r3, [sp, #36]	; 0x24
                          |NOT_USED_PE6_Pin|NOT_USED_PE7_Pin|NOT_USED_PE9_Pin|NOT_USED_PE10_Pin 
                          |NOT_USED_PE12_Pin|NOT_USED_PE14_Pin|NOT_USED_PE15_Pin|NOT_USED_PE0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f10:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004f12:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f14:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004f16:	f7fb fc47 	bl	80007a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NOT_USED_PC13_Pin|NOT_USED_PC0_Pin|NOT_USED_PC1_Pin|NOT_USED_PC2_Pin 
 8004f1a:	f242 03cf 	movw	r3, #8399	; 0x20cf
                          |NOT_USED_PC3_Pin|NOT_USED_PC6_Pin|NOT_USED_PC7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f1e:	a909      	add	r1, sp, #36	; 0x24
 8004f20:	4648      	mov	r0, r9
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NOT_USED_PC13_Pin|NOT_USED_PC0_Pin|NOT_USED_PC1_Pin|NOT_USED_PC2_Pin 
 8004f22:	9309      	str	r3, [sp, #36]	; 0x24
                          |NOT_USED_PC3_Pin|NOT_USED_PC6_Pin|NOT_USED_PC7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f24:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004f26:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f28:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f2a:	f7fb fc3d 	bl	80007a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = NOT_USED_PA2_Pin|NOT_USED_PA3_Pin;
 8004f2e:	230c      	movs	r3, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f30:	a909      	add	r1, sp, #36	; 0x24
 8004f32:	4658      	mov	r0, fp
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = NOT_USED_PA2_Pin|NOT_USED_PA3_Pin;
 8004f34:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f36:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004f38:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f3a:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f3c:	f7fb fc34 	bl	80007a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MTi_CS_Pin;
 8004f40:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(MTi_CS_GPIO_Port, &GPIO_InitStruct);
 8004f42:	a909      	add	r1, sp, #36	; 0x24
 8004f44:	4658      	mov	r0, fp
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MTi_CS_Pin;
 8004f46:	9309      	str	r3, [sp, #36]	; 0x24
 8004f48:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f4a:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f4c:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f4e:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(MTi_CS_GPIO_Port, &GPIO_InitStruct);
 8004f50:	f7fb fc2a 	bl	80007a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MTi_DATA_READY_Pin;
 8004f54:	9b01      	ldr	r3, [sp, #4]
 8004f56:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MTi_DATA_READY_GPIO_Port, &GPIO_InitStruct);
 8004f58:	a909      	add	r1, sp, #36	; 0x24
 8004f5a:	4648      	mov	r0, r9
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(MTi_CS_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MTi_DATA_READY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f5c:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f5e:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(MTi_DATA_READY_GPIO_Port, &GPIO_InitStruct);
 8004f60:	f7fb fc22 	bl	80007a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MTi_SYNC_IN_Pin;
 8004f64:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(MTi_SYNC_IN_GPIO_Port, &GPIO_InitStruct);
 8004f66:	a909      	add	r1, sp, #36	; 0x24
 8004f68:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MTi_DATA_READY_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MTi_SYNC_IN_Pin;
 8004f6a:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f6c:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f6e:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f70:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(MTi_SYNC_IN_GPIO_Port, &GPIO_InitStruct);
 8004f72:	f7fb fc19 	bl	80007a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = NOT_USED_PB2_Pin|NOT_USED_PB10_Pin|NOT_USED_PB14_Pin|NOT_USED_PB15_Pin 
 8004f76:	f24c 53f4 	movw	r3, #50676	; 0xc5f4
                          |NOT_USED_PB4_Pin|NOT_USED_PB5_Pin|NOT_USED_PB6_Pin|NOT_USED_PB7_Pin 
                          |NOT_USED_PB8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f7a:	a909      	add	r1, sp, #36	; 0x24
 8004f7c:	4638      	mov	r0, r7
  HAL_GPIO_Init(MTi_SYNC_IN_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = NOT_USED_PB2_Pin|NOT_USED_PB10_Pin|NOT_USED_PB14_Pin|NOT_USED_PB15_Pin 
 8004f7e:	9309      	str	r3, [sp, #36]	; 0x24
                          |NOT_USED_PB4_Pin|NOT_USED_PB5_Pin|NOT_USED_PB6_Pin|NOT_USED_PB7_Pin 
                          |NOT_USED_PB8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f80:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004f82:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f84:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f86:	f7fb fc0f 	bl	80007a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = MTi_RST_Pin|TRANS_OE_Pin;
 8004f8a:	f44f 7381 	mov.w	r3, #258	; 0x102
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004f8e:	a909      	add	r1, sp, #36	; 0x24
 8004f90:	4650      	mov	r0, sl
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = MTi_RST_Pin|TRANS_OE_Pin;
 8004f92:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f94:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f96:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f98:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004f9a:	f7fb fc05 	bl	80007a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAN_STANBY_Pin;
 8004f9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(CAN_STANBY_GPIO_Port, &GPIO_InitStruct);
 8004fa2:	a909      	add	r1, sp, #36	; 0x24
 8004fa4:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAN_STANBY_Pin;
 8004fa6:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004fa8:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004faa:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(CAN_STANBY_GPIO_Port, &GPIO_InitStruct);
 8004fac:	f7fb fbfc 	bl	80007a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11 
                           PDPin PDPin PDPin PDPin 
                           PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8004fb0:	f64f 7310 	movw	r3, #65296	; 0xff10
                          |LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin 
                          |GPS_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004fb4:	a909      	add	r1, sp, #36	; 0x24
 8004fb6:	4640      	mov	r0, r8
  HAL_GPIO_Init(CAN_STANBY_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PD8 PD9 PD10 PD11 
                           PDPin PDPin PDPin PDPin 
                           PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8004fb8:	9309      	str	r3, [sp, #36]	; 0x24
                          |LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin 
                          |GPS_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fba:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fbc:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fbe:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004fc0:	f7fb fbf2 	bl	80007a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = NOT_USED_PD0_Pin|NOT_USED_PD1_Pin;
 8004fc4:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004fc6:	a909      	add	r1, sp, #36	; 0x24
 8004fc8:	4640      	mov	r0, r8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = NOT_USED_PD0_Pin|NOT_USED_PD1_Pin;
 8004fca:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fcc:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004fce:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fd0:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004fd2:	f7fb fbe9 	bl	80007a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin|GPS_PULSE_Pin;
 8004fd6:	2388      	movs	r3, #136	; 0x88
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004fd8:	a909      	add	r1, sp, #36	; 0x24
 8004fda:	4640      	mov	r0, r8
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin|GPS_PULSE_Pin;
 8004fdc:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004fde:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fe0:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004fe2:	f7fb fbe1 	bl	80007a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPS_RESET_Pin;
 8004fe6:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPS_RESET_GPIO_Port, &GPIO_InitStruct);
 8004fea:	a909      	add	r1, sp, #36	; 0x24
 8004fec:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPS_RESET_Pin;
 8004fee:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ff0:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ff2:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ff4:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPS_RESET_GPIO_Port, &GPIO_InitStruct);
 8004ff6:	f7fb fbd7 	bl	80007a8 <HAL_GPIO_Init>

}
 8004ffa:	b00f      	add	sp, #60	; 0x3c
 8004ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005000:	40023800 	.word	0x40023800
 8005004:	40020400 	.word	0x40020400
 8005008:	40021000 	.word	0x40021000
 800500c:	40020800 	.word	0x40020800
 8005010:	40020000 	.word	0x40020000
 8005014:	40020c00 	.word	0x40020c00

08005018 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8005018:	b530      	push	{r4, r5, lr}
 800501a:	b099      	sub	sp, #100	; 0x64
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 800501c:	4b2e      	ldr	r3, [pc, #184]	; (80050d8 <SystemClock_Config+0xc0>)
 800501e:	2100      	movs	r1, #0
 8005020:	9101      	str	r1, [sp, #4]
 8005022:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005024:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005028:	641a      	str	r2, [r3, #64]	; 0x40
 800502a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005030:	9301      	str	r3, [sp, #4]
 8005032:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005034:	4b29      	ldr	r3, [pc, #164]	; (80050dc <SystemClock_Config+0xc4>)
 8005036:	9102      	str	r1, [sp, #8]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800503e:	601a      	str	r2, [r3, #0]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005046:	9302      	str	r3, [sp, #8]
 8005048:	9b02      	ldr	r3, [sp, #8]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800504a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800504e:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8005050:	2301      	movs	r3, #1
 8005052:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005054:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005058:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800505a:	2319      	movs	r3, #25
 800505c:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 800505e:	f44f 73a8 	mov.w	r3, #336	; 0x150
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005062:	2402      	movs	r4, #2

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_HSE;
 8005064:	2505      	movs	r5, #5
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 336;
 8005066:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005068:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800506a:	2307      	movs	r3, #7

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_HSE;
 800506c:	950c      	str	r5, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800506e:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005070:	9416      	str	r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8005072:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005074:	f7fc f8ca 	bl	800120c <HAL_RCC_OscConfig>
 8005078:	b100      	cbz	r0, 800507c <SystemClock_Config+0x64>
 800507a:	e7fe      	b.n	800507a <SystemClock_Config+0x62>
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800507c:	230f      	movs	r3, #15
 800507e:	9307      	str	r3, [sp, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005080:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005084:	9009      	str	r0, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005086:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005088:	4629      	mov	r1, r5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800508a:	f44f 5380 	mov.w	r3, #4096	; 0x1000

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800508e:	a807      	add	r0, sp, #28

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005090:	9408      	str	r4, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005092:	930b      	str	r3, [sp, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005094:	f7fc fa86 	bl	80015a4 <HAL_RCC_ClockConfig>
 8005098:	b100      	cbz	r0, 800509c <SystemClock_Config+0x84>
 800509a:	e7fe      	b.n	800509a <SystemClock_Config+0x82>
  {
    Error_Handler();
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800509c:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80050a0:	a803      	add	r0, sp, #12
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80050a2:	9403      	str	r4, [sp, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80050a4:	9306      	str	r3, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80050a6:	f7fc fb67 	bl	8001778 <HAL_RCCEx_PeriphCLKConfig>
 80050aa:	4604      	mov	r4, r0
 80050ac:	b100      	cbz	r0, 80050b0 <SystemClock_Config+0x98>
 80050ae:	e7fe      	b.n	80050ae <SystemClock_Config+0x96>
    Error_Handler();
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80050b0:	f7fc fb2c 	bl	800170c <HAL_RCC_GetHCLKFreq>
 80050b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80050b8:	fbb0 f0f3 	udiv	r0, r0, r3
 80050bc:	f7fb fb3a 	bl	8000734 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80050c0:	2004      	movs	r0, #4
 80050c2:	f7fb fb4d 	bl	8000760 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80050c6:	4622      	mov	r2, r4
 80050c8:	4621      	mov	r1, r4
 80050ca:	f04f 30ff 	mov.w	r0, #4294967295
 80050ce:	f7fb faf1 	bl	80006b4 <HAL_NVIC_SetPriority>
}
 80050d2:	b019      	add	sp, #100	; 0x64
 80050d4:	bd30      	pop	{r4, r5, pc}
 80050d6:	bf00      	nop
 80050d8:	40023800 	.word	0x40023800
 80050dc:	40007000 	.word	0x40007000

080050e0 <main>:
  MX_FATFS_Init();
  MX_USB_DEVICE_Init();

  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80050e0:	4c21      	ldr	r4, [pc, #132]	; (8005168 <main+0x88>)
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 80050e2:	b508      	push	{r3, lr}
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80050e4:	f7fb f884 	bl	80001f0 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80050e8:	f7ff ff96 	bl	8005018 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80050ec:	f7ff fea2 	bl	8004e34 <MX_GPIO_Init>
  MX_CAN2_Init();
 80050f0:	f7ff fe2e 	bl	8004d50 <MX_CAN2_Init>
  MX_RTC_Init();
 80050f4:	f000 f840 	bl	8005178 <MX_RTC_Init>
  MX_SDIO_SD_Init();
 80050f8:	f000 f8ae 	bl	8005258 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 80050fc:	f000 f8f8 	bl	80052f0 <MX_SPI1_Init>
  MX_TIM1_Init();
 8005100:	f000 fa94 	bl	800562c <MX_TIM1_Init>
  MX_TIM2_Init();
 8005104:	f000 f9b6 	bl	8005474 <MX_TIM2_Init>
  MX_TIM5_Init();
 8005108:	f000 f9dc 	bl	80054c4 <MX_TIM5_Init>
  MX_USART1_Init();
 800510c:	f000 faee 	bl	80056ec <MX_USART1_Init>
  MX_USART2_UART_Init();
 8005110:	f000 fb08 	bl	8005724 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8005114:	f7ff fe80 	bl	8004e18 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8005118:	f000 fb70 	bl	80057fc <MX_USB_DEVICE_Init>

  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800511c:	2104      	movs	r1, #4
 800511e:	4620      	mov	r0, r4
 8005120:	f7fd fe82 	bl	8002e28 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8005124:	2108      	movs	r1, #8
 8005126:	4620      	mov	r0, r4
 8005128:	f7fd fe7e 	bl	8002e28 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800512c:	2104      	movs	r1, #4
 800512e:	4620      	mov	r0, r4
 8005130:	f7fd fea1 	bl	8002e76 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8005134:	2108      	movs	r1, #8
 8005136:	4620      	mov	r0, r4
 8005138:	f7fd fe9d 	bl	8002e76 <HAL_TIMEx_PWMN_Start>

  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 4200);
 800513c:	6823      	ldr	r3, [r4, #0]
 800513e:	f241 0268 	movw	r2, #4200	; 0x1068
 8005142:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 4200);
 8005144:	63da      	str	r2, [r3, #60]	; 0x3c
  {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */

	  HAL_GPIO_TogglePin(GPIOD, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin);
 8005146:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800514a:	4808      	ldr	r0, [pc, #32]	; (800516c <main+0x8c>)
 800514c:	f7fb fc10 	bl	8000970 <HAL_GPIO_TogglePin>
	  HAL_GPIO_WritePin(GPS_RESET_GPIO_Port, GPS_RESET_Pin, GPIO_PIN_SET);
 8005150:	2201      	movs	r2, #1
 8005152:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005156:	4806      	ldr	r0, [pc, #24]	; (8005170 <main+0x90>)
 8005158:	f7fb fc06 	bl	8000968 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 800515c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005160:	f7fb f86e 	bl	8000240 <HAL_Delay>
 8005164:	e7ef      	b.n	8005146 <main+0x66>
 8005166:	bf00      	nop
 8005168:	2000037c 	.word	0x2000037c
 800516c:	40020c00 	.word	0x40020c00
 8005170:	40020400 	.word	0x40020400

08005174 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8005174:	e7fe      	b.n	8005174 <Error_Handler>
	...

08005178 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8005178:	b500      	push	{lr}
  RTC_DateTypeDef sDate;
  RTC_AlarmTypeDef sAlarm;

    /**Initialize RTC Only 
    */
  hrtc.Instance = RTC;
 800517a:	482f      	ldr	r0, [pc, #188]	; (8005238 <MX_RTC_Init+0xc0>)
 800517c:	4b2f      	ldr	r3, [pc, #188]	; (800523c <MX_RTC_Init+0xc4>)
 800517e:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
 8005180:	227f      	movs	r2, #127	; 0x7f
  RTC_AlarmTypeDef sAlarm;

    /**Initialize RTC Only 
    */
  hrtc.Instance = RTC;
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8005182:	2300      	movs	r3, #0

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8005184:	b091      	sub	sp, #68	; 0x44

    /**Initialize RTC Only 
    */
  hrtc.Instance = RTC;
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
 8005186:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8005188:	22ff      	movs	r2, #255	; 0xff
  RTC_AlarmTypeDef sAlarm;

    /**Initialize RTC Only 
    */
  hrtc.Instance = RTC;
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800518a:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
  hrtc.Init.SynchPrediv = 255;
 800518c:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800518e:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8005190:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8005192:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8005194:	f7fc fbca 	bl	800192c <HAL_RTC_Init>
 8005198:	b108      	cbz	r0, 800519e <MX_RTC_Init+0x26>
  {
    Error_Handler();
 800519a:	f7ff ffeb 	bl	8005174 <Error_Handler>
  }

    /**Initialize RTC and set the Time and Date 
    */
  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != 0x32F2){
 800519e:	2100      	movs	r1, #0
 80051a0:	4825      	ldr	r0, [pc, #148]	; (8005238 <MX_RTC_Init+0xc0>)
 80051a2:	f7fc fd82 	bl	8001caa <HAL_RTCEx_BKUPRead>
 80051a6:	f243 23f2 	movw	r3, #13042	; 0x32f2
 80051aa:	4298      	cmp	r0, r3
 80051ac:	d027      	beq.n	80051fe <MX_RTC_Init+0x86>
  sTime.Hours = 0x0;
 80051ae:	2300      	movs	r3, #0
  sTime.Minutes = 0x0;
  sTime.Seconds = 0x0;
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80051b0:	2201      	movs	r2, #1
 80051b2:	a901      	add	r1, sp, #4
 80051b4:	4820      	ldr	r0, [pc, #128]	; (8005238 <MX_RTC_Init+0xc0>)
  }

    /**Initialize RTC and set the Time and Date 
    */
  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != 0x32F2){
  sTime.Hours = 0x0;
 80051b6:	f88d 3004 	strb.w	r3, [sp, #4]
  sTime.Minutes = 0x0;
 80051ba:	f88d 3005 	strb.w	r3, [sp, #5]
  sTime.Seconds = 0x0;
 80051be:	f88d 3006 	strb.w	r3, [sp, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80051c2:	9304      	str	r3, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80051c4:	9305      	str	r3, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80051c6:	f7fc fc00 	bl	80019ca <HAL_RTC_SetTime>
 80051ca:	b108      	cbz	r0, 80051d0 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80051cc:	f7ff ffd2 	bl	8005174 <Error_Handler>
  }

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80051d0:	2201      	movs	r2, #1
  sDate.Month = RTC_MONTH_JANUARY;
  sDate.Date = 0x1;
  sDate.Year = 0x0;
 80051d2:	2300      	movs	r3, #0

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80051d4:	4669      	mov	r1, sp
 80051d6:	4818      	ldr	r0, [pc, #96]	; (8005238 <MX_RTC_Init+0xc0>)
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
  {
    Error_Handler();
  }

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80051d8:	f88d 2000 	strb.w	r2, [sp]
  sDate.Month = RTC_MONTH_JANUARY;
 80051dc:	f88d 2001 	strb.w	r2, [sp, #1]
  sDate.Date = 0x1;
 80051e0:	f88d 2002 	strb.w	r2, [sp, #2]
  sDate.Year = 0x0;
 80051e4:	f88d 3003 	strb.w	r3, [sp, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80051e8:	f7fc fc5e 	bl	8001aa8 <HAL_RTC_SetDate>
 80051ec:	b108      	cbz	r0, 80051f2 <MX_RTC_Init+0x7a>
  {
    Error_Handler();
 80051ee:	f7ff ffc1 	bl	8005174 <Error_Handler>
  }

    HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR0,0x32F2);
 80051f2:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80051f6:	2100      	movs	r1, #0
 80051f8:	480f      	ldr	r0, [pc, #60]	; (8005238 <MX_RTC_Init+0xc0>)
 80051fa:	f7fc fd51 	bl	8001ca0 <HAL_RTCEx_BKUPWrite>
  }
    /**Enable the Alarm A 
    */
  sAlarm.AlarmTime.Hours = 0x0;
 80051fe:	2300      	movs	r3, #0
 8005200:	f88d 3018 	strb.w	r3, [sp, #24]
  sAlarm.AlarmTime.Minutes = 0x0;
 8005204:	f88d 3019 	strb.w	r3, [sp, #25]
  sAlarm.AlarmTime.Seconds = 0x0;
 8005208:	f88d 301a 	strb.w	r3, [sp, #26]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800520c:	9307      	str	r3, [sp, #28]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800520e:	9309      	str	r3, [sp, #36]	; 0x24
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8005210:	930a      	str	r3, [sp, #40]	; 0x28
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8005212:	930b      	str	r3, [sp, #44]	; 0x2c
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8005214:	930c      	str	r3, [sp, #48]	; 0x30
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8005216:	930d      	str	r3, [sp, #52]	; 0x34
  sAlarm.AlarmDateWeekDay = 0x1;
 8005218:	2201      	movs	r2, #1
  sAlarm.Alarm = RTC_ALARM_A;
 800521a:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800521e:	a906      	add	r1, sp, #24
 8005220:	4805      	ldr	r0, [pc, #20]	; (8005238 <MX_RTC_Init+0xc0>)
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
  sAlarm.AlarmDateWeekDay = 0x1;
 8005222:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
  sAlarm.Alarm = RTC_ALARM_A;
 8005226:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8005228:	f7fc fc9f 	bl	8001b6a <HAL_RTC_SetAlarm>
 800522c:	b108      	cbz	r0, 8005232 <MX_RTC_Init+0xba>
  {
    Error_Handler();
 800522e:	f7ff ffa1 	bl	8005174 <Error_Handler>
  }

}
 8005232:	b011      	add	sp, #68	; 0x44
 8005234:	f85d fb04 	ldr.w	pc, [sp], #4
 8005238:	20000244 	.word	0x20000244
 800523c:	40002800 	.word	0x40002800

08005240 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 8005240:	6802      	ldr	r2, [r0, #0]
 8005242:	4b03      	ldr	r3, [pc, #12]	; (8005250 <HAL_RTC_MspInit+0x10>)
 8005244:	429a      	cmp	r2, r3
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005246:	bf02      	ittt	eq
 8005248:	4b02      	ldreq	r3, [pc, #8]	; (8005254 <HAL_RTC_MspInit+0x14>)
 800524a:	2201      	moveq	r2, #1
 800524c:	601a      	streq	r2, [r3, #0]
 800524e:	4770      	bx	lr
 8005250:	40002800 	.word	0x40002800
 8005254:	42470e3c 	.word	0x42470e3c

08005258 <MX_SDIO_SD_Init>:
/* SDIO init function */

void MX_SDIO_SD_Init(void)
{

  hsd.Instance = SDIO;
 8005258:	4b05      	ldr	r3, [pc, #20]	; (8005270 <MX_SDIO_SD_Init+0x18>)
 800525a:	4a06      	ldr	r2, [pc, #24]	; (8005274 <MX_SDIO_SD_Init+0x1c>)
 800525c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800525e:	2200      	movs	r2, #0
 8005260:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8005262:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005264:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8005266:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005268:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800526a:	619a      	str	r2, [r3, #24]
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	20000264 	.word	0x20000264
 8005274:	40012c00 	.word	0x40012c00

08005278 <HAL_SD_MspInit>:

}

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8005278:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(sdHandle->Instance==SDIO)
 800527a:	6802      	ldr	r2, [r0, #0]
 800527c:	4b19      	ldr	r3, [pc, #100]	; (80052e4 <HAL_SD_MspInit+0x6c>)
 800527e:	429a      	cmp	r2, r3
  hsd.Init.ClockDiv = 0;

}

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8005280:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct;
  if(sdHandle->Instance==SDIO)
 8005282:	d12d      	bne.n	80052e0 <HAL_SD_MspInit+0x68>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8005284:	2400      	movs	r4, #0
 8005286:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 800528a:	9400      	str	r4, [sp, #0]
 800528c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800528e:	4816      	ldr	r0, [pc, #88]	; (80052e8 <HAL_SD_MspInit+0x70>)
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8005290:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005294:	645a      	str	r2, [r3, #68]	; 0x44
 8005296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005298:	9403      	str	r4, [sp, #12]
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800529a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800529e:	9300      	str	r3, [sp, #0]
 80052a0:	9b00      	ldr	r3, [sp, #0]
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052a2:	2702      	movs	r7, #2
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80052a4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052a8:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80052aa:	250c      	movs	r5, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80052ac:	a901      	add	r1, sp, #4
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80052ae:	9301      	str	r3, [sp, #4]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052b0:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052b2:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80052b4:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80052b6:	f7fb fa77 	bl	80007a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80052ba:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80052bc:	eb0d 0103 	add.w	r1, sp, r3
 80052c0:	480a      	ldr	r0, [pc, #40]	; (80052ec <HAL_SD_MspInit+0x74>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80052c2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052c4:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052c6:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052c8:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80052ca:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80052cc:	f7fb fa6c 	bl	80007a8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80052d0:	2031      	movs	r0, #49	; 0x31
 80052d2:	4622      	mov	r2, r4
 80052d4:	4621      	mov	r1, r4
 80052d6:	f7fb f9ed 	bl	80006b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80052da:	2031      	movs	r0, #49	; 0x31
 80052dc:	f7fb fa1e 	bl	800071c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 80052e0:	b007      	add	sp, #28
 80052e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052e4:	40012c00 	.word	0x40012c00
 80052e8:	40020800 	.word	0x40020800
 80052ec:	40020c00 	.word	0x40020c00

080052f0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80052f0:	b508      	push	{r3, lr}

  hspi1.Instance = SPI1;
 80052f2:	480e      	ldr	r0, [pc, #56]	; (800532c <MX_SPI1_Init+0x3c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80052f4:	4b0e      	ldr	r3, [pc, #56]	; (8005330 <MX_SPI1_Init+0x40>)
 80052f6:	f44f 7e82 	mov.w	lr, #260	; 0x104
 80052fa:	e880 4008 	stmia.w	r0, {r3, lr}
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80052fe:	2300      	movs	r3, #0
 8005300:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005302:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005304:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005306:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005308:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800530c:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800530e:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005310:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005312:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8005314:	230a      	movs	r3, #10
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005316:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
 8005318:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800531a:	f7fd fa83 	bl	8002824 <HAL_SPI_Init>
 800531e:	b118      	cbz	r0, 8005328 <MX_SPI1_Init+0x38>
  {
    Error_Handler();
  }

}
 8005320:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
 8005324:	f7ff bf26 	b.w	8005174 <Error_Handler>
 8005328:	bd08      	pop	{r3, pc}
 800532a:	bf00      	nop
 800532c:	200002e8 	.word	0x200002e8
 8005330:	40013000 	.word	0x40013000

08005334 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005334:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI1)
 8005336:	6802      	ldr	r2, [r0, #0]
 8005338:	4b0f      	ldr	r3, [pc, #60]	; (8005378 <HAL_SPI_MspInit+0x44>)
 800533a:	429a      	cmp	r2, r3
 800533c:	d119      	bne.n	8005372 <HAL_SPI_MspInit+0x3e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800533e:	2100      	movs	r1, #0
 8005340:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8005344:	9100      	str	r1, [sp, #0]
 8005346:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = MTi_SCK_Pin|MTi_MISO_Pin|MTi_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005348:	480c      	ldr	r0, [pc, #48]	; (800537c <HAL_SPI_MspInit+0x48>)
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800534a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800534e:	645a      	str	r2, [r3, #68]	; 0x44
 8005350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = MTi_SCK_Pin|MTi_MISO_Pin|MTi_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005352:	9103      	str	r1, [sp, #12]
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005354:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005358:	9300      	str	r3, [sp, #0]
 800535a:	9b00      	ldr	r3, [sp, #0]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = MTi_SCK_Pin|MTi_MISO_Pin|MTi_MOSI_Pin;
 800535c:	23e0      	movs	r3, #224	; 0xe0
 800535e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005360:	2302      	movs	r3, #2
 8005362:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005364:	2303      	movs	r3, #3
 8005366:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005368:	a901      	add	r1, sp, #4
    */
    GPIO_InitStruct.Pin = MTi_SCK_Pin|MTi_MISO_Pin|MTi_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800536a:	2305      	movs	r3, #5
 800536c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800536e:	f7fb fa1b 	bl	80007a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8005372:	b007      	add	sp, #28
 8005374:	f85d fb04 	ldr.w	pc, [sp], #4
 8005378:	40013000 	.word	0x40013000
 800537c:	40020000 	.word	0x40020000

08005380 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005380:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005382:	2003      	movs	r0, #3
 8005384:	f7fb f984 	bl	8000690 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8005388:	2200      	movs	r2, #0
 800538a:	4611      	mov	r1, r2
 800538c:	f06f 000b 	mvn.w	r0, #11
 8005390:	f7fb f990 	bl	80006b4 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8005394:	2200      	movs	r2, #0
 8005396:	4611      	mov	r1, r2
 8005398:	f06f 000a 	mvn.w	r0, #10
 800539c:	f7fb f98a 	bl	80006b4 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80053a0:	2200      	movs	r2, #0
 80053a2:	4611      	mov	r1, r2
 80053a4:	f06f 0009 	mvn.w	r0, #9
 80053a8:	f7fb f984 	bl	80006b4 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80053ac:	2200      	movs	r2, #0
 80053ae:	4611      	mov	r1, r2
 80053b0:	f06f 0004 	mvn.w	r0, #4
 80053b4:	f7fb f97e 	bl	80006b4 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80053b8:	2200      	movs	r2, #0
 80053ba:	4611      	mov	r1, r2
 80053bc:	f06f 0003 	mvn.w	r0, #3
 80053c0:	f7fb f978 	bl	80006b4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80053c4:	2200      	movs	r2, #0
 80053c6:	4611      	mov	r1, r2
 80053c8:	f06f 0001 	mvn.w	r0, #1
 80053cc:	f7fb f972 	bl	80006b4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80053d0:	2200      	movs	r2, #0
 80053d2:	4611      	mov	r1, r2
 80053d4:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80053d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80053dc:	f7fb b96a 	b.w	80006b4 <HAL_NVIC_SetPriority>

080053e0 <NMI_Handler>:
 80053e0:	4770      	bx	lr

080053e2 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80053e2:	e7fe      	b.n	80053e2 <HardFault_Handler>

080053e4 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80053e4:	e7fe      	b.n	80053e4 <MemManage_Handler>

080053e6 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80053e6:	e7fe      	b.n	80053e6 <BusFault_Handler>

080053e8 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80053e8:	e7fe      	b.n	80053e8 <UsageFault_Handler>

080053ea <SVC_Handler>:
 80053ea:	4770      	bx	lr

080053ec <DebugMon_Handler>:
 80053ec:	4770      	bx	lr

080053ee <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80053ee:	4770      	bx	lr

080053f0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80053f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80053f2:	f7fa ff17 	bl	8000224 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80053f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 80053fa:	f7fb b9be 	b.w	800077a <HAL_SYSTICK_IRQHandler>
	...

08005400 <SDIO_IRQHandler>:
void SDIO_IRQHandler(void)
{
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8005400:	4801      	ldr	r0, [pc, #4]	; (8005408 <SDIO_IRQHandler+0x8>)
 8005402:	f7fd b92d 	b.w	8002660 <HAL_SD_IRQHandler>
 8005406:	bf00      	nop
 8005408:	20000264 	.word	0x20000264

0800540c <CAN2_RX1_IRQHandler>:
void CAN2_RX1_IRQHandler(void)
{
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800540c:	4801      	ldr	r0, [pc, #4]	; (8005414 <CAN2_RX1_IRQHandler+0x8>)
 800540e:	f7fb b84f 	b.w	80004b0 <HAL_CAN_IRQHandler>
 8005412:	bf00      	nop
 8005414:	200001f8 	.word	0x200001f8

08005418 <CAN2_RX0_IRQHandler>:
 8005418:	f7ff bff8 	b.w	800540c <CAN2_RX1_IRQHandler>

0800541c <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800541c:	4801      	ldr	r0, [pc, #4]	; (8005424 <OTG_FS_IRQHandler+0x8>)
 800541e:	f7fb bb2d 	b.w	8000a7c <HAL_PCD_IRQHandler>
 8005422:	bf00      	nop
 8005424:	200006a4 	.word	0x200006a4

08005428 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005428:	490f      	ldr	r1, [pc, #60]	; (8005468 <SystemInit+0x40>)
 800542a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800542e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005436:	4b0d      	ldr	r3, [pc, #52]	; (800546c <SystemInit+0x44>)
 8005438:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800543a:	2000      	movs	r0, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800543c:	f042 0201 	orr.w	r2, r2, #1
 8005440:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005442:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800544a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800544e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005450:	4a07      	ldr	r2, [pc, #28]	; (8005470 <SystemInit+0x48>)
 8005452:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800545a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800545c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800545e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005462:	608b      	str	r3, [r1, #8]
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	e000ed00 	.word	0xe000ed00
 800546c:	40023800 	.word	0x40023800
 8005470:	24003010 	.word	0x24003010

08005474 <MX_TIM2_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005474:	b510      	push	{r4, lr}
  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
 8005476:	4812      	ldr	r0, [pc, #72]	; (80054c0 <MX_TIM2_Init+0x4c>)
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005478:	b08c      	sub	sp, #48	; 0x30
  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 0;
 800547a:	2400      	movs	r4, #0
 800547c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005480:	e880 0018 	stmia.w	r0, {r3, r4}
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8005484:	a903      	add	r1, sp, #12
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 0;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8005486:	2301      	movs	r3, #1
  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005488:	6084      	str	r4, [r0, #8]
  htim2.Init.Period = 0;
 800548a:	60c4      	str	r4, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800548c:	6104      	str	r4, [r0, #16]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800548e:	9303      	str	r3, [sp, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005490:	9404      	str	r4, [sp, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005492:	9305      	str	r3, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005494:	9406      	str	r4, [sp, #24]
  sConfig.IC1Filter = 0;
 8005496:	9407      	str	r4, [sp, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005498:	9408      	str	r4, [sp, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800549a:	9309      	str	r3, [sp, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800549c:	940a      	str	r4, [sp, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800549e:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80054a0:	f7fd fbd6 	bl	8002c50 <HAL_TIM_Encoder_Init>
 80054a4:	b108      	cbz	r0, 80054aa <MX_TIM2_Init+0x36>
  {
    Error_Handler();
 80054a6:	f7ff fe65 	bl	8005174 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80054aa:	a901      	add	r1, sp, #4
 80054ac:	4804      	ldr	r0, [pc, #16]	; (80054c0 <MX_TIM2_Init+0x4c>)
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80054ae:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80054b0:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80054b2:	f7fd fcf1 	bl	8002e98 <HAL_TIMEx_MasterConfigSynchronization>
 80054b6:	b108      	cbz	r0, 80054bc <MX_TIM2_Init+0x48>
  {
    Error_Handler();
 80054b8:	f7ff fe5c 	bl	8005174 <Error_Handler>
  }

}
 80054bc:	b00c      	add	sp, #48	; 0x30
 80054be:	bd10      	pop	{r4, pc}
 80054c0:	200003b8 	.word	0x200003b8

080054c4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80054c4:	b510      	push	{r4, lr}
  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim5.Instance = TIM5;
 80054c6:	4812      	ldr	r0, [pc, #72]	; (8005510 <MX_TIM5_Init+0x4c>)
  htim5.Init.Prescaler = 0;
 80054c8:	4b12      	ldr	r3, [pc, #72]	; (8005514 <MX_TIM5_Init+0x50>)
  }

}
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80054ca:	b08c      	sub	sp, #48	; 0x30
  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim5.Instance = TIM5;
  htim5.Init.Prescaler = 0;
 80054cc:	2400      	movs	r4, #0
 80054ce:	e880 0018 	stmia.w	r0, {r3, r4}
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80054d2:	a903      	add	r1, sp, #12
  htim5.Instance = TIM5;
  htim5.Init.Prescaler = 0;
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim5.Init.Period = 0;
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80054d4:	2301      	movs	r3, #1
  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim5.Instance = TIM5;
  htim5.Init.Prescaler = 0;
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054d6:	6084      	str	r4, [r0, #8]
  htim5.Init.Period = 0;
 80054d8:	60c4      	str	r4, [r0, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80054da:	6104      	str	r4, [r0, #16]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80054dc:	9303      	str	r3, [sp, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80054de:	9404      	str	r4, [sp, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80054e0:	9305      	str	r3, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80054e2:	9406      	str	r4, [sp, #24]
  sConfig.IC1Filter = 0;
 80054e4:	9407      	str	r4, [sp, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80054e6:	9408      	str	r4, [sp, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80054e8:	9309      	str	r3, [sp, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80054ea:	940a      	str	r4, [sp, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80054ec:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80054ee:	f7fd fbaf 	bl	8002c50 <HAL_TIM_Encoder_Init>
 80054f2:	b108      	cbz	r0, 80054f8 <MX_TIM5_Init+0x34>
  {
    Error_Handler();
 80054f4:	f7ff fe3e 	bl	8005174 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80054f8:	a901      	add	r1, sp, #4
 80054fa:	4805      	ldr	r0, [pc, #20]	; (8005510 <MX_TIM5_Init+0x4c>)
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80054fc:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80054fe:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005500:	f7fd fcca 	bl	8002e98 <HAL_TIMEx_MasterConfigSynchronization>
 8005504:	b108      	cbz	r0, 800550a <MX_TIM5_Init+0x46>
  {
    Error_Handler();
 8005506:	f7ff fe35 	bl	8005174 <Error_Handler>
  }

}
 800550a:	b00c      	add	sp, #48	; 0x30
 800550c:	bd10      	pop	{r4, pc}
 800550e:	bf00      	nop
 8005510:	20000340 	.word	0x20000340
 8005514:	40000c00 	.word	0x40000c00

08005518 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 8005518:	6802      	ldr	r2, [r0, #0]
 800551a:	4b09      	ldr	r3, [pc, #36]	; (8005540 <HAL_TIM_Base_MspInit+0x28>)
 800551c:	429a      	cmp	r2, r3
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800551e:	b082      	sub	sp, #8

  if(tim_baseHandle->Instance==TIM1)
 8005520:	d10b      	bne.n	800553a <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005522:	2300      	movs	r3, #0
 8005524:	9301      	str	r3, [sp, #4]
 8005526:	4b07      	ldr	r3, [pc, #28]	; (8005544 <HAL_TIM_Base_MspInit+0x2c>)
 8005528:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800552a:	f042 0201 	orr.w	r2, r2, #1
 800552e:	645a      	str	r2, [r3, #68]	; 0x44
 8005530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	9301      	str	r3, [sp, #4]
 8005538:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800553a:	b002      	add	sp, #8
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	40010000 	.word	0x40010000
 8005544:	40023800 	.word	0x40023800

08005548 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8005548:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(tim_encoderHandle->Instance==TIM2)
 800554a:	6803      	ldr	r3, [r0, #0]
 800554c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  /* USER CODE END TIM1_MspInit 1 */
  }
}

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8005550:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct;
  if(tim_encoderHandle->Instance==TIM2)
 8005552:	d122      	bne.n	800559a <HAL_TIM_Encoder_MspInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005554:	2400      	movs	r4, #0
 8005556:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800555a:	9401      	str	r4, [sp, #4]
 800555c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = LEFT_CHB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(LEFT_CHB_GPIO_Port, &GPIO_InitStruct);
 800555e:	481d      	ldr	r0, [pc, #116]	; (80055d4 <HAL_TIM_Encoder_MspInit+0x8c>)
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005560:	f042 0201 	orr.w	r2, r2, #1
 8005564:	641a      	str	r2, [r3, #64]	; 0x40
 8005566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = LEFT_CHB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005568:	9405      	str	r4, [sp, #20]
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800556a:	f003 0301 	and.w	r3, r3, #1
 800556e:	9301      	str	r3, [sp, #4]
 8005570:	9b01      	ldr	r3, [sp, #4]
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = LEFT_CHB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005572:	9406      	str	r4, [sp, #24]
  
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = LEFT_CHB_Pin;
 8005574:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005578:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800557a:	2501      	movs	r5, #1
    HAL_GPIO_Init(LEFT_CHB_GPIO_Port, &GPIO_InitStruct);
 800557c:	a903      	add	r1, sp, #12
  
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = LEFT_CHB_Pin;
 800557e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005580:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005582:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(LEFT_CHB_GPIO_Port, &GPIO_InitStruct);
 8005584:	f7fb f910 	bl	80007a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LEFT_CHA_Pin;
 8005588:	2308      	movs	r3, #8
 800558a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800558c:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800558e:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005590:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005592:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(LEFT_CHA_GPIO_Port, &GPIO_InitStruct);
 8005594:	a903      	add	r1, sp, #12
 8005596:	4810      	ldr	r0, [pc, #64]	; (80055d8 <HAL_TIM_Encoder_MspInit+0x90>)
 8005598:	e018      	b.n	80055cc <HAL_TIM_Encoder_MspInit+0x84>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(tim_encoderHandle->Instance==TIM5)
 800559a:	4a10      	ldr	r2, [pc, #64]	; (80055dc <HAL_TIM_Encoder_MspInit+0x94>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d117      	bne.n	80055d0 <HAL_TIM_Encoder_MspInit+0x88>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80055a0:	2300      	movs	r3, #0
 80055a2:	f502 320b 	add.w	r2, r2, #142336	; 0x22c00
 80055a6:	9302      	str	r3, [sp, #8]
 80055a8:	6c11      	ldr	r1, [r2, #64]	; 0x40
    GPIO_InitStruct.Pin = RIGHT_CHA_Pin|RIGHT_CHB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055aa:	480a      	ldr	r0, [pc, #40]	; (80055d4 <HAL_TIM_Encoder_MspInit+0x8c>)
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80055ac:	f041 0108 	orr.w	r1, r1, #8
 80055b0:	6411      	str	r1, [r2, #64]	; 0x40
 80055b2:	6c12      	ldr	r2, [r2, #64]	; 0x40
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2 
    */
    GPIO_InitStruct.Pin = RIGHT_CHA_Pin|RIGHT_CHB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055b4:	9305      	str	r3, [sp, #20]
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80055b6:	f002 0208 	and.w	r2, r2, #8
 80055ba:	9202      	str	r2, [sp, #8]
 80055bc:	9a02      	ldr	r2, [sp, #8]
    PA1     ------> TIM5_CH2 
    */
    GPIO_InitStruct.Pin = RIGHT_CHA_Pin|RIGHT_CHB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055be:	9306      	str	r3, [sp, #24]
  
    /**TIM5 GPIO Configuration    
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2 
    */
    GPIO_InitStruct.Pin = RIGHT_CHA_Pin|RIGHT_CHB_Pin;
 80055c0:	2203      	movs	r2, #3
 80055c2:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055c4:	2202      	movs	r2, #2
 80055c6:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80055c8:	9207      	str	r2, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055ca:	a903      	add	r1, sp, #12
 80055cc:	f7fb f8ec 	bl	80007a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80055d0:	b008      	add	sp, #32
 80055d2:	bd70      	pop	{r4, r5, r6, pc}
 80055d4:	40020000 	.word	0x40020000
 80055d8:	40020400 	.word	0x40020400
 80055dc:	40000c00 	.word	0x40000c00

080055e0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80055e0:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM1)
 80055e2:	6802      	ldr	r2, [r0, #0]
 80055e4:	4b0e      	ldr	r3, [pc, #56]	; (8005620 <HAL_TIM_MspPostInit+0x40>)
 80055e6:	429a      	cmp	r2, r3

  /* USER CODE END TIM5_MspInit 1 */
  }
}
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80055e8:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM1)
 80055ea:	d117      	bne.n	800561c <HAL_TIM_MspPostInit+0x3c>
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = NPWM_LEFT_Pin|NPWM_RIGHT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055ec:	2400      	movs	r4, #0
    PB0     ------> TIM1_CH2N
    PB1     ------> TIM1_CH3N
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = NPWM_LEFT_Pin|NPWM_RIGHT_Pin;
 80055ee:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055f0:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80055f2:	2501      	movs	r5, #1
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055f4:	a901      	add	r1, sp, #4
 80055f6:	480b      	ldr	r0, [pc, #44]	; (8005624 <HAL_TIM_MspPostInit+0x44>)
    PB0     ------> TIM1_CH2N
    PB1     ------> TIM1_CH3N
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = NPWM_LEFT_Pin|NPWM_RIGHT_Pin;
 80055f8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055fa:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055fc:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055fe:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005600:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005602:	f7fb f8d1 	bl	80007a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_LEFT_Pin|PWM_RIGHT_Pin;
 8005606:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800560a:	a901      	add	r1, sp, #4
 800560c:	4806      	ldr	r0, [pc, #24]	; (8005628 <HAL_TIM_MspPostInit+0x48>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = PWM_LEFT_Pin|PWM_RIGHT_Pin;
 800560e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005610:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005612:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005614:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005616:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005618:	f7fb f8c6 	bl	80007a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800561c:	b006      	add	sp, #24
 800561e:	bd70      	pop	{r4, r5, r6, pc}
 8005620:	40010000 	.word	0x40010000
 8005624:	40020400 	.word	0x40020400
 8005628:	40021000 	.word	0x40021000

0800562c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800562c:	b510      	push	{r4, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

  htim1.Instance = TIM1;
 800562e:	482d      	ldr	r0, [pc, #180]	; (80056e4 <MX_TIM1_Init+0xb8>)
 8005630:	4b2d      	ldr	r3, [pc, #180]	; (80056e8 <MX_TIM1_Init+0xbc>)
 8005632:	6003      	str	r3, [r0, #0]
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005634:	b094      	sub	sp, #80	; 0x50
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 0;
 8005636:	2300      	movs	r3, #0
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 8400;
 8005638:	f242 02d0 	movw	r2, #8400	; 0x20d0
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 0;
 800563c:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800563e:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 8400;
 8005640:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005642:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8005644:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005646:	f7fd facf 	bl	8002be8 <HAL_TIM_Base_Init>
 800564a:	b108      	cbz	r0, 8005650 <MX_TIM1_Init+0x24>
  {
    Error_Handler();
 800564c:	f7ff fd92 	bl	8005174 <Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005650:	a914      	add	r1, sp, #80	; 0x50
 8005652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005656:	f841 3d48 	str.w	r3, [r1, #-72]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800565a:	4822      	ldr	r0, [pc, #136]	; (80056e4 <MX_TIM1_Init+0xb8>)
 800565c:	f7fd f9a5 	bl	80029aa <HAL_TIM_ConfigClockSource>
 8005660:	b108      	cbz	r0, 8005666 <MX_TIM1_Init+0x3a>
  {
    Error_Handler();
 8005662:	f7ff fd87 	bl	8005174 <Error_Handler>
  }

  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005666:	481f      	ldr	r0, [pc, #124]	; (80056e4 <MX_TIM1_Init+0xb8>)
 8005668:	f7fd fad8 	bl	8002c1c <HAL_TIM_PWM_Init>
 800566c:	b108      	cbz	r0, 8005672 <MX_TIM1_Init+0x46>
  {
    Error_Handler();
 800566e:	f7ff fd81 	bl	8005174 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005672:	2400      	movs	r4, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005674:	4669      	mov	r1, sp
 8005676:	481b      	ldr	r0, [pc, #108]	; (80056e4 <MX_TIM1_Init+0xb8>)
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005678:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800567a:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800567c:	f7fd fc0c 	bl	8002e98 <HAL_TIMEx_MasterConfigSynchronization>
 8005680:	b108      	cbz	r0, 8005686 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8005682:	f7ff fd77 	bl	8005174 <Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005686:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005688:	2204      	movs	r2, #4
 800568a:	a906      	add	r1, sp, #24
 800568c:	4815      	ldr	r0, [pc, #84]	; (80056e4 <MX_TIM1_Init+0xb8>)
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800568e:	9306      	str	r3, [sp, #24]
  sConfigOC.Pulse = 0;
 8005690:	9407      	str	r4, [sp, #28]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005692:	9408      	str	r4, [sp, #32]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005694:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005696:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005698:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800569a:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800569c:	f7fd fb54 	bl	8002d48 <HAL_TIM_PWM_ConfigChannel>
 80056a0:	b108      	cbz	r0, 80056a6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80056a2:	f7ff fd67 	bl	8005174 <Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80056a6:	2208      	movs	r2, #8
 80056a8:	a906      	add	r1, sp, #24
 80056aa:	480e      	ldr	r0, [pc, #56]	; (80056e4 <MX_TIM1_Init+0xb8>)
 80056ac:	f7fd fb4c 	bl	8002d48 <HAL_TIM_PWM_ConfigChannel>
 80056b0:	b108      	cbz	r0, 80056b6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80056b2:	f7ff fd5f 	bl	8005174 <Error_Handler>
  }

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80056b6:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80056b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80056bc:	a90d      	add	r1, sp, #52	; 0x34
 80056be:	4809      	ldr	r0, [pc, #36]	; (80056e4 <MX_TIM1_Init+0xb8>)
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
  {
    Error_Handler();
  }

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80056c0:	930d      	str	r3, [sp, #52]	; 0x34
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80056c2:	930e      	str	r3, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80056c4:	930f      	str	r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.DeadTime = 0;
 80056c6:	9310      	str	r3, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80056c8:	9311      	str	r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80056ca:	9212      	str	r2, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80056cc:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80056ce:	f7fd fc05 	bl	8002edc <HAL_TIMEx_ConfigBreakDeadTime>
 80056d2:	b108      	cbz	r0, 80056d8 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80056d4:	f7ff fd4e 	bl	8005174 <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim1);
 80056d8:	4802      	ldr	r0, [pc, #8]	; (80056e4 <MX_TIM1_Init+0xb8>)
 80056da:	f7ff ff81 	bl	80055e0 <HAL_TIM_MspPostInit>

}
 80056de:	b014      	add	sp, #80	; 0x50
 80056e0:	bd10      	pop	{r4, pc}
 80056e2:	bf00      	nop
 80056e4:	2000037c 	.word	0x2000037c
 80056e8:	40010000 	.word	0x40010000

080056ec <MX_USART1_Init>:
USART_HandleTypeDef husart1;
UART_HandleTypeDef huart2;

/* USART1 init function */
void MX_USART1_Init(void)
{
 80056ec:	b508      	push	{r3, lr}

  husart1.Instance = USART1;
 80056ee:	480b      	ldr	r0, [pc, #44]	; (800571c <MX_USART1_Init+0x30>)
  husart1.Init.BaudRate = 115200;
 80056f0:	4b0b      	ldr	r3, [pc, #44]	; (8005720 <MX_USART1_Init+0x34>)
 80056f2:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 80056f6:	e880 4008 	stmia.w	r0, {r3, lr}
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
  husart1.Init.StopBits = USART_STOPBITS_1;
  husart1.Init.Parity = USART_PARITY_NONE;
  husart1.Init.Mode = USART_MODE_TX_RX;
 80056fa:	220c      	movs	r2, #12
void MX_USART1_Init(void)
{

  husart1.Instance = USART1;
  husart1.Init.BaudRate = 115200;
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 80056fc:	2300      	movs	r3, #0
 80056fe:	6083      	str	r3, [r0, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8005700:	60c3      	str	r3, [r0, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 8005702:	6103      	str	r3, [r0, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8005704:	6142      	str	r2, [r0, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8005706:	6183      	str	r3, [r0, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8005708:	61c3      	str	r3, [r0, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 800570a:	6203      	str	r3, [r0, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 800570c:	f7fd fd58 	bl	80031c0 <HAL_USART_Init>
 8005710:	b118      	cbz	r0, 800571a <MX_USART1_Init+0x2e>
  {
    Error_Handler();
  }

}
 8005712:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
  if (HAL_USART_Init(&husart1) != HAL_OK)
  {
    Error_Handler();
 8005716:	f7ff bd2d 	b.w	8005174 <Error_Handler>
 800571a:	bd08      	pop	{r3, pc}
 800571c:	20000434 	.word	0x20000434
 8005720:	40011000 	.word	0x40011000

08005724 <MX_USART2_UART_Init>:

}
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005724:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 8005726:	480b      	ldr	r0, [pc, #44]	; (8005754 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 8005728:	4b0b      	ldr	r3, [pc, #44]	; (8005758 <MX_USART2_UART_Init+0x34>)
 800572a:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 800572e:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005732:	220c      	movs	r2, #12
void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005734:	2300      	movs	r3, #0
 8005736:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005738:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800573a:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800573c:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800573e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005740:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005742:	f7fd fd0f 	bl	8003164 <HAL_UART_Init>
 8005746:	b118      	cbz	r0, 8005750 <MX_USART2_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8005748:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
 800574c:	f7ff bd12 	b.w	8005174 <Error_Handler>
 8005750:	bd08      	pop	{r3, pc}
 8005752:	bf00      	nop
 8005754:	200003f4 	.word	0x200003f4
 8005758:	40004400 	.word	0x40004400

0800575c <HAL_USART_MspInit>:
  }

}

void HAL_USART_MspInit(USART_HandleTypeDef* usartHandle)
{
 800575c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(usartHandle->Instance==USART1)
 800575e:	6802      	ldr	r2, [r0, #0]
 8005760:	4b10      	ldr	r3, [pc, #64]	; (80057a4 <HAL_USART_MspInit+0x48>)
 8005762:	429a      	cmp	r2, r3
 8005764:	d11a      	bne.n	800579c <HAL_USART_MspInit+0x40>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005766:	2100      	movs	r1, #0
 8005768:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 800576c:	9100      	str	r1, [sp, #0]
 800576e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005770:	480d      	ldr	r0, [pc, #52]	; (80057a8 <HAL_USART_MspInit+0x4c>)
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005772:	f042 0210 	orr.w	r2, r2, #16
 8005776:	645a      	str	r2, [r3, #68]	; 0x44
 8005778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800577a:	9103      	str	r1, [sp, #12]
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800577c:	f003 0310 	and.w	r3, r3, #16
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	9b00      	ldr	r3, [sp, #0]
    /**USART1 GPIO Configuration    
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8005784:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8005788:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800578a:	2302      	movs	r3, #2
 800578c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800578e:	2303      	movs	r3, #3
 8005790:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005792:	a901      	add	r1, sp, #4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005794:	2307      	movs	r3, #7
 8005796:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005798:	f7fb f806 	bl	80007a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800579c:	b007      	add	sp, #28
 800579e:	f85d fb04 	ldr.w	pc, [sp], #4
 80057a2:	bf00      	nop
 80057a4:	40011000 	.word	0x40011000
 80057a8:	40020000 	.word	0x40020000

080057ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80057ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART2)
 80057ae:	6802      	ldr	r2, [r0, #0]
 80057b0:	4b0f      	ldr	r3, [pc, #60]	; (80057f0 <HAL_UART_MspInit+0x44>)
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d119      	bne.n	80057ea <HAL_UART_MspInit+0x3e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80057b6:	2300      	movs	r3, #0
 80057b8:	9300      	str	r3, [sp, #0]
 80057ba:	4b0e      	ldr	r3, [pc, #56]	; (80057f4 <HAL_UART_MspInit+0x48>)
    GPIO_InitStruct.Pin = GPS_RX_Pin|GPS_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80057bc:	480e      	ldr	r0, [pc, #56]	; (80057f8 <HAL_UART_MspInit+0x4c>)
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80057be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057c0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80057c4:	641a      	str	r2, [r3, #64]	; 0x40
 80057c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057cc:	9300      	str	r3, [sp, #0]
 80057ce:	9b00      	ldr	r3, [sp, #0]
  
    /**USART2 GPIO Configuration    
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin|GPS_TX_Pin;
 80057d0:	2360      	movs	r3, #96	; 0x60
 80057d2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057d4:	2302      	movs	r3, #2
 80057d6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80057d8:	2301      	movs	r3, #1
 80057da:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057dc:	2303      	movs	r3, #3
 80057de:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80057e0:	a901      	add	r1, sp, #4
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin|GPS_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80057e2:	2307      	movs	r3, #7
 80057e4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80057e6:	f7fa ffdf 	bl	80007a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80057ea:	b007      	add	sp, #28
 80057ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80057f0:	40004400 	.word	0x40004400
 80057f4:	40023800 	.word	0x40023800
 80057f8:	40020c00 	.word	0x40020c00

080057fc <MX_USB_DEVICE_Init>:
/* USB Device Core handle declaration */
USBD_HandleTypeDef hUsbDeviceFS;

/* init function */				        
void MX_USB_DEVICE_Init(void)
{
 80057fc:	b510      	push	{r4, lr}
  /* Init Device Library,Add Supported Class and Start the library*/
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 80057fe:	4c09      	ldr	r4, [pc, #36]	; (8005824 <MX_USB_DEVICE_Init+0x28>)
 8005800:	4909      	ldr	r1, [pc, #36]	; (8005828 <MX_USB_DEVICE_Init+0x2c>)
 8005802:	2200      	movs	r2, #0
 8005804:	4620      	mov	r0, r4
 8005806:	f7fe fe8e 	bl	8004526 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 800580a:	4908      	ldr	r1, [pc, #32]	; (800582c <MX_USB_DEVICE_Init+0x30>)
 800580c:	4620      	mov	r0, r4
 800580e:	f7fe fe9f 	bl	8004550 <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 8005812:	4620      	mov	r0, r4
 8005814:	4906      	ldr	r1, [pc, #24]	; (8005830 <MX_USB_DEVICE_Init+0x34>)
 8005816:	f7fe fe5e 	bl	80044d6 <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 800581a:	4620      	mov	r0, r4

}
 800581c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);

  USBD_Start(&hUsbDeviceFS);
 8005820:	f7fe be9d 	b.w	800455e <USBD_Start>
 8005824:	20000478 	.word	0x20000478
 8005828:	20000124 	.word	0x20000124
 800582c:	20000044 	.word	0x20000044
 8005830:	20000114 	.word	0x20000114

08005834 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */ 
  return (USBD_OK);
  /* USER CODE END 4 */ 
}
 8005834:	2000      	movs	r0, #0
 8005836:	4770      	bx	lr

08005838 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8005838:	2000      	movs	r0, #0
 800583a:	4770      	bx	lr

0800583c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS (uint8_t* Buf, uint32_t *Len)
{
 800583c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800583e:	4c05      	ldr	r4, [pc, #20]	; (8005854 <CDC_Receive_FS+0x18>)
 8005840:	4601      	mov	r1, r0
 8005842:	4620      	mov	r0, r4
 8005844:	f7fe fe56 	bl	80044f4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005848:	4620      	mov	r0, r4
 800584a:	f7fe fe59 	bl	8004500 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */ 
}
 800584e:	2000      	movs	r0, #0
 8005850:	bd10      	pop	{r4, pc}
 8005852:	bf00      	nop
 8005854:	20000478 	.word	0x20000478

08005858 <CDC_Init_FS>:
  *         Initializes the CDC media low layer over the FS USB IP
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{ 
 8005858:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 3 */ 
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800585a:	4c06      	ldr	r4, [pc, #24]	; (8005874 <CDC_Init_FS+0x1c>)
 800585c:	4906      	ldr	r1, [pc, #24]	; (8005878 <CDC_Init_FS+0x20>)
 800585e:	2200      	movs	r2, #0
 8005860:	4620      	mov	r0, r4
 8005862:	f7fe fe3f 	bl	80044e4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005866:	4905      	ldr	r1, [pc, #20]	; (800587c <CDC_Init_FS+0x24>)
 8005868:	4620      	mov	r0, r4
 800586a:	f7fe fe43 	bl	80044f4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
  /* USER CODE END 3 */ 
}
 800586e:	2000      	movs	r0, #0
 8005870:	bd10      	pop	{r4, pc}
 8005872:	bf00      	nop
 8005874:	20000478 	.word	0x20000478
 8005878:	200006a0 	.word	0x200006a0
 800587c:	2000069c 	.word	0x2000069c

08005880 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005880:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 8005882:	6803      	ldr	r3, [r0, #0]
 8005884:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005888:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 800588a:	d125      	bne.n	80058d8 <HAL_PCD_MspInit+0x58>
  
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800588c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005890:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005892:	2302      	movs	r3, #2
 8005894:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005896:	2303      	movs	r3, #3
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005898:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800589a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800589c:	a901      	add	r1, sp, #4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800589e:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058a0:	480e      	ldr	r0, [pc, #56]	; (80058dc <HAL_PCD_MspInit+0x5c>)
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80058a2:	9305      	str	r3, [sp, #20]
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058a4:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058a6:	f7fa ff7f 	bl	80007a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80058aa:	4b0d      	ldr	r3, [pc, #52]	; (80058e0 <HAL_PCD_MspInit+0x60>)
 80058ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80058b2:	635a      	str	r2, [r3, #52]	; 0x34
 80058b4:	9400      	str	r4, [sp, #0]
 80058b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058bc:	645a      	str	r2, [r3, #68]	; 0x44
 80058be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058c4:	9300      	str	r3, [sp, #0]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80058c6:	2043      	movs	r0, #67	; 0x43
 80058c8:	4622      	mov	r2, r4
 80058ca:	4621      	mov	r1, r4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80058cc:	9b00      	ldr	r3, [sp, #0]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80058ce:	f7fa fef1 	bl	80006b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80058d2:	2043      	movs	r0, #67	; 0x43
 80058d4:	f7fa ff22 	bl	800071c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80058d8:	b006      	add	sp, #24
 80058da:	bd10      	pop	{r4, pc}
 80058dc:	40020000 	.word	0x40020000
 80058e0:	40023800 	.word	0x40023800

080058e4 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80058e4:	f500 716f 	add.w	r1, r0, #956	; 0x3bc
 80058e8:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 80058ec:	f7fe be4e 	b.w	800458c <USBD_LL_SetupStage>

080058f0 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80058f0:	231c      	movs	r3, #28
 80058f2:	fb03 0301 	mla	r3, r3, r1, r0
 80058f6:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 80058fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80058fe:	f7fe be72 	b.w	80045e6 <USBD_LL_DataOutStage>

08005902 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005902:	231c      	movs	r3, #28
 8005904:	fb03 0301 	mla	r3, r3, r1, r0
 8005908:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 800590c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800590e:	f7fe be9b 	b.w	8004648 <USBD_LL_DataInStage>

08005912 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005912:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8005916:	f7fe bf16 	b.w	8004746 <USBD_LL_SOF>

0800591a <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 800591a:	b510      	push	{r4, lr}
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  /*Set USB Current Speed*/
  switch (hpcd->Init.speed)
 800591c:	68c1      	ldr	r1, [r0, #12]
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 800591e:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;    
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);  
 8005920:	3100      	adds	r1, #0
 8005922:	bf18      	it	ne
 8005924:	2101      	movne	r1, #1
 8005926:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 800592a:	f7fe fefa 	bl	8004722 <USBD_LL_SetSpeed>
  
  /*Reset Device*/
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800592e:	f8d4 03ec 	ldr.w	r0, [r4, #1004]	; 0x3ec
}
 8005932:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);  
  
  /*Reset Device*/
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005936:	f7fe bed5 	b.w	80046e4 <USBD_LL_Reset>
	...

0800593c <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{  
 800593c:	b510      	push	{r4, lr}
 800593e:	4604      	mov	r4, r0
   /* Inform USB library that core enters in suspend Mode */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005940:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8005944:	f7fe fef0 	bl	8004728 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8005948:	6822      	ldr	r2, [r4, #0]
 800594a:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 800594e:	f043 0301 	orr.w	r3, r3, #1
 8005952:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /*Enter in STOP mode */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005956:	6a23      	ldr	r3, [r4, #32]
 8005958:	b123      	cbz	r3, 8005964 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800595a:	4a03      	ldr	r2, [pc, #12]	; (8005968 <HAL_PCD_SuspendCallback+0x2c>)
 800595c:	6913      	ldr	r3, [r2, #16]
 800595e:	f043 0306 	orr.w	r3, r3, #6
 8005962:	6113      	str	r3, [r2, #16]
 8005964:	bd10      	pop	{r4, pc}
 8005966:	bf00      	nop
 8005968:	e000ed00 	.word	0xe000ed00

0800596c <HAL_PCD_ResumeCallback>:
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800596c:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8005970:	f7fe bee3 	b.w	800473a <USBD_LL_Resume>

08005974 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005974:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8005978:	f7fe bef3 	b.w	8004762 <USBD_LL_IsoOUTIncomplete>

0800597c <HAL_PCD_ISOINIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800597c:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8005980:	f7fe beed 	b.w	800475e <USBD_LL_IsoINIncomplete>

08005984 <HAL_PCD_ConnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8005984:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8005988:	f7fe beed 	b.w	8004766 <USBD_LL_DevConnected>

0800598c <HAL_PCD_DisconnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800598c:	f8d0 03ec 	ldr.w	r0, [r0, #1004]	; 0x3ec
 8005990:	f7fe beeb 	b.w	800476a <USBD_LL_DevDisconnected>

08005994 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
 8005994:	b508      	push	{r3, lr}
  /* Init USB_IP */
  if (pdev->id == DEVICE_FS) {
 8005996:	7802      	ldrb	r2, [r0, #0]
 8005998:	bb42      	cbnz	r2, 80059ec <USBD_LL_Init+0x58>
  /* Link The driver to the stack */	
  hpcd_USB_OTG_FS.pData = pdev;
 800599a:	4b15      	ldr	r3, [pc, #84]	; (80059f0 <USBD_LL_Init+0x5c>)
  pdev->pData = &hpcd_USB_OTG_FS; 
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800599c:	2104      	movs	r1, #4
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
  /* Init USB_IP */
  if (pdev->id == DEVICE_FS) {
  /* Link The driver to the stack */	
  hpcd_USB_OTG_FS.pData = pdev;
 800599e:	f8c3 03ec 	str.w	r0, [r3, #1004]	; 0x3ec
  pdev->pData = &hpcd_USB_OTG_FS; 
 80059a2:	f8c0 3220 	str.w	r3, [r0, #544]	; 0x220
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80059a6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80059aa:	e883 0003 	stmia.w	r3, {r0, r1}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80059ae:	2102      	movs	r1, #2
 80059b0:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80059b2:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80059b4:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80059b6:	2101      	movs	r1, #1
  pdev->pData = &hpcd_USB_OTG_FS; 
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80059b8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 80059ba:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80059bc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80059be:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80059c0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80059c2:	62d9      	str	r1, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80059c4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80059c6:	f7fa ffd7 	bl	8000978 <HAL_PCD_Init>
 80059ca:	b108      	cbz	r0, 80059d0 <USBD_LL_Init+0x3c>
  {
    Error_Handler();
 80059cc:	f7ff fbd2 	bl	8005174 <Error_Handler>
  }

  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80059d0:	2180      	movs	r1, #128	; 0x80
 80059d2:	4807      	ldr	r0, [pc, #28]	; (80059f0 <USBD_LL_Init+0x5c>)
 80059d4:	f7fb fc16 	bl	8001204 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80059d8:	2240      	movs	r2, #64	; 0x40
 80059da:	2100      	movs	r1, #0
 80059dc:	4804      	ldr	r0, [pc, #16]	; (80059f0 <USBD_LL_Init+0x5c>)
 80059de:	f7fb fbf0 	bl	80011c2 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80059e2:	2280      	movs	r2, #128	; 0x80
 80059e4:	2101      	movs	r1, #1
 80059e6:	4802      	ldr	r0, [pc, #8]	; (80059f0 <USBD_LL_Init+0x5c>)
 80059e8:	f7fb fbeb 	bl	80011c2 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
}
 80059ec:	2000      	movs	r0, #0
 80059ee:	bd08      	pop	{r3, pc}
 80059f0:	200006a4 	.word	0x200006a4

080059f4 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80059f4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80059f6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80059fa:	f7fb f829 	bl	8000a50 <HAL_PCD_Start>
 80059fe:	2803      	cmp	r0, #3
 8005a00:	bf9a      	itte	ls
 8005a02:	4b02      	ldrls	r3, [pc, #8]	; (8005a0c <USBD_LL_Start+0x18>)
 8005a04:	5c18      	ldrbls	r0, [r3, r0]
 8005a06:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8005a08:	bd08      	pop	{r3, pc}
 8005a0a:	bf00      	nop
 8005a0c:	08005e4c 	.word	0x08005e4c

08005a10 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef  USBD_LL_OpenEP  (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  ep_type,
                                      uint16_t ep_mps)
{
 8005a10:	b510      	push	{r4, lr}
 8005a12:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, 
 8005a14:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005a18:	4613      	mov	r3, r2
 8005a1a:	4622      	mov	r2, r4
 8005a1c:	f7fb fae4 	bl	8000fe8 <HAL_PCD_EP_Open>
 8005a20:	2803      	cmp	r0, #3
 8005a22:	bf9a      	itte	ls
 8005a24:	4b01      	ldrls	r3, [pc, #4]	; (8005a2c <USBD_LL_OpenEP+0x1c>)
 8005a26:	5c18      	ldrbls	r0, [r3, r0]
 8005a28:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8005a2a:	bd10      	pop	{r4, pc}
 8005a2c:	08005e4c 	.word	0x08005e4c

08005a30 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_CloseEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8005a30:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005a32:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005a36:	f7fb fb05 	bl	8001044 <HAL_PCD_EP_Close>
 8005a3a:	2803      	cmp	r0, #3
 8005a3c:	bf9a      	itte	ls
 8005a3e:	4b02      	ldrls	r3, [pc, #8]	; (8005a48 <USBD_LL_CloseEP+0x18>)
 8005a40:	5c18      	ldrbls	r0, [r3, r0]
 8005a42:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8005a44:	bd08      	pop	{r3, pc}
 8005a46:	bf00      	nop
 8005a48:	08005e4c 	.word	0x08005e4c

08005a4c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_StallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8005a4c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005a4e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005a52:	f7fb fb65 	bl	8001120 <HAL_PCD_EP_SetStall>
 8005a56:	2803      	cmp	r0, #3
 8005a58:	bf9a      	itte	ls
 8005a5a:	4b02      	ldrls	r3, [pc, #8]	; (8005a64 <USBD_LL_StallEP+0x18>)
 8005a5c:	5c18      	ldrbls	r0, [r3, r0]
 8005a5e:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8005a60:	bd08      	pop	{r3, pc}
 8005a62:	bf00      	nop
 8005a64:	08005e4c 	.word	0x08005e4c

08005a68 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_ClearStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8005a68:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8005a6a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005a6e:	f7fb fb83 	bl	8001178 <HAL_PCD_EP_ClrStall>
 8005a72:	2803      	cmp	r0, #3
 8005a74:	bf9a      	itte	ls
 8005a76:	4b02      	ldrls	r3, [pc, #8]	; (8005a80 <USBD_LL_ClearStallEP+0x18>)
 8005a78:	5c18      	ldrbls	r0, [r3, r0]
 8005a7a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8005a7c:	bd08      	pop	{r3, pc}
 8005a7e:	bf00      	nop
 8005a80:	08005e4c 	.word	0x08005e4c

08005a84 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8005a84:	f011 0f80 	tst.w	r1, #128	; 0x80
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005a88:	f8d0 2220 	ldr.w	r2, [r0, #544]	; 0x220
  
  if((ep_addr & 0x80) == 0x80)
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8005a8c:	bf18      	it	ne
 8005a8e:	f001 037f 	andne.w	r3, r1, #127	; 0x7f
 8005a92:	f04f 001c 	mov.w	r0, #28
 8005a96:	bf15      	itete	ne
 8005a98:	fb00 2103 	mlane	r1, r0, r3, r2
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8005a9c:	fb00 2101 	mlaeq	r1, r0, r1, r2
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8005aa0:	f891 003a 	ldrbne.w	r0, [r1, #58]	; 0x3a
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8005aa4:	f891 01fa 	ldrbeq.w	r0, [r1, #506]	; 0x1fa
  }
}
 8005aa8:	4770      	bx	lr
	...

08005aac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_SetUSBAddress (USBD_HandleTypeDef *pdev, uint8_t dev_addr)   
{
 8005aac:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005aae:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005ab2:	f7fb fa87 	bl	8000fc4 <HAL_PCD_SetAddress>
 8005ab6:	2803      	cmp	r0, #3
 8005ab8:	bf9a      	itte	ls
 8005aba:	4b02      	ldrls	r3, [pc, #8]	; (8005ac4 <USBD_LL_SetUSBAddress+0x18>)
 8005abc:	5c18      	ldrbls	r0, [r3, r0]
 8005abe:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8005ac0:	bd08      	pop	{r3, pc}
 8005ac2:	bf00      	nop
 8005ac4:	08005e4c 	.word	0x08005e4c

08005ac8 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef  USBD_LL_Transmit (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  *pbuf,
                                      uint16_t  size)
{
 8005ac8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005aca:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005ace:	f7fb fb07 	bl	80010e0 <HAL_PCD_EP_Transmit>
 8005ad2:	2803      	cmp	r0, #3
 8005ad4:	bf9a      	itte	ls
 8005ad6:	4b02      	ldrls	r3, [pc, #8]	; (8005ae0 <USBD_LL_Transmit+0x18>)
 8005ad8:	5c18      	ldrbls	r0, [r3, r0]
 8005ada:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 8005adc:	bd08      	pop	{r3, pc}
 8005ade:	bf00      	nop
 8005ae0:	08005e4c 	.word	0x08005e4c

08005ae4 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                           uint8_t  ep_addr,                                      
                                           uint8_t  *pbuf,
                                           uint16_t  size)
{
 8005ae4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005ae6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005aea:	f7fb face 	bl	800108a <HAL_PCD_EP_Receive>
 8005aee:	2803      	cmp	r0, #3
 8005af0:	bf9a      	itte	ls
 8005af2:	4b02      	ldrls	r3, [pc, #8]	; (8005afc <USBD_LL_PrepareReceive+0x18>)
 8005af4:	5c18      	ldrbls	r0, [r3, r0]
 8005af6:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8005af8:	bd08      	pop	{r3, pc}
 8005afa:	bf00      	nop
 8005afc:	08005e4c 	.word	0x08005e4c

08005b00 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize  (USBD_HandleTypeDef *pdev, uint8_t  ep_addr)  
{
 8005b00:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8005b02:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8005b06:	f7fb fae3 	bl	80010d0 <HAL_PCD_EP_GetRxCount>
}
 8005b0a:	bd08      	pop	{r3, pc}

08005b0c <USBD_FS_DeviceDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_DeviceDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8005b0c:	2312      	movs	r3, #18
 8005b0e:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8005b10:	4800      	ldr	r0, [pc, #0]	; (8005b14 <USBD_FS_DeviceDescriptor+0x8>)
 8005b12:	4770      	bx	lr
 8005b14:	20000144 	.word	0x20000144

08005b18 <USBD_FS_LangIDStrDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_LangIDStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length =  sizeof(USBD_LangIDDesc);  
 8005b18:	2304      	movs	r3, #4
 8005b1a:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8005b1c:	4800      	ldr	r0, [pc, #0]	; (8005b20 <USBD_FS_LangIDStrDescriptor+0x8>)
 8005b1e:	4770      	bx	lr
 8005b20:	20000140 	.word	0x20000140

08005b24 <USBD_FS_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ManufacturerStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8005b24:	b510      	push	{r4, lr}
  USBD_GetString (USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005b26:	4c04      	ldr	r4, [pc, #16]	; (8005b38 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8005b28:	4804      	ldr	r0, [pc, #16]	; (8005b3c <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8005b2a:	460a      	mov	r2, r1
 8005b2c:	4621      	mov	r1, r4
 8005b2e:	f7fe ffcc 	bl	8004aca <USBD_GetString>
  return USBD_StrDesc;
}
 8005b32:	4620      	mov	r0, r4
 8005b34:	bd10      	pop	{r4, pc}
 8005b36:	bf00      	nop
 8005b38:	20000a94 	.word	0x20000a94
 8005b3c:	08005e50 	.word	0x08005e50

08005b40 <USBD_FS_ProductStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ProductStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8005b40:	b510      	push	{r4, lr}
  if(speed == 0)
  {   
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005b42:	4c04      	ldr	r4, [pc, #16]	; (8005b54 <USBD_FS_ProductStrDescriptor+0x14>)
 8005b44:	4804      	ldr	r0, [pc, #16]	; (8005b58 <USBD_FS_ProductStrDescriptor+0x18>)
 8005b46:	460a      	mov	r2, r1
 8005b48:	4621      	mov	r1, r4
 8005b4a:	f7fe ffbe 	bl	8004aca <USBD_GetString>
  else
  {
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);    
  }
  return USBD_StrDesc;
}
 8005b4e:	4620      	mov	r0, r4
 8005b50:	bd10      	pop	{r4, pc}
 8005b52:	bf00      	nop
 8005b54:	20000a94 	.word	0x20000a94
 8005b58:	08005e63 	.word	0x08005e63

08005b5c <USBD_FS_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_SerialStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8005b5c:	b510      	push	{r4, lr}
  if(speed  == USBD_SPEED_HIGH)
  {    
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8005b5e:	4c04      	ldr	r4, [pc, #16]	; (8005b70 <USBD_FS_SerialStrDescriptor+0x14>)
 8005b60:	4804      	ldr	r0, [pc, #16]	; (8005b74 <USBD_FS_SerialStrDescriptor+0x18>)
 8005b62:	460a      	mov	r2, r1
 8005b64:	4621      	mov	r1, r4
 8005b66:	f7fe ffb0 	bl	8004aca <USBD_GetString>
  else
  {
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);    
  }
  return USBD_StrDesc;
}
 8005b6a:	4620      	mov	r0, r4
 8005b6c:	bd10      	pop	{r4, pc}
 8005b6e:	bf00      	nop
 8005b70:	20000a94 	.word	0x20000a94
 8005b74:	08005e79 	.word	0x08005e79

08005b78 <USBD_FS_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ConfigStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8005b78:	b510      	push	{r4, lr}
  if(speed  == USBD_SPEED_HIGH)
  {  
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005b7a:	4c04      	ldr	r4, [pc, #16]	; (8005b8c <USBD_FS_ConfigStrDescriptor+0x14>)
 8005b7c:	4804      	ldr	r0, [pc, #16]	; (8005b90 <USBD_FS_ConfigStrDescriptor+0x18>)
 8005b7e:	460a      	mov	r2, r1
 8005b80:	4621      	mov	r1, r4
 8005b82:	f7fe ffa2 	bl	8004aca <USBD_GetString>
  else
  {
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length); 
  }
  return USBD_StrDesc;  
}
 8005b86:	4620      	mov	r0, r4
 8005b88:	bd10      	pop	{r4, pc}
 8005b8a:	bf00      	nop
 8005b8c:	20000a94 	.word	0x20000a94
 8005b90:	08005e86 	.word	0x08005e86

08005b94 <USBD_FS_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_InterfaceStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8005b94:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005b96:	4c04      	ldr	r4, [pc, #16]	; (8005ba8 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8005b98:	4804      	ldr	r0, [pc, #16]	; (8005bac <USBD_FS_InterfaceStrDescriptor+0x18>)
 8005b9a:	460a      	mov	r2, r1
 8005b9c:	4621      	mov	r1, r4
 8005b9e:	f7fe ff94 	bl	8004aca <USBD_GetString>
  else
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;  
}
 8005ba2:	4620      	mov	r0, r4
 8005ba4:	bd10      	pop	{r4, pc}
 8005ba6:	bf00      	nop
 8005ba8:	20000a94 	.word	0x20000a94
 8005bac:	08005e91 	.word	0x08005e91

08005bb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005bb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005be8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005bb4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005bb6:	e003      	b.n	8005bc0 <LoopCopyDataInit>

08005bb8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005bb8:	4b0c      	ldr	r3, [pc, #48]	; (8005bec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005bba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005bbc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005bbe:	3104      	adds	r1, #4

08005bc0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005bc0:	480b      	ldr	r0, [pc, #44]	; (8005bf0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005bc2:	4b0c      	ldr	r3, [pc, #48]	; (8005bf4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005bc4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005bc6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005bc8:	d3f6      	bcc.n	8005bb8 <CopyDataInit>
  ldr  r2, =_sbss
 8005bca:	4a0b      	ldr	r2, [pc, #44]	; (8005bf8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005bcc:	e002      	b.n	8005bd4 <LoopFillZerobss>

08005bce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005bce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005bd0:	f842 3b04 	str.w	r3, [r2], #4

08005bd4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005bd4:	4b09      	ldr	r3, [pc, #36]	; (8005bfc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005bd6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005bd8:	d3f9      	bcc.n	8005bce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005bda:	f7ff fc25 	bl	8005428 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005bde:	f000 f811 	bl	8005c04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005be2:	f7ff fa7d 	bl	80050e0 <main>
  bx  lr    
 8005be6:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005be8:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8005bec:	08005eac 	.word	0x08005eac
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005bf0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005bf4:	200001bc 	.word	0x200001bc
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8005bf8:	200001bc 	.word	0x200001bc
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005bfc:	20000c98 	.word	0x20000c98

08005c00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005c00:	e7fe      	b.n	8005c00 <ADC_IRQHandler>
	...

08005c04 <__libc_init_array>:
 8005c04:	b570      	push	{r4, r5, r6, lr}
 8005c06:	4b0e      	ldr	r3, [pc, #56]	; (8005c40 <__libc_init_array+0x3c>)
 8005c08:	4c0e      	ldr	r4, [pc, #56]	; (8005c44 <__libc_init_array+0x40>)
 8005c0a:	1ae4      	subs	r4, r4, r3
 8005c0c:	10a4      	asrs	r4, r4, #2
 8005c0e:	2500      	movs	r5, #0
 8005c10:	461e      	mov	r6, r3
 8005c12:	42a5      	cmp	r5, r4
 8005c14:	d004      	beq.n	8005c20 <__libc_init_array+0x1c>
 8005c16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c1a:	4798      	blx	r3
 8005c1c:	3501      	adds	r5, #1
 8005c1e:	e7f8      	b.n	8005c12 <__libc_init_array+0xe>
 8005c20:	f000 f8f2 	bl	8005e08 <_init>
 8005c24:	4c08      	ldr	r4, [pc, #32]	; (8005c48 <__libc_init_array+0x44>)
 8005c26:	4b09      	ldr	r3, [pc, #36]	; (8005c4c <__libc_init_array+0x48>)
 8005c28:	1ae4      	subs	r4, r4, r3
 8005c2a:	10a4      	asrs	r4, r4, #2
 8005c2c:	2500      	movs	r5, #0
 8005c2e:	461e      	mov	r6, r3
 8005c30:	42a5      	cmp	r5, r4
 8005c32:	d004      	beq.n	8005c3e <__libc_init_array+0x3a>
 8005c34:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c38:	4798      	blx	r3
 8005c3a:	3501      	adds	r5, #1
 8005c3c:	e7f8      	b.n	8005c30 <__libc_init_array+0x2c>
 8005c3e:	bd70      	pop	{r4, r5, r6, pc}
 8005c40:	08005ea4 	.word	0x08005ea4
 8005c44:	08005ea4 	.word	0x08005ea4
 8005c48:	08005ea8 	.word	0x08005ea8
 8005c4c:	08005ea4 	.word	0x08005ea4

08005c50 <malloc>:
 8005c50:	4b02      	ldr	r3, [pc, #8]	; (8005c5c <malloc+0xc>)
 8005c52:	4601      	mov	r1, r0
 8005c54:	6818      	ldr	r0, [r3, #0]
 8005c56:	f000 b859 	b.w	8005d0c <_malloc_r>
 8005c5a:	bf00      	nop
 8005c5c:	200001b8 	.word	0x200001b8

08005c60 <free>:
 8005c60:	4b02      	ldr	r3, [pc, #8]	; (8005c6c <free+0xc>)
 8005c62:	4601      	mov	r1, r0
 8005c64:	6818      	ldr	r0, [r3, #0]
 8005c66:	f000 b803 	b.w	8005c70 <_free_r>
 8005c6a:	bf00      	nop
 8005c6c:	200001b8 	.word	0x200001b8

08005c70 <_free_r>:
 8005c70:	b538      	push	{r3, r4, r5, lr}
 8005c72:	4605      	mov	r5, r0
 8005c74:	2900      	cmp	r1, #0
 8005c76:	d046      	beq.n	8005d06 <_free_r+0x96>
 8005c78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c7c:	1f0c      	subs	r4, r1, #4
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	bfb8      	it	lt
 8005c82:	18e4      	addlt	r4, r4, r3
 8005c84:	f000 f8b0 	bl	8005de8 <__malloc_lock>
 8005c88:	4a1f      	ldr	r2, [pc, #124]	; (8005d08 <_free_r+0x98>)
 8005c8a:	6813      	ldr	r3, [r2, #0]
 8005c8c:	4611      	mov	r1, r2
 8005c8e:	b913      	cbnz	r3, 8005c96 <_free_r+0x26>
 8005c90:	6063      	str	r3, [r4, #4]
 8005c92:	6014      	str	r4, [r2, #0]
 8005c94:	e032      	b.n	8005cfc <_free_r+0x8c>
 8005c96:	42a3      	cmp	r3, r4
 8005c98:	d90e      	bls.n	8005cb8 <_free_r+0x48>
 8005c9a:	6822      	ldr	r2, [r4, #0]
 8005c9c:	18a0      	adds	r0, r4, r2
 8005c9e:	4283      	cmp	r3, r0
 8005ca0:	bf04      	itt	eq
 8005ca2:	6818      	ldreq	r0, [r3, #0]
 8005ca4:	685b      	ldreq	r3, [r3, #4]
 8005ca6:	6063      	str	r3, [r4, #4]
 8005ca8:	bf04      	itt	eq
 8005caa:	1812      	addeq	r2, r2, r0
 8005cac:	6022      	streq	r2, [r4, #0]
 8005cae:	600c      	str	r4, [r1, #0]
 8005cb0:	e024      	b.n	8005cfc <_free_r+0x8c>
 8005cb2:	42a2      	cmp	r2, r4
 8005cb4:	d803      	bhi.n	8005cbe <_free_r+0x4e>
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	685a      	ldr	r2, [r3, #4]
 8005cba:	2a00      	cmp	r2, #0
 8005cbc:	d1f9      	bne.n	8005cb2 <_free_r+0x42>
 8005cbe:	6818      	ldr	r0, [r3, #0]
 8005cc0:	1819      	adds	r1, r3, r0
 8005cc2:	42a1      	cmp	r1, r4
 8005cc4:	d10b      	bne.n	8005cde <_free_r+0x6e>
 8005cc6:	6821      	ldr	r1, [r4, #0]
 8005cc8:	4401      	add	r1, r0
 8005cca:	1858      	adds	r0, r3, r1
 8005ccc:	4282      	cmp	r2, r0
 8005cce:	6019      	str	r1, [r3, #0]
 8005cd0:	d114      	bne.n	8005cfc <_free_r+0x8c>
 8005cd2:	6810      	ldr	r0, [r2, #0]
 8005cd4:	6852      	ldr	r2, [r2, #4]
 8005cd6:	605a      	str	r2, [r3, #4]
 8005cd8:	4401      	add	r1, r0
 8005cda:	6019      	str	r1, [r3, #0]
 8005cdc:	e00e      	b.n	8005cfc <_free_r+0x8c>
 8005cde:	d902      	bls.n	8005ce6 <_free_r+0x76>
 8005ce0:	230c      	movs	r3, #12
 8005ce2:	602b      	str	r3, [r5, #0]
 8005ce4:	e00a      	b.n	8005cfc <_free_r+0x8c>
 8005ce6:	6821      	ldr	r1, [r4, #0]
 8005ce8:	1860      	adds	r0, r4, r1
 8005cea:	4282      	cmp	r2, r0
 8005cec:	bf04      	itt	eq
 8005cee:	6810      	ldreq	r0, [r2, #0]
 8005cf0:	6852      	ldreq	r2, [r2, #4]
 8005cf2:	6062      	str	r2, [r4, #4]
 8005cf4:	bf04      	itt	eq
 8005cf6:	1809      	addeq	r1, r1, r0
 8005cf8:	6021      	streq	r1, [r4, #0]
 8005cfa:	605c      	str	r4, [r3, #4]
 8005cfc:	4628      	mov	r0, r5
 8005cfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d02:	f000 b872 	b.w	8005dea <__malloc_unlock>
 8005d06:	bd38      	pop	{r3, r4, r5, pc}
 8005d08:	200001ec 	.word	0x200001ec

08005d0c <_malloc_r>:
 8005d0c:	b570      	push	{r4, r5, r6, lr}
 8005d0e:	1ccd      	adds	r5, r1, #3
 8005d10:	f025 0503 	bic.w	r5, r5, #3
 8005d14:	3508      	adds	r5, #8
 8005d16:	2d0c      	cmp	r5, #12
 8005d18:	bf38      	it	cc
 8005d1a:	250c      	movcc	r5, #12
 8005d1c:	2d00      	cmp	r5, #0
 8005d1e:	4606      	mov	r6, r0
 8005d20:	db01      	blt.n	8005d26 <_malloc_r+0x1a>
 8005d22:	42a9      	cmp	r1, r5
 8005d24:	d902      	bls.n	8005d2c <_malloc_r+0x20>
 8005d26:	230c      	movs	r3, #12
 8005d28:	6033      	str	r3, [r6, #0]
 8005d2a:	e046      	b.n	8005dba <_malloc_r+0xae>
 8005d2c:	f000 f85c 	bl	8005de8 <__malloc_lock>
 8005d30:	4b23      	ldr	r3, [pc, #140]	; (8005dc0 <_malloc_r+0xb4>)
 8005d32:	681c      	ldr	r4, [r3, #0]
 8005d34:	461a      	mov	r2, r3
 8005d36:	4621      	mov	r1, r4
 8005d38:	b1a1      	cbz	r1, 8005d64 <_malloc_r+0x58>
 8005d3a:	680b      	ldr	r3, [r1, #0]
 8005d3c:	1b5b      	subs	r3, r3, r5
 8005d3e:	d40e      	bmi.n	8005d5e <_malloc_r+0x52>
 8005d40:	2b0b      	cmp	r3, #11
 8005d42:	d903      	bls.n	8005d4c <_malloc_r+0x40>
 8005d44:	600b      	str	r3, [r1, #0]
 8005d46:	18cc      	adds	r4, r1, r3
 8005d48:	50cd      	str	r5, [r1, r3]
 8005d4a:	e01e      	b.n	8005d8a <_malloc_r+0x7e>
 8005d4c:	428c      	cmp	r4, r1
 8005d4e:	bf0d      	iteet	eq
 8005d50:	6863      	ldreq	r3, [r4, #4]
 8005d52:	684b      	ldrne	r3, [r1, #4]
 8005d54:	6063      	strne	r3, [r4, #4]
 8005d56:	6013      	streq	r3, [r2, #0]
 8005d58:	bf18      	it	ne
 8005d5a:	460c      	movne	r4, r1
 8005d5c:	e015      	b.n	8005d8a <_malloc_r+0x7e>
 8005d5e:	460c      	mov	r4, r1
 8005d60:	6849      	ldr	r1, [r1, #4]
 8005d62:	e7e9      	b.n	8005d38 <_malloc_r+0x2c>
 8005d64:	4c17      	ldr	r4, [pc, #92]	; (8005dc4 <_malloc_r+0xb8>)
 8005d66:	6823      	ldr	r3, [r4, #0]
 8005d68:	b91b      	cbnz	r3, 8005d72 <_malloc_r+0x66>
 8005d6a:	4630      	mov	r0, r6
 8005d6c:	f000 f82c 	bl	8005dc8 <_sbrk_r>
 8005d70:	6020      	str	r0, [r4, #0]
 8005d72:	4629      	mov	r1, r5
 8005d74:	4630      	mov	r0, r6
 8005d76:	f000 f827 	bl	8005dc8 <_sbrk_r>
 8005d7a:	1c43      	adds	r3, r0, #1
 8005d7c:	d018      	beq.n	8005db0 <_malloc_r+0xa4>
 8005d7e:	1cc4      	adds	r4, r0, #3
 8005d80:	f024 0403 	bic.w	r4, r4, #3
 8005d84:	42a0      	cmp	r0, r4
 8005d86:	d10d      	bne.n	8005da4 <_malloc_r+0x98>
 8005d88:	6025      	str	r5, [r4, #0]
 8005d8a:	4630      	mov	r0, r6
 8005d8c:	f000 f82d 	bl	8005dea <__malloc_unlock>
 8005d90:	f104 000b 	add.w	r0, r4, #11
 8005d94:	1d23      	adds	r3, r4, #4
 8005d96:	f020 0007 	bic.w	r0, r0, #7
 8005d9a:	1ac3      	subs	r3, r0, r3
 8005d9c:	d00e      	beq.n	8005dbc <_malloc_r+0xb0>
 8005d9e:	425a      	negs	r2, r3
 8005da0:	50e2      	str	r2, [r4, r3]
 8005da2:	bd70      	pop	{r4, r5, r6, pc}
 8005da4:	1a21      	subs	r1, r4, r0
 8005da6:	4630      	mov	r0, r6
 8005da8:	f000 f80e 	bl	8005dc8 <_sbrk_r>
 8005dac:	3001      	adds	r0, #1
 8005dae:	d1eb      	bne.n	8005d88 <_malloc_r+0x7c>
 8005db0:	230c      	movs	r3, #12
 8005db2:	6033      	str	r3, [r6, #0]
 8005db4:	4630      	mov	r0, r6
 8005db6:	f000 f818 	bl	8005dea <__malloc_unlock>
 8005dba:	2000      	movs	r0, #0
 8005dbc:	bd70      	pop	{r4, r5, r6, pc}
 8005dbe:	bf00      	nop
 8005dc0:	200001ec 	.word	0x200001ec
 8005dc4:	200001e8 	.word	0x200001e8

08005dc8 <_sbrk_r>:
 8005dc8:	b538      	push	{r3, r4, r5, lr}
 8005dca:	4c06      	ldr	r4, [pc, #24]	; (8005de4 <_sbrk_r+0x1c>)
 8005dcc:	2300      	movs	r3, #0
 8005dce:	4605      	mov	r5, r0
 8005dd0:	4608      	mov	r0, r1
 8005dd2:	6023      	str	r3, [r4, #0]
 8005dd4:	f000 f80a 	bl	8005dec <_sbrk>
 8005dd8:	1c43      	adds	r3, r0, #1
 8005dda:	d102      	bne.n	8005de2 <_sbrk_r+0x1a>
 8005ddc:	6823      	ldr	r3, [r4, #0]
 8005dde:	b103      	cbz	r3, 8005de2 <_sbrk_r+0x1a>
 8005de0:	602b      	str	r3, [r5, #0]
 8005de2:	bd38      	pop	{r3, r4, r5, pc}
 8005de4:	20000c94 	.word	0x20000c94

08005de8 <__malloc_lock>:
 8005de8:	4770      	bx	lr

08005dea <__malloc_unlock>:
 8005dea:	4770      	bx	lr

08005dec <_sbrk>:
 8005dec:	4b04      	ldr	r3, [pc, #16]	; (8005e00 <_sbrk+0x14>)
 8005dee:	6819      	ldr	r1, [r3, #0]
 8005df0:	4602      	mov	r2, r0
 8005df2:	b909      	cbnz	r1, 8005df8 <_sbrk+0xc>
 8005df4:	4903      	ldr	r1, [pc, #12]	; (8005e04 <_sbrk+0x18>)
 8005df6:	6019      	str	r1, [r3, #0]
 8005df8:	6818      	ldr	r0, [r3, #0]
 8005dfa:	4402      	add	r2, r0
 8005dfc:	601a      	str	r2, [r3, #0]
 8005dfe:	4770      	bx	lr
 8005e00:	200001f0 	.word	0x200001f0
 8005e04:	20000c98 	.word	0x20000c98

08005e08 <_init>:
 8005e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e0a:	bf00      	nop
 8005e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e0e:	bc08      	pop	{r3}
 8005e10:	469e      	mov	lr, r3
 8005e12:	4770      	bx	lr

08005e14 <_fini>:
 8005e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e16:	bf00      	nop
 8005e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e1a:	bc08      	pop	{r3}
 8005e1c:	469e      	mov	lr, r3
 8005e1e:	4770      	bx	lr
